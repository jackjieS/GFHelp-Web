<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FSLib.Extension</name>
    </assembly>
    <members>
        <member name="T:System.ComponentModel.FishNotifyPropertyChangeExtension">
            <summary>
            <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> 接口的扩展方法
            </summary>
        </member>
        <member name="M:System.ComponentModel.FishNotifyPropertyChangeExtension.IsPropertyOf``2(System.ComponentModel.PropertyChangedEventArgs,``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            判断事件是否是指定的属性变更引发的
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TProp"></typeparam>
            <param name="obj"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:System.ComponentModel.FishNotifyPropertyChangeExtension.IsPropertyOf``2(System.ComponentModel.PropertyChangingEventArgs,``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            判断事件是否是指定的属性变更引发的
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TProp"></typeparam>
            <param name="obj"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="T:System.Data.FSLibCommonExtension">
            <summary>
            通用数据库的扩展方法
            </summary>
        </member>
        <member name="M:System.Data.FSLibCommonExtension.ClearTable(System.Data.IDbConnection,System.String)">
            <summary>
            清除指定数据表中的数据
            </summary>
            <param name="connection">数据库连接</param>
            <param name="tableName">数据表名</param>
        </member>
        <member name="M:System.Data.FSLibCommonExtension.IsOpen(System.Data.IDbConnection)">
            <summary>
            判断一个连接是否正处于打开状态
            </summary>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:System.Data.FSLibCommonExtension.CreateDbConnection(System.Configuration.ConnectionStringSettings)">
            <summary>
            通过指定的数据库连接配置创建一个 <see cref="T:System.Data.Common.DbConnection"/>
            </summary>
            <param name="setting">连接字符串</param>
            <returns></returns>
        </member>
        <member name="M:System.Data.FSLibCommonExtension.GetDbProviderFactory(System.Configuration.ConnectionStringSettings)">
            <summary>
            通过指定的数据库连接配置获得对应的 <see cref="T:System.Data.Common.DbProviderFactory"/>
            </summary>
            <param name="setting">连接字符串</param>
            <returns></returns>
        </member>
        <member name="M:System.Data.FSLibCommonExtension.CreateCommand(System.Data.IDbConnection,System.String,System.Boolean)">
            <summary>
            创建数据库命令
            </summary>
            <param name="connectionString">连接字符串</param>
            <param name="sql">要执行的语句</param>
            <param name="isProcedure">是否是存储过程</param>
            <returns>创建的结果</returns>
        </member>
        <member name="M:System.Data.FSLibCommonExtension.RunCommandNonQuery(System.Data.IDbCommand)">
            <summary>
            运行命令-NonQuery方式
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:System.Data.FSLibCommonExtension.RunCommandNonQuery(System.Data.IDbCommand,System.Nullable{System.Boolean})">
            <summary>
            运行命令-NonQuery方式
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:System.Data.FSLibCommonExtension.RunCommandScalar(System.Data.IDbCommand)">
            <summary>
            运行命令-Scalar方式
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:System.Data.FSLibCommonExtension.RunCommandScalar(System.Data.IDbCommand,System.Nullable{System.Boolean})">
            <summary>
            运行命令-Scalar方式
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:System.Data.FSLibCommonExtension.RunCommandScalar``1(System.Data.IDbCommand)">
            <summary>
            运行命令-Scalar方式
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:System.Data.FSLibCommonExtension.RunCommandScalar``1(System.Data.IDbCommand,System.Nullable{System.Boolean})">
            <summary>
            运行命令-Scalar方式
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:System.Data.FSLibCommonExtension.RunCommandReader(System.Data.IDbCommand)">
            <summary>
            运行命令-DataReader方式
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:System.Data.FSLibCommonExtension.RunCommandReader(System.Data.IDbCommand,System.Nullable{System.Boolean})">
            <summary>
            运行命令-DataReader方式
            </summary>
            <param name="command">命令</param>
            <param name="closeConnection">是否加入随DataReader关闭连接选项</param>
            <returns></returns>
        </member>
        <member name="M:System.Data.FSLibCommonExtension.RunCommandReader``1(System.Data.IDbCommand,System.Func{System.Data.IDataReader,``0})">
            <summary>
            运行命令-DataReader方式
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:System.Data.FSLibCommonExtension.RunCommandReader``1(System.Data.IDbCommand,System.Func{System.Data.IDataReader,``0},System.Nullable{System.Boolean})">
            <summary>
            运行命令-DataReader方式
            </summary>
            <param name="command">命令</param>
            <param name="closeConnection">是否加入随DataReader关闭连接选项</param>
            <returns></returns>
        </member>
        <member name="M:System.Data.FSLibCommonExtension.ToList``1(System.Data.IDbCommand,System.Func{System.Data.IDataReader,``0},System.Nullable{System.Boolean})">
            <summary>
            运行命令,并返回结果
            </summary>
            <typeparam name="T"></typeparam>
            <param name="command"></param>
            <param name="convertor"></param>
            <param name="closeConnection"></param>
            <returns></returns>
        </member>
        <member name="M:System.Data.FSLibCommonExtension.ToList``1(System.Data.IDbCommand,System.Func{System.Data.IDataReader,``0})">
            <summary>
            运行命令,并返回结果
            </summary>
            <typeparam name="T"></typeparam>
            <param name="command"></param>
            <param name="convertor"></param>
            <param name="closeConnection"></param>
            <returns></returns>
        </member>
        <member name="T:System.Data.OleDb.FSLibOleDbExtension">
            <summary>
            OLEDB 的扩展类
            </summary>
        </member>
        <member name="M:System.Data.OleDb.FSLibOleDbExtension.CreateConnection(System.String)">
            <summary>
            创建数据库连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Data.OleDb.FSLibOleDbExtension.CreateQueryCommand(System.Data.OleDb.OleDbConnection,System.String)">
            <summary>
            创建数据库命令
            </summary>
            <param name="connection"></param>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:System.Data.OleDb.FSLibOleDbExtension.CreateProcedureCommand(System.Data.OleDb.OleDbConnection,System.String)">
            <summary>
            创建数据库命令
            </summary>
            <param name="connection"></param>
            <param name="sql"></param>
            <param name="isProcedure"></param>
            <returns></returns>
        </member>
        <member name="M:System.Data.OleDb.FSLibOleDbExtension.ChangeIdEntity(System.Data.OleDb.OleDbConnection,System.String,System.String,System.Int32)">
            <summary>
            更改主键列的自增值开始数据
            </summary>
            <param name="connection">数据库连接</param>
            <param name="tableName">数据表名</param>
            <param name="idFieldName">自增列名称</param>
            <param name="seed">开始数据</param>
            <returns>开始数据</returns>
        </member>
        <member name="M:System.Data.OleDb.FSLibOleDbExtension.RunCommandNonQuery(System.Data.OleDb.OleDbCommand)">
            <summary>
            运行命令-NonQuery方式
            <para>这个函数隐式带有了执行后关闭数据库链接的参数</para>
            </summary>
            <param name="command">数据库命令</param>
            <returns>返回的结果(影响行数)</returns>
        </member>
        <member name="M:System.Data.OleDb.FSLibOleDbExtension.RunCommandNonQuery(System.Data.OleDb.OleDbCommand,System.Boolean)">
            <summary>
            运行命令-NonQuery方式
            </summary>
            <param name="command">当前命令</param>
            <param name="closeConnection">如果为 true, 则在执行后会自动关闭数据库链接</param>
            <returns>返回的结果(影响行数)</returns>
        </member>
        <member name="M:System.Data.OleDb.FSLibOleDbExtension.RunCommandScalar(System.Data.OleDb.OleDbCommand)">
            <summary>
            运行命令-Scalar方式
            <para>这个函数隐式带有了执行后关闭数据库链接的参数</para>
            </summary>
            <param name="command">当前命令</param>
            <returns>返回的第一行第一列结果</returns>
        </member>
        <member name="M:System.Data.OleDb.FSLibOleDbExtension.RunCommandScalar(System.Data.OleDb.OleDbCommand,System.Boolean)">
            <summary>
            运行命令-Scalar方式
            </summary>
            <param name="command">当前命令</param>
            <param name="closeConnection">如果为 true, 则在执行后会自动关闭数据库链接</param>
            <returns>返回的第一行第一列结果</returns>
        </member>
        <member name="M:System.Data.OleDb.FSLibOleDbExtension.RunCommandScalar``1(System.Data.OleDb.OleDbCommand)">
            <summary>
            运行命令-Scalar方式并返回指定类型的结果
            <para>这个函数隐式带有了执行后关闭数据库链接的参数</para>
            </summary>
            <param name="command">当前命令</param>
            <returns>返回执行的结果</returns>
        </member>
        <member name="M:System.Data.OleDb.FSLibOleDbExtension.RunCommandScalar``1(System.Data.OleDb.OleDbCommand,System.Boolean)">
            <summary>
            运行命令-Scalar方式
            </summary>
            <param name="command">当前命令</param>
            <param name="closeConnection">如果为 true, 则在执行后会自动关闭数据库链接</param>
            <returns>返回执行的结果</returns>
        </member>
        <member name="M:System.Data.OleDb.FSLibOleDbExtension.RunCommandReader(System.Data.OleDb.OleDbCommand)">
            <summary>
            运行命令-DataReader方式
            <para>这个函数隐式带有了执行后关闭数据库链接的参数</para>
            </summary>
            <param name="command">当前命令</param>
            <returns>返回包含执行结果的  <see cref="T:System.Data.SqlClient.OleDbDataReader"/></returns>
        </member>
        <member name="M:System.Data.OleDb.FSLibOleDbExtension.RunCommandReader(System.Data.OleDb.OleDbCommand,System.Boolean)">
            <summary>
            运行命令-DataReader方式
            </summary>
            <param name="command">当前命令</param>
            <param name="closeConnection">如果为 true, 则在执行后会自动关闭数据库链接</param>
            <returns>返回包含执行结果的  <see cref="T:System.Data.SqlClient.OleDbDataReader"/></returns>
        </member>
        <member name="M:System.Data.OleDb.FSLibOleDbExtension.AddParameter(System.Data.OleDb.OleDbCommand,System.String,System.Object)">
            <summary>
            为当前的命令添加参数
            </summary>
            <param name="command">当前命令</param>
            <param name="name">参数名，@符号是可选的</param>
            <param name="value">要添加的值</param>
            <returns>返回传入的  <see cref="T:System.Data.SqlClient.OleDbCommand"/></returns>
        </member>
        <member name="M:System.Data.OleDb.FSLibOleDbExtension.AddParameter(System.Data.OleDb.OleDbCommand,System.String,System.Data.OleDb.OleDbType,System.Object)">
            <summary>
            为当前的命令添加参数
            </summary>
            <param name="command">当前命令</param>
            <param name="name">参数名，@符号是可选的</param>
            <param name="type">参数的类型</param>
            <param name="value">要添加的值</param>
            <returns>返回传入的  <see cref="T:System.Data.SqlClient.OleDbCommand"/></returns>
        </member>
        <member name="M:System.Data.OleDb.FSLibOleDbExtension.AddParameter(System.Data.OleDb.OleDbCommand,System.String,System.Data.OleDb.OleDbType,System.Int32,System.Object)">
            <summary>
            为当前的命令添加参数
            </summary>
            <param name="command">当前命令</param>
            <param name="name">参数名，@符号是可选的</param>
            <param name="type">参数的类型</param>
            <param name="size">参数的长度</param>
            <param name="value">要添加的值</param>
            <returns>返回传入的  <see cref="T:System.Data.SqlClient.OleDbCommand"/></returns>
        </member>
        <member name="M:System.Data.OleDb.FSLibOleDbExtension.AddParameter(System.Data.OleDb.OleDbCommand,System.String,System.Int32)">
            <summary>
            添加参数
            </summary>
            <param name="command">当前命令</param>
            <param name="name">参数名，@符号是可选的</param>
            <param name="value">参数值</param>
            <returns>返回参数命令</returns>
        </member>
        <member name="M:System.Data.OleDb.FSLibOleDbExtension.AddParameter(System.Data.OleDb.OleDbCommand,System.String,System.Boolean)">
            <summary>
            添加参数
            </summary>
            <param name="command">当前命令</param>
            <param name="name">参数名，@符号是可选的</param>
            <param name="value">参数值</param>
            <returns>返回参数命令</returns>
        </member>
        <member name="M:System.Data.OleDb.FSLibOleDbExtension.AddParameter(System.Data.OleDb.OleDbCommand,System.String,System.Int16)">
            <summary>
            添加参数
            </summary>
            <param name="command">当前命令</param>
            <param name="name">参数名，@符号是可选的</param>
            <param name="value">参数值</param>
            <returns>返回参数命令</returns>
        </member>
        <member name="M:System.Data.OleDb.FSLibOleDbExtension.AddParameter(System.Data.OleDb.OleDbCommand,System.String,System.Byte)">
            <summary>
            添加参数
            </summary>
            <param name="command">当前命令</param>
            <param name="name">参数名，@符号是可选的</param>
            <param name="value">参数值</param>
            <returns>返回参数命令</returns>
        </member>
        <member name="M:System.Data.OleDb.FSLibOleDbExtension.AddParameter(System.Data.OleDb.OleDbCommand,System.String,System.DateTime)">
            <summary>
            添加参数
            </summary>
            <param name="command">当前命令</param>
            <param name="name">参数名，@符号是可选的</param>
            <param name="value">参数值</param>
            <returns>返回参数命令</returns>
        </member>
        <member name="M:System.Data.OleDb.FSLibOleDbExtension.AddParameter(System.Data.OleDb.OleDbCommand,System.String,System.String,System.Int32)">
            <summary>
            添加参数
            </summary>
            <param name="command">当前命令</param>
            <param name="name">参数名，@符号是可选的</param>
            <param name="value">参数值</param>
            <returns>返回参数命令</returns>
        </member>
        <member name="M:System.Data.OleDb.FSLibOleDbExtension.Quote(System.String)">
            <summary>
            对字符串进行转义
            </summary>
            <param name="str">要转义的字符串</param>
            <returns>转义后的字符串</returns>
        </member>
        <member name="M:System.Data.OleDb.FSLibOleDbExtension.ToModel``1(System.Data.OleDb.OleDbDataReader,System.Func{System.Data.OleDb.OleDbDataReader,``0})">
            <summary>
            将指定 <see cref="T:System.Data.OleDb.OleDbDataReader"/> 的首行记录转换为类型为 <typeparamref name="T"/> 的实体。如果没有数据，则返回默认值。
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="dr">类型为 <see cref="T:System.Data.OleDb.OleDbDataReader"/> 的数据集阅读器</param>
            <param name="adapter">转换实体数据的方法</param>
            <returns>类型为 <typeparamref name="T"/> 的实体</returns>
        </member>
        <member name="M:System.Data.OleDb.FSLibOleDbExtension.ToModelList``1(System.Data.OleDb.OleDbDataReader,System.Func{System.Data.OleDb.OleDbDataReader,``0})">
            <summary>
            将指定 <see cref="T:System.Data.OleDb.OleDbDataReader"/> 的记录转换为类型为 <typeparamref name="T"/> 的实体泛型列表。
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="dr">类型为 <see cref="T:System.Data.OleDb.OleDbDataReader"/> 的数据集阅读器</param>
            <param name="adapter">转换实体数据的方法</param>
            <returns>类型为 <typeparamref name="T"/> 的实体</returns>
        </member>
        <member name="T:System.Data.SqlClient.FSLib_SqlServerExtension">
            <summary>
            针对Sql Server的扩展类
            </summary>
        </member>
        <member name="M:System.Data.SqlClient.FSLib_SqlServerExtension.CreateConnection(System.String)">
            <summary>
            创建数据库连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Data.SqlClient.FSLib_SqlServerExtension.CreateQueryCommand(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            创建数据库命令
            </summary>
            <param name="connection"></param>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:System.Data.SqlClient.FSLib_SqlServerExtension.CreateProcedureCommand(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            创建数据库命令
            </summary>
            <param name="connection"></param>
            <param name="sql"></param>
            <param name="isProcedure"></param>
            <returns></returns>
        </member>
        <member name="M:System.Data.SqlClient.FSLib_SqlServerExtension.ChangeIdEntity(System.Data.SqlClient.SqlConnection,System.String,System.String,System.Int32)">
            <summary>
            更改主键列的自增值开始数据
            </summary>
            <param name="connection">数据库连接</param>
            <param name="tableName">数据表名</param>
            <param name="idFieldName">自增列名称</param>
            <param name="seed">开始数据</param>
            <returns>开始数据</returns>
        </member>
        <member name="M:System.Data.SqlClient.FSLib_SqlServerExtension.RunCommandNonQuery(System.Data.SqlClient.SqlCommand)">
            <summary>
            运行命令-NonQuery方式
            <para>这个函数隐式带有了执行后关闭数据库链接的参数</para>
            </summary>
            <param name="command">数据库命令</param>
            <returns>返回的结果(影响行数)</returns>
        </member>
        <member name="M:System.Data.SqlClient.FSLib_SqlServerExtension.RunCommandNonQuery(System.Data.SqlClient.SqlCommand,System.Boolean)">
            <summary>
            运行命令-NonQuery方式
            </summary>
            <param name="command">当前命令</param>
            <param name="closeConnection">如果为 true, 则在执行后会自动关闭数据库链接</param>
            <returns>返回的结果(影响行数)</returns>
        </member>
        <member name="M:System.Data.SqlClient.FSLib_SqlServerExtension.RunCommandScalar(System.Data.SqlClient.SqlCommand)">
            <summary>
            运行命令-Scalar方式
            <para>这个函数隐式带有了执行后关闭数据库链接的参数</para>
            </summary>
            <param name="command">当前命令</param>
            <returns>返回的第一行第一列结果</returns>
        </member>
        <member name="M:System.Data.SqlClient.FSLib_SqlServerExtension.RunCommandScalar(System.Data.SqlClient.SqlCommand,System.Boolean)">
            <summary>
            运行命令-Scalar方式
            </summary>
            <param name="command">当前命令</param>
            <param name="closeConnection">如果为 true, 则在执行后会自动关闭数据库链接</param>
            <returns>返回的第一行第一列结果</returns>
        </member>
        <member name="M:System.Data.SqlClient.FSLib_SqlServerExtension.RunCommandScalar``1(System.Data.SqlClient.SqlCommand)">
            <summary>
            运行命令-Scalar方式并返回指定类型的结果
            <para>这个函数隐式带有了执行后关闭数据库链接的参数</para>
            </summary>
            <param name="command">当前命令</param>
            <returns>返回执行的结果</returns>
        </member>
        <member name="M:System.Data.SqlClient.FSLib_SqlServerExtension.RunCommandScalar``1(System.Data.SqlClient.SqlCommand,System.Boolean)">
            <summary>
            运行命令-Scalar方式
            </summary>
            <param name="command">当前命令</param>
            <param name="closeConnection">如果为 true, 则在执行后会自动关闭数据库链接</param>
            <returns>返回执行的结果</returns>
        </member>
        <member name="M:System.Data.SqlClient.FSLib_SqlServerExtension.RunCommandReader(System.Data.SqlClient.SqlCommand)">
            <summary>
            运行命令-DataReader方式
            <para>这个函数隐式带有了执行后关闭数据库链接的参数</para>
            </summary>
            <param name="command">当前命令</param>
            <returns>返回包含执行结果的  <see cref="T:System.Data.SqlClient.SqlDataReader"/></returns>
        </member>
        <member name="M:System.Data.SqlClient.FSLib_SqlServerExtension.RunCommandReader(System.Data.SqlClient.SqlCommand,System.Boolean)">
            <summary>
            运行命令-DataReader方式
            </summary>
            <param name="command">当前命令</param>
            <param name="closeConnection">如果为 true, 则在执行后会自动关闭数据库链接</param>
            <returns>返回包含执行结果的  <see cref="T:System.Data.SqlClient.SqlDataReader"/></returns>
        </member>
        <member name="M:System.Data.SqlClient.FSLib_SqlServerExtension.AddParameter(System.Data.SqlClient.SqlCommand,System.String,System.Object)">
            <summary>
            为当前的命令添加参数
            </summary>
            <param name="command">当前命令</param>
            <param name="name">参数名，@符号是可选的</param>
            <param name="value">要添加的值</param>
            <returns>返回传入的  <see cref="T:System.Data.SqlClient.SqlCommand"/></returns>
        </member>
        <member name="M:System.Data.SqlClient.FSLib_SqlServerExtension.AddParameter(System.Data.SqlClient.SqlCommand,System.String,System.Data.SqlDbType,System.Object)">
            <summary>
            为当前的命令添加参数
            </summary>
            <param name="command">当前命令</param>
            <param name="name">参数名，@符号是可选的</param>
            <param name="type">参数的类型</param>
            <param name="value">要添加的值</param>
            <returns>返回传入的  <see cref="T:System.Data.SqlClient.SqlCommand"/></returns>
        </member>
        <member name="M:System.Data.SqlClient.FSLib_SqlServerExtension.AddParameter(System.Data.SqlClient.SqlCommand,System.String,System.Data.SqlDbType,System.Int32,System.Object)">
            <summary>
            为当前的命令添加参数
            </summary>
            <param name="command">当前命令</param>
            <param name="name">参数名，@符号是可选的</param>
            <param name="type">参数的类型</param>
            <param name="size">参数的长度</param>
            <param name="value">要添加的值</param>
            <returns>返回传入的  <see cref="T:System.Data.SqlClient.SqlCommand"/></returns>
        </member>
        <member name="M:System.Data.SqlClient.FSLib_SqlServerExtension.AddParameter(System.Data.SqlClient.SqlCommand,System.String,System.Int32)">
            <summary>
            添加参数
            </summary>
            <param name="command">当前命令</param>
            <param name="name">参数名，@符号是可选的</param>
            <param name="value">参数值</param>
            <returns>返回参数命令</returns>
        </member>
        <member name="M:System.Data.SqlClient.FSLib_SqlServerExtension.AddParameter(System.Data.SqlClient.SqlCommand,System.String,System.Boolean)">
            <summary>
            添加参数
            </summary>
            <param name="command">当前命令</param>
            <param name="name">参数名，@符号是可选的</param>
            <param name="value">参数值</param>
            <returns>返回参数命令</returns>
        </member>
        <member name="M:System.Data.SqlClient.FSLib_SqlServerExtension.AddParameter(System.Data.SqlClient.SqlCommand,System.String,System.Int16)">
            <summary>
            添加参数
            </summary>
            <param name="command">当前命令</param>
            <param name="name">参数名，@符号是可选的</param>
            <param name="value">参数值</param>
            <returns>返回参数命令</returns>
        </member>
        <member name="M:System.Data.SqlClient.FSLib_SqlServerExtension.AddParameter(System.Data.SqlClient.SqlCommand,System.String,System.Byte)">
            <summary>
            添加参数
            </summary>
            <param name="command">当前命令</param>
            <param name="name">参数名，@符号是可选的</param>
            <param name="value">参数值</param>
            <returns>返回参数命令</returns>
        </member>
        <member name="M:System.Data.SqlClient.FSLib_SqlServerExtension.AddParameter(System.Data.SqlClient.SqlCommand,System.String,System.DateTime)">
            <summary>
            添加参数
            </summary>
            <param name="command">当前命令</param>
            <param name="name">参数名，@符号是可选的</param>
            <param name="value">参数值</param>
            <returns>返回参数命令</returns>
        </member>
        <member name="M:System.Data.SqlClient.FSLib_SqlServerExtension.AddParameter(System.Data.SqlClient.SqlCommand,System.String,System.String,System.Int32)">
            <summary>
            添加参数
            </summary>
            <param name="command">当前命令</param>
            <param name="name">参数名，@符号是可选的</param>
            <param name="value">参数值</param>
            <returns>返回参数命令</returns>
        </member>
        <member name="T:System.Diagnostics.FishProcessExtension">
            <summary>
            进程扩展类
            </summary>
        </member>
        <member name="M:System.Diagnostics.FishProcessExtension.StartExternal(System.Diagnostics.ProcessStartInfo,System.Action{System.IO.StreamReader},System.Action{System.IO.StreamReader},System.Action{System.IO.StreamWriter})">
            <summary>
            启动外部进程,并根据设置来读取信息
            </summary>
            <param name="psi">要启动的进程信息</param>
            <param name="standardOutput">读取标准输出,将会以一个独立的线程启动</param>
            <param name="standardError">读取标准错误流,将会以一个独立的线程启动</param>
            <param name="standardInput">写入标准输入流,将会以一个独立的线程启动</param>
            <returns></returns>
            <remarks>这里的线程会在进程退出后强行被结束,因此不要在此做复杂的耗时操作,可能会出现意外情况</remarks>
        </member>
        <member name="M:System.Diagnostics.FishProcessExtension.KillThread(System.Threading.Thread)">
            <summary>
            强行终止线程
            </summary>
            <param name="thread"></param>
        </member>
        <member name="T:System.FishArrayExtension">
            <summary>
            对数组的扩展方法
            </summary>
        </member>
        <member name="M:System.FishArrayExtension.Filter``1(``0[],System.Func{System.Int32,``0,System.Boolean})">
            <summary>
            对象数组进行过滤，并返回新的数组
            </summary>
            <typeparam name="T">数组类型</typeparam>
            <param name="array">原数组</param>
            <param name="filterExpression">过滤比较</param>
            <returns>
            过滤后的数组
            </returns>
            <exception cref="T:System.ArgumentNullException">array</exception>
        </member>
        <member name="M:System.FishArrayExtension.ForEachWithIndex``1(``0[],System.Action{System.Int32,``0})">
            <summary>
            遍历数组，并对数组执行指定操作
            </summary>
            <typeparam name="T">数组类型</typeparam>
            <param name="array">原数组</param>
            <param name="action">执行的操作</param>
            <exception cref="T:System.ArgumentNullException">array is null</exception>
        </member>
        <member name="M:System.FishArrayExtension.Contains``1(``0[],``0,System.Func{``0,``0,System.Boolean})">
            <summary>
            测试一个元素是否在数组中
            </summary>
            <typeparam name="T">数组类型</typeparam>
            <param name="array">原数组</param>
            <param name="value">值</param>
            <param name="comparer">比较器</param>
            <returns>是否在数组中</returns>
            <exception cref="T:System.ArgumentNullException">array</exception>
        </member>
        <member name="M:System.FishArrayExtension.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            对可遍历对象进行遍历并进行指定操作
            </summary>
            <typeparam name="T">遍历的类型</typeparam>
            <param name="enumberable">对象</param>
            <param name="predicate">函数委托</param>
            <exception cref="T:System.ArgumentNullException">predicate</exception>
        </member>
        <member name="M:System.FishArrayExtension.IsEmpty``1(``0[])">
            <summary>
            获得指定数组是否为空
            </summary>
            <typeparam name="T">数组类型</typeparam>
            <param name="array">要检测的数组</param>
            <returns>如果为空或长度为零的数组，则返回true</returns>
        </member>
        <member name="M:System.FishArrayExtension.Join(System.String[],System.String)">
            <summary>
            使用指定的分隔符将字符串数组连接起来
            </summary>
            <param name="array">字符串数组</param>
            <param name="seperator">分隔符</param>
            <returns>参见 <see cref="T:System.String"/></returns>
        </member>
        <member name="M:System.FishArrayExtension.Join(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            使用指定的分隔符将字符串可遍历对象连接起来
            </summary>
            <param name="array">字符串可遍历对象</param>
            <param name="seperator">分隔符</param>
            <returns>参见 <see cref="T:System.String"/></returns>
        </member>
        <member name="M:System.FishArrayExtension.Join(System.Collections.Generic.IEnumerable{System.Char},System.String)">
            <summary>
            使用指定的分隔符将字符串可遍历对象连接起来
            </summary>
            <param name="array">字符串可遍历对象</param>
            <param name="seperator">分隔符</param>
            <returns>参见 <see cref="T:System.String"/></returns>
        </member>
        <member name="M:System.FishArrayExtension.WithinIndex(System.Array,System.Int32)">
            <summary>
            	检测索引是否在数组的范围之内
            </summary>
            <param name = "source">源数组</param>
            <param name = "index">检查的索引</param>
            <param name="dimension">检查的维度</param>
            <returns><c>true</c> 表示有效，<c>false</c> 表示索引超过范围</returns>
        </member>
        <member name="M:System.FishArrayExtension.WithinIndex(System.Array,System.Int32,System.Int32)">
            <summary>
            	检测索引是否在数组的范围之内
            </summary>
            <param name = "source">源数组</param>
            <param name = "index">检查的索引</param>
            <param name="dimension">检查的维度</param>
            <returns><c>true</c> 表示有效，<c>false</c> 表示索引超过范围</returns>
        </member>
        <member name="M:System.FishArrayExtension.Clear``1(``0[])">
            <summary>
            清空指定的数组
            </summary>
            <typeparam name="T">数组类型</typeparam>
            <param name="array">要清空的数组</param>
        </member>
        <member name="M:System.FishArrayExtension.FindIndex``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            查找索引
            </summary>
            <typeparam name="T"></typeparam>
            <param name="src"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishArrayExtension.FindSequence``1(``0[],``0[],System.Int32,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            在当前的数组中查找指定的匹配序列
            </summary>
            <param name="array">目标数组</param>
            <param name="sequence">要搜索的目标</param>
            <param name="startIndex">搜索起始索引</param>
            <param name="comparer">比较器</param>
            <typeparam name="T">当前数组类型</typeparam>
            <returns>如果找到，则返回起始索引；否则返回-1</returns>
        </member>
        <member name="M:System.FishArrayExtension.FindSequence(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            在当前的数组中查找指定的匹配序列
            </summary>
            <param name="array">目标数组</param>
            <param name="sequence">要搜索的目标</param>
            <param name="startIndex">搜索起始索引</param>
            <returns>如果找到，则返回起始索引；否则返回-1</returns>
        </member>
        <member name="M:System.FishArrayExtension.FindSequence(System.Int32[],System.Int32[],System.Int32)">
            <summary>
            在当前的数组中查找指定的匹配序列
            </summary>
            <param name="array">目标数组</param>
            <param name="sequence">要搜索的目标</param>
            <param name="startIndex">搜索起始索引</param>
            <returns>如果找到，则返回起始索引；否则返回-1</returns>
        </member>
        <member name="M:System.FishArrayExtension.FindSequence(System.Char[],System.Char[],System.Int32)">
            <summary>
            在当前的数组中查找指定的匹配序列
            </summary>
            <param name="array">目标数组</param>
            <param name="sequence">要搜索的目标</param>
            <param name="startIndex">搜索起始索引</param>
            <returns>如果找到，则返回起始索引；否则返回-1</returns>
        </member>
        <member name="M:System.FishArrayExtension.ToBase64(System.Byte[])">
            <summary>
            将指定的字节数组转换为Base64格式
            </summary>
            <param name="array">要转换的字节数组</param>
            <returns>Base64格式的字符串</returns>
        </member>
        <member name="M:System.FishArrayExtension.ToImage(System.Byte[])">
            <summary>
            将指定的字节数组转换为Image图像对象
            </summary>
            <param name="array">要转换的字节数组</param>
            <returns><see cref="T:System.Drawing.Image"/></returns>
        </member>
        <member name="M:System.FishArrayExtension.ToBytes(System.Boolean)">
            <summary>
            将指定的数值转换为字节组
            </summary>
            <param name="value">要转换的数值</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:System.FishArrayExtension.ToBytes(System.Int16)">
            <summary>
            将指定的数值转换为字节组
            </summary>
            <param name="value">要转换的数值</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:System.FishArrayExtension.ToBytes(System.UInt16)">
            <summary>
            将指定的数值转换为字节组
            </summary>
            <param name="value">要转换的数值</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:System.FishArrayExtension.ToBytes(System.Char)">
            <summary>
            将指定的数值转换为字节组
            </summary>
            <param name="value">要转换的数值</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:System.FishArrayExtension.ToBytes(System.Int64)">
            <summary>
            将指定的数值转换为字节组
            </summary>
            <param name="value">要转换的数值</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:System.FishArrayExtension.ToBytes(System.UInt64)">
            <summary>
            将指定的数值转换为字节组
            </summary>
            <param name="value">要转换的数值</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:System.FishArrayExtension.ToBytes(System.Int32)">
            <summary>
            将指定的数值转换为字节组
            </summary>
            <param name="value">要转换的数值</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:System.FishArrayExtension.ToBytes(System.UInt32)">
            <summary>
            将指定的数值转换为字节组
            </summary>
            <param name="value">要转换的数值</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:System.FishArrayExtension.ToBytes(System.Single)">
            <summary>
            将指定的数值转换为字节组
            </summary>
            <param name="value">要转换的数值</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:System.FishArrayExtension.ToBytes(System.Double)">
            <summary>
            将指定的数值转换为字节组
            </summary>
            <param name="value">要转换的数值</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:System.FishArrayExtension.ToBoolean(System.Byte[])">
            <summary>
            返回指定的字节数组中以指定位置的字节转换来的值
            </summary>
            <param name="buffer">来源字节数组</param>
            <returns>值</returns>
        </member>
        <member name="M:System.FishArrayExtension.ToBoolean(System.Byte[],System.Int32)">
            <summary>
            返回指定的字节数组中以指定位置的字节转换来的值
            </summary>
            <param name="buffer">来源字节数组</param>
            <param name="offset">数据偏移</param>
            <returns>值</returns>
        </member>
        <member name="M:System.FishArrayExtension.ToChar(System.Byte[])">
            <summary>
            返回指定的字节数组中以指定位置的字节转换来的值
            </summary>
            <param name="buffer">来源字节数组</param>
            <returns>值</returns>
        </member>
        <member name="M:System.FishArrayExtension.ToChar(System.Byte[],System.Int32)">
            <summary>
            返回指定的字节数组中以指定位置的字节转换来的值
            </summary>
            <param name="buffer">来源字节数组</param>
            <param name="offset">数据偏移</param>
            <returns>值</returns>
        </member>
        <member name="M:System.FishArrayExtension.ToDouble(System.Byte[])">
            <summary>
            返回指定的字节数组中以指定位置的字节转换来的值
            </summary>
            <param name="buffer">来源字节数组</param>
            <returns>值</returns>
        </member>
        <member name="M:System.FishArrayExtension.ToDouble(System.Byte[],System.Int32)">
            <summary>
            返回指定的字节数组中以指定位置的字节转换来的值
            </summary>
            <param name="buffer">来源字节数组</param>
            <param name="offset">数据偏移</param>
            <returns>值</returns>
        </member>
        <member name="M:System.FishArrayExtension.ToShort(System.Byte[])">
            <summary>
            返回指定的字节数组中以指定位置的字节转换来的值
            </summary>
            <param name="buffer">来源字节数组</param>
            <returns>值</returns>
        </member>
        <member name="M:System.FishArrayExtension.ToShort(System.Byte[],System.Int32)">
            <summary>
            返回指定的字节数组中以指定位置的字节转换来的值
            </summary>
            <param name="buffer">来源字节数组</param>
            <param name="offset">数据偏移</param>
            <returns>值</returns>
        </member>
        <member name="M:System.FishArrayExtension.ToInt(System.Byte[])">
            <summary>
            返回指定的字节数组中以指定位置的字节转换来的值
            </summary>
            <param name="buffer">来源字节数组</param>
            <returns>值</returns>
        </member>
        <member name="M:System.FishArrayExtension.ToInt32(System.Byte[],System.Int32)">
            <summary>
            返回指定的字节数组中以指定位置的字节转换来的值
            </summary>
            <param name="buffer">来源字节数组</param>
            <param name="offset">数据偏移</param>
            <returns>值</returns>
        </member>
        <member name="M:System.FishArrayExtension.ToInt64(System.Byte[])">
            <summary>
            返回指定的字节数组中以指定位置的字节转换来的值
            </summary>
            <param name="buffer">来源字节数组</param>
            <returns>值</returns>
        </member>
        <member name="M:System.FishArrayExtension.ToInt64(System.Byte[],System.Int32)">
            <summary>
            返回指定的字节数组中以指定位置的字节转换来的值
            </summary>
            <param name="buffer">来源字节数组</param>
            <param name="offset">数据偏移</param>
            <returns>值</returns>
        </member>
        <member name="M:System.FishArrayExtension.ToSingle(System.Byte[])">
            <summary>
            返回指定的字节数组中以指定位置的字节转换来的值
            </summary>
            <param name="buffer">来源字节数组</param>
            <returns>值</returns>
        </member>
        <member name="M:System.FishArrayExtension.ToSingle(System.Byte[],System.Int32)">
            <summary>
            返回指定的字节数组中以指定位置的字节转换来的值
            </summary>
            <param name="buffer">来源字节数组</param>
            <param name="offset">数据偏移</param>
            <returns>值</returns>
        </member>
        <member name="M:System.FishArrayExtension.ToHexString(System.Byte[],System.Int32,System.Int32,System.Char,System.Boolean)">
            <summary>
            将字节数组转换为字符串形式
            </summary>
            <param name="buffer">字节数组</param>
            <param name="offset">数据偏移</param>
            <param name="length">长度</param>
            <param name="seperator">分隔符</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:System.FishArrayExtension.ToUInt16(System.Byte[],System.Int32)">
            <summary>
            返回指定的字节数组中以指定位置的字节转换来的值
            </summary>
            <param name="buffer">来源字节数组</param>
            <param name="offset">数据偏移</param>
            <returns>值</returns>
        </member>
        <member name="M:System.FishArrayExtension.ToInt32U(System.Byte[],System.Int32)">
            <summary>
            返回指定的字节数组中以指定位置的字节转换来的值
            </summary>
            <param name="buffer">来源字节数组</param>
            <param name="offset">数据偏移</param>
            <returns>值</returns>
        </member>
        <member name="M:System.FishArrayExtension.ToUInt64(System.Byte[],System.Int32)">
            <summary>
            返回指定的字节数组中以指定位置的字节转换来的值
            </summary>
            <param name="buffer">来源字节数组</param>
            <param name="offset">数据偏移</param>
            <returns>值</returns>
        </member>
        <member name="M:System.FishArrayExtension.CopyToBuffer(System.Int32,System.Byte[])">
            <summary>
            将指定的值复制到指定的缓冲字节组中
            </summary>
            <param name="value">要写入的值</param>
            <param name="buffer">目标缓冲数组</param>
            <exception cref="T:System.ArgumentException">目标数组为空或者目标长度不足以写入值</exception>
        </member>
        <member name="M:System.FishArrayExtension.CopyToBuffer(System.Int32,System.Byte[],System.Int32)">
            <summary>
            将指定的值复制到指定的缓冲字节组中
            </summary>
            <param name="value">要写入的值</param>
            <param name="buffer">目标缓冲数组</param>
            <param name="offset">数据偏移</param>
            <exception cref="T:System.ArgumentException">目标数组为空或者目标长度不足以写入值</exception>
        </member>
        <member name="M:System.FishArrayExtension.CopyToBuffer(System.UInt32,System.Byte[])">
            <summary>
            将指定的值复制到指定的缓冲字节组中
            </summary>
            <param name="value">要写入的值</param>
            <param name="buffer">目标缓冲数组</param>
            <exception cref="T:System.ArgumentException">目标数组为空或者目标长度不足以写入值</exception>
        </member>
        <member name="M:System.FishArrayExtension.CopyToBuffer(System.UInt32,System.Byte[],System.Int32)">
            <summary>
            将指定的值复制到指定的缓冲字节组中
            </summary>
            <param name="value">要写入的值</param>
            <param name="buffer">目标缓冲数组</param>
            <param name="offset">数据偏移</param>
            <exception cref="T:System.ArgumentException">目标数组为空或者目标长度不足以写入值</exception>
        </member>
        <member name="M:System.FishArrayExtension.CopyToBuffer(System.Int16,System.Byte[])">
            <summary>
            将指定的值复制到指定的缓冲字节组中
            </summary>
            <param name="value">要写入的值</param>
            <param name="buffer">目标缓冲数组</param>
            <exception cref="T:System.ArgumentException">目标数组为空或者目标长度不足以写入值</exception>
        </member>
        <member name="M:System.FishArrayExtension.CopyToBuffer(System.Int16,System.Byte[],System.Int32)">
            <summary>
            将指定的值复制到指定的缓冲字节组中
            </summary>
            <param name="value">要写入的值</param>
            <param name="buffer">目标缓冲数组</param>
            <param name="offset">数据偏移</param>
            <exception cref="T:System.ArgumentException">目标数组为空或者目标长度不足以写入值</exception>
        </member>
        <member name="M:System.FishArrayExtension.CopyToBuffer(System.UInt16,System.Byte[])">
            <summary>
            将指定的值复制到指定的缓冲字节组中
            </summary>
            <param name="value">要写入的值</param>
            <param name="buffer">目标缓冲数组</param>
            <exception cref="T:System.ArgumentException">目标数组为空或者目标长度不足以写入值</exception>
        </member>
        <member name="M:System.FishArrayExtension.CopyToBuffer(System.UInt16,System.Byte[],System.Int32)">
            <summary>
            将指定的值复制到指定的缓冲字节组中
            </summary>
            <param name="value">要写入的值</param>
            <param name="buffer">目标缓冲数组</param>
            <param name="offset">数据偏移</param>
            <exception cref="T:System.ArgumentException">目标数组为空或者目标长度不足以写入值</exception>
        </member>
        <member name="M:System.FishArrayExtension.CopyToBuffer(System.Int64,System.Byte[])">
            <summary>
            将指定的值复制到指定的缓冲字节组中
            </summary>
            <param name="value">要写入的值</param>
            <param name="buffer">目标缓冲数组</param>
            <exception cref="T:System.ArgumentException">目标数组为空或者目标长度不足以写入值</exception>
        </member>
        <member name="M:System.FishArrayExtension.CopyToBuffer(System.UInt64,System.Byte[],System.Int32)">
            <summary>
            将指定的值复制到指定的缓冲字节组中
            </summary>
            <param name="value">要写入的值</param>
            <param name="buffer">目标缓冲数组</param>
            <param name="offset">数据偏移</param>
            <exception cref="T:System.ArgumentException">目标数组为空或者目标长度不足以写入值</exception>
        </member>
        <member name="M:System.FishArrayExtension.CopyToBuffer(System.Single,System.Byte[])">
            <summary>
            将指定的值复制到指定的缓冲字节组中
            </summary>
            <param name="value">要写入的值</param>
            <param name="buffer">目标缓冲数组</param>
            <exception cref="T:System.ArgumentException">目标数组为空或者目标长度不足以写入值</exception>
        </member>
        <member name="M:System.FishArrayExtension.CopyToBuffer(System.Single,System.Byte[],System.Int32)">
            <summary>
            将指定的值复制到指定的缓冲字节组中
            </summary>
            <param name="value">要写入的值</param>
            <param name="buffer">目标缓冲数组</param>
            <param name="offset">数据偏移</param>
            <exception cref="T:System.ArgumentException">目标数组为空或者目标长度不足以写入值</exception>
        </member>
        <member name="M:System.FishArrayExtension.CopyToBuffer(System.Double,System.Byte[])">
            <summary>
            将指定的值复制到指定的缓冲字节组中
            </summary>
            <param name="value">要写入的值</param>
            <param name="buffer">目标缓冲数组</param>
            <exception cref="T:System.ArgumentException">目标数组为空或者目标长度不足以写入值</exception>
        </member>
        <member name="M:System.FishArrayExtension.CopyToBuffer(System.Double,System.Byte[],System.Int32)">
            <summary>
            将指定的值复制到指定的缓冲字节组中
            </summary>
            <param name="value">要写入的值</param>
            <param name="buffer">目标缓冲数组</param>
            <param name="offset">数据偏移</param>
            <exception cref="T:System.ArgumentException">目标数组为空或者目标长度不足以写入值</exception>
        </member>
        <member name="M:System.FishArrayExtension.CopyToBuffer(System.String,System.Byte[])">
            <summary>
            将指定的字符串复制到缓冲数组中
            </summary>
            <param name="value">值</param>
            <param name="buffer">缓冲数组</param>
            <returns>写入的长度</returns>
            <exception cref="T:System.ArgumentNullException">buffer</exception>
            <exception cref="T:System.InvalidOperationException">缓冲数组长度不足</exception>
        </member>
        <member name="M:System.FishArrayExtension.CopyToBuffer(System.String,System.Byte[],System.Int32)">
            <summary>
            将指定的字符串复制到缓冲数组中
            </summary>
            <param name="value">值</param>
            <param name="buffer">缓冲数组</param>
            <param name="offset">数据偏移</param>
            <returns>写入的长度</returns>
            <exception cref="T:System.ArgumentNullException">buffer</exception>
            <exception cref="T:System.InvalidOperationException">缓冲数组长度不足</exception>
        </member>
        <member name="M:System.FishArrayExtension.CopyToBuffer(System.String,System.Text.Encoding,System.Byte[],System.Int32)">
            <summary>
            将指定的字符串复制到缓冲数组中
            </summary>
            <param name="value">值</param>
            <param name="encoding">编码，默认为Unicode</param>
            <param name="buffer">缓冲数组</param>
            <param name="offset">数据偏移</param>
            <returns>写入的长度</returns>
            <exception cref="T:System.ArgumentNullException">buffer</exception>
            <exception cref="T:System.InvalidOperationException">缓冲数组长度不足</exception>
        </member>
        <member name="M:System.FishArrayExtension.MD5(System.Byte[])">
            <summary>
            计算指定字节数组的MD5
            </summary>
            <param name="source">来源数组</param>
            <returns></returns>
        </member>
        <member name="M:System.FishArrayExtension.Md5String(System.Byte[])">
            <summary>
            计算指定字节数组的MD5字符串
            </summary>
            <param name="source">来源数组</param>
            <returns></returns>
        </member>
        <member name="M:System.FishArrayExtension.Sha1(System.Byte[])">
            <summary>
            计算指定字节数组的SHA1
            </summary>
            <param name="source">来源数组</param>
            <returns></returns>
        </member>
        <member name="M:System.FishArrayExtension.Sha1String(System.Byte[])">
            <summary>
            计算指定字节数组的SHA1
            </summary>
            <param name="source">来源数组</param>
            <returns></returns>
        </member>
        <member name="M:System.FishArrayExtension.Compress(System.Byte[])">
            <summary>
            压缩数据组
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishArrayExtension.Decompress(System.Byte[])">
            <summary>
            解压缩数据组
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:System.FishCollectionExtension">
            <summary>
            集合类的扩展方法
            </summary>
        </member>
        <member name="M:System.FishCollectionExtension.ToDictionary(System.Collections.Specialized.NameValueCollection)">
            <summary>
            转换为字典
            </summary>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishCollectionExtension.GetValue(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            从集合中获得指定的键值
            </summary>
            <param name="collection"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishCollectionExtension.GetValue(System.Collections.Specialized.NameValueCollection,System.String,System.String)">
            <summary>
            从集合中获得指定的键值
            </summary>
            <param name="collection"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:System.FishCollectionExtension.RandomOrder``1(``0[])">
            <summary>
            将一个数组内容随机打乱
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishCollectionExtension.SplitPage``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32@,System.Int32@)">
            <summary>
            对泛型列表的数据进行分页
            </summary>
            <typeparam name="T">列表的类型</typeparam>
            <param name="obj">原始数据</param>
            <param name="pagesize">每页尺寸</param>
            <param name="pageindex">页码，引用型，当超过范围时会自动修正</param>
            <param name="totalpage">传出，表示当前共有多少页</param>
            <returns>分页后的结果</returns>
        </member>
        <member name="M:System.FishCollectionExtension.RandomTake``1(System.Collections.Generic.List{``0},System.Random)">
            <summary>
            从一个列表中随机选择对象
            </summary>
            <typeparam name="T">队列数据类型</typeparam>
            <param name="list">列表</param>
            <param name="random">使用的随机种子。如果使用null，则会新建一个</param>
            <returns>获得的结果</returns>
        </member>
        <member name="M:System.FishCollectionExtension.GetValue``2(System.Collections.Generic.Dictionary{``0,``1},``0)">
            <summary>
            尝试从字典中获得值
            </summary>
            <typeparam name="Tkey">字典的键类型</typeparam>
            <typeparam name="TValue">字典的值类型</typeparam>
            <param name="dic">字典对象</param>
            <param name="key">检索的键</param>
            <returns>返回要查找的对象</returns>
        </member>
        <member name="M:System.FishCollectionExtension.GetValue``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
            尝试从字典中获得值, 如果不包含则放入一个由指定函数返回的初始值
            </summary>
            <typeparam name="Tkey">字典的键类型</typeparam>
            <typeparam name="TValue">字典的值类型</typeparam>
            <param name="dic">字典对象</param>
            <param name="key">检索的键</param>
            <returns>返回要查找的对象</returns>
        </member>
        <member name="M:System.FishCollectionExtension.GetValue``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            尝试从字典中获得值
            </summary>
            <typeparam name="Tkey">字典的键类型</typeparam>
            <typeparam name="TValue">字典的值类型</typeparam>
            <param name="dic">字典对象</param>
            <param name="key">检索的键</param>
            <param name="defaultValue">没有找到时返回的默认值</param>
            <returns>返回要查找的对象</returns>
        </member>
        <member name="M:System.FishCollectionExtension.GetIndex``2(System.Collections.Generic.SortedDictionary{``0,``1},``0)">
            <summary>
            查找一个有序字典中指定的键的索引
            </summary>
            <typeparam name="TKey">字典的键类型</typeparam>
            <typeparam name="TValue">字典的值类型</typeparam>
            <param name="dic">字典</param>
            <param name="key">要查找的键</param>
            <returns>返回相应的索引；如果没找到，则返回 -1</returns>
        </member>
        <member name="M:System.FishCollectionExtension.GetIndex``2(System.Collections.Generic.SortedList{``0,``1},``0)">
            <summary>
            查找一个有序列表中指定的键的索引
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="list">列表</param>
            <param name="key">要查找的键</param>
            <returns>返回相应的索引；如果没找到，则返回 -1</returns>
        </member>
        <member name="M:System.FishCollectionExtension.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            添加或更新一个值
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dic"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:System.FishCollectionExtension.TryRemove``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1@)">
            <summary>
            尝试移除一个键
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dic"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishCollectionExtension.CastToAnonymousType``2(System.Collections.Generic.IEnumerable{``0},``1)">
            <summary>
            将指定的序列转换为目标序列
            </summary>
            <typeparam name="TIn"></typeparam>
            <typeparam name="TOut"></typeparam>
            <param name="src"></param>
            <param name="targetObj"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishCollectionExtension.ExceptNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            对队列进行过滤, 去除为空的项目
            </summary>
            <typeparam name="T">队列类型</typeparam>
            <param name="source">来源</param>
            <returns></returns>
        </member>
        <member name="M:System.FishCollectionExtension.MapToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            转换队列到HashSet对象
            </summary>
            <typeparam name="T">可枚举类型</typeparam>
            <param name="source">源</param>
            <returns></returns>
        </member>
        <member name="M:System.FishCollectionExtension.MapToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            转换队列到HashSet对象
            </summary>
            <typeparam name="T">可枚举类型</typeparam>
            <param name="source">源</param>
            <param name="comparer">要使用的比较器</param>
            <returns><see cref="T:System.Collections.Generic.HashSet{T}"/></returns>
        </member>
        <member name="M:System.FishCollectionExtension.CrossJoin``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            生成两个序列的交叉
            </summary>
            <typeparam name="T1">序列1类型</typeparam>
            <typeparam name="T2">序列2类型</typeparam>
            <param name="t1">序列1</param>
            <param name="t2">序列2</param>
            <returns></returns>
        </member>
        <member name="M:System.FishCollectionExtension.ToQueue``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            将指定的可遍历序列转换为一个队列
            </summary>
            <typeparam name="T">序列类型</typeparam>
            <param name="source">源序列</param>
            <returns><see cref="T:System.Collections.Generic.Queue{T}"/></returns>
        </member>
        <member name="M:System.FishCollectionExtension.ToStack``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            将指定的可遍历序列转换为一个栈
            </summary>
            <typeparam name="T">序列类型</typeparam>
            <param name="source">源序列</param>
            <returns><see cref="T:System.Collections.Generic.Stack`1"/></returns>
        </member>
        <member name="M:System.FishCollectionExtension.SplitPage``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            将源数据按指定的尺寸分割，并返回最终的结果
            </summary>
            <typeparam name="T">源类型</typeparam>
            <param name="source">来源数据</param>
            <param name="pagesize">每页尺寸</param>
            <returns>包含了每页数据的列表</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>pagesize</c> is out of range.</exception>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:System.FishCollectionExtension.EnqueueMany``1(System.Collections.Generic.Queue{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            将多个对象同时压入队列
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="queue">队列</param>
            <param name="eles">对象</param>
        </member>
        <member name="M:System.FishCollectionExtension.SafeAdd``1(System.Collections.Generic.HashSet{``0},``0)">
            <summary>
            在HashSet中添加值，并返回是否添加成功
            </summary>
            <typeparam name="T">HashSet的类型</typeparam>
            <param name="hashset">目标HashSet</param>
            <param name="obj">要添加的值</param>
            <returns>true 表示添加成功；false 表示已经存在</returns>
        </member>
        <member name="T:System.FishDateTimeExtension">
            <summary>
            日期时间扩展类
            </summary>
        </member>
        <member name="M:System.FishDateTimeExtension.MakeDateTimeFriendly(System.DateTime)">
            <summary>
            将时间显示转换为更加友好的方式
            </summary>
            <param name="dt">要显示的时间</param>
            <returns>转换的结果</returns>
        </member>
        <member name="M:System.FishDateTimeExtension.MakeDateFriendly(System.DateTime)">
            <summary>
            将时间的天转换为友好的标记
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="F:System.FishDateTimeExtension.JsTicksStartBase">
            <summary>
            获得JS的时间的开始值
            </summary>
        </member>
        <member name="M:System.FishDateTimeExtension.ToJsTicks(System.DateTime)">
            <summary>
            获得 <paramref name="dt" /> 对应的Javascript时间刻度
            </summary>
            <param name="dt">要表示的时间</param>
            <returns>
            类型为 <see cref="T:System.Int64" /> 格式的数值
            </returns>
        </member>
        <member name="M:System.FishDateTimeExtension.ToUnixTicks(System.DateTime)">
            <summary>
            获得 <paramref name="dt"/> 对应的Unix时间戳
            </summary>
            <param name="dt">要计算时间戳的时间</param>
            <returns>对应的时间刻度</returns>
        </member>
        <member name="M:System.FishDateTimeExtension.GetMonthesBetween(System.DateTime,System.DateTime)">
            <summary>
            获得两个日期之间的月数
            </summary>
            <param name="beginDate"></param>
            <param name="endDate"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishDateTimeExtension.GetDaysBetween(System.DateTime,System.DateTime)">
            <summary>
            获得两个日期之间的天数间隔
            </summary>
            <param name="beginDate"></param>
            <param name="endDate"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishDateTimeExtension.GetMonthStart(System.DateTime)">
            <summary>
            返回时间所在月份的第一天
            </summary>
            <param name="dt">当前时间</param>
            <returns>代表当月第一天的 <see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:System.FishDateTimeExtension.GetMonthEnd(System.DateTime)">
            <summary>
            返回时间所在月份的最后一天
            </summary>
            <param name="dt">当前时间</param>
            <returns>代表当月最后一天的 <see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:System.FishDateTimeExtension.TrimToMilliSecond(System.DateTime)">
            <summary>
            将时间精确到毫秒
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishDateTimeExtension.TrimToSecond(System.DateTime)">
            <summary>
            将时间精确到秒
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishDateTimeExtension.TrimToMinute(System.DateTime)">
            <summary>
            将时间精确到分钟
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishDateTimeExtension.TrimToHour(System.DateTime)">
            <summary>
            将时间精确到小时
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishDateTimeExtension.TrimToDay(System.DateTime)">
            <summary>
            将时间精确到天
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishDateTimeExtension.AddHours(System.TimeSpan,System.Int32)">
            <summary>
            将TimeSpan偏移指定的小时
            </summary>
            <param name="timeSpan"></param>
            <param name="hours"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishDateTimeExtension.AddMinutes(System.TimeSpan,System.Int32)">
            <summary>
            将TimeSpan偏移指定的分钟
            </summary>
            <param name="timeSpan"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishDateTimeExtension.AddSeconds(System.TimeSpan,System.Int32)">
            <summary>
            将TimeSpan偏移指定的秒数
            </summary>
            <param name="timeSpan"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishDateTimeExtension.AddDays(System.TimeSpan,System.Int32)">
            <summary>
            将TimeSpan偏移指定的天
            </summary>
            <param name="timeSpan"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishDateTimeExtension.ToFriendlyDisplay(System.TimeSpan)">
            <summary>
            转换Timespan为友好的显示方式
            </summary>
            <param name="ts"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishDateTimeExtension.ToFriendlyDisplayShort(System.TimeSpan)">
            <summary>
            转换Timespan为友好的显示方式
            </summary>
            <param name="ts"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishDateTimeExtension.Sum(System.Collections.Generic.IEnumerable{System.TimeSpan})">
            <summary>
            计算指定的 <see cref="T:System.TimeSpan"/> 序列的和
            </summary>
            <param name="timespans"><see cref="T:System.TimeSpan"/> 序列</param>
            <returns></returns>
        </member>
        <member name="M:System.FishDateTimeExtension.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.TimeSpan}})">
            <summary>
            计算指定的 <see cref="T:System.TimeSpan"/> 序列的和
            </summary>
            <param name="timespans"><see cref="T:System.TimeSpan"/> 序列</param>
            <returns></returns>
        </member>
        <member name="M:System.FishDelegateExtension.HasBound(System.Delegate,System.Delegate)">
            <summary>
            Return true if all the atomic delegates in the multicast delegate handler are bound into the
            publisher, grouped together and in the same order.
            </summary>
            <param name="publisher"></param>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishDelegateExtension.HasBound``1(System.EventHandler{``0},System.EventHandler{``0})">
            <summary>
            Return true if all the atomic delegates in the multicast delegate handler are bound into the
            publisher, grouped together and in the same order.
            </summary>
            <param name="publisher"></param>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishDelegateExtension.HasBound(System.EventHandler,System.EventHandler)">
            <summary>
            Return true if all the atomic delegates in the multicast delegate handler are bound into the
            publisher, grouped together and in the same order.
            </summary>
            <param name="publisher"></param>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="T:System.FishExpressionExtension">
            <summary>
            反射或表达式用的扩展方法
            </summary>
        </member>
        <member name="M:System.FishExpressionExtension.GetExpressionAccessedMemberName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            获得属性访问表达式（MemberExpression）中访问的属性名
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="T:System.FishExtension.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage
            </summary>
            <example><code>
            [CanBeNull] public object Test() { return null; }
            public void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:System.FishExtension.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>
            </summary>
            <example><code>
            [NotNull] public object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:System.FishExtension.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            public void ShowError(string message, params object[] args) { /* do something */ }
            public void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:System.FishExtension.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:System.FishExtension.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>
            </summary>
            <example><code>
            public void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
        </member>
        <member name="T:System.FishExtension.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface
             and this method is used to notify that some property value changed
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               private string _name;
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:System.FishExtension.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
            for method output means that the methos doesn't return normally.<br/>
            <c>canbenull</c> annotation is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
            or use single attribute with rows separated by semicolon.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null, and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:System.FishExtension.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            public class Foo {
              private string str = "my string"; // Warning: Localizable string
            }
            </code></example>
        </member>
        <member name="T:System.FishExtension.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example><code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            class UsesNoEquality {
              public void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code></example>
        </member>
        <member name="T:System.FishExtension.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example><code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute { }
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent { }
            </code></example>
        </member>
        <member name="T:System.FishExtension.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly
            (e.g. via reflection, in external library), so this symbol
            will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="T:System.FishExtension.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper
            to not mark symbols marked with such attributes as unused
            (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:System.FishExtension.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used</summary>
        </member>
        <member name="F:System.FishExtension.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member</summary>
        </member>
        <member name="F:System.FishExtension.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:System.FishExtension.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type</summary>
        </member>
        <member name="T:System.FishExtension.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly
            when marked with <see cref="T:System.FishExtension.MeansImplicitUseAttribute"/>
            or <see cref="T:System.FishExtension.UsedImplicitlyAttribute"/>
            </summary>
        </member>
        <member name="F:System.FishExtension.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used</summary>
        </member>
        <member name="F:System.FishExtension.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used</summary>
        </member>
        <member name="T:System.FishExtension.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used
            </summary>
        </member>
        <member name="T:System.FishExtension.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled
            when the invoked method is on stack. If the parameter is a delegate,
            indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated
            while the method is executed
            </summary>
        </member>
        <member name="T:System.FishExtension.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>
            </summary>
            <example><code>
            [Pure] private int Multiply(int x, int y) { return x * y; }
            public void Foo() {
              const int a = 2, b = 2;
              Multiply(a, b); // Waring: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:System.FishExtension.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder
            within a web project. Path can be relative or absolute,
            starting from web root (~)
            </summary>
        </member>
        <member name="T:System.FishExtension.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:System.FishExtension.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:System.FishExtension.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that
            the parameter is an MVC controller. If applied to a method,
            the MVC controller name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>
            </summary>
        </member>
        <member name="T:System.FishExtension.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(String, String)</c>
            </summary>
        </member>
        <member name="T:System.FishExtension.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(String, Object)</c>
            </summary>
        </member>
        <member name="T:System.FishExtension.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that
            the parameter is an MVC partial view. If applied to a method,
            the MVC partial view name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:System.FishExtension.AspMvcSupressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling all inspections
            for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:System.FishExtension.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:System.FishExtension.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:System.FishExtension.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>
            </summary>
        </member>
        <member name="T:System.FishExtension.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>
            </summary>
        </member>
        <member name="T:System.FishExtension.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name
            </summary>
            <example><code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code></example>
        </member>
        <member name="T:System.FishExtension.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>
            </summary>
        </member>
        <member name="T:System.FishLib.ApplicationRunTimeContext">
            <summary>
            应用程序上下文
            </summary>
        </member>
        <member name="P:System.FishLib.ApplicationRunTimeContext.IsMono">
            <summary>
            获得当前的运行环境是否是Mono
            </summary>
            <value>
              <c>true</c> if this instance is mono; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:System.FishLib.ApplicationRunTimeContext.IsLinux">
            <summary>
            获得当前运行的平台是否是Linux
            </summary>
        </member>
        <member name="M:System.FishLib.ApplicationRunTimeContext.GetProcessMainModule">
            <summary>
            获得当前进程的主模块
            </summary>
            <returns>返回当前进程的主模块（<see cref="T:System.Diagnostics.ProcessModule"/>）</returns>
        </member>
        <member name="M:System.FishLib.ApplicationRunTimeContext.GetProcessMainModulePath">
            <summary>
            获得当前进程主模块的路径
            </summary>
            <returns>返回当前进程的主模块路径（<see cref="T:System.String"/>）</returns>
        </member>
        <member name="M:System.FishLib.ApplicationRunTimeContext.GetProcessMainModuleDirectory">
            <summary>
            获得当前进程主模块所在的目录
            </summary>
            <returns>获得当前进程主模块所在的目录（<see cref="T:System.String"/>）</returns>
        </member>
        <member name="T:System.FishLib.Attributes.SRCategoryAttribute">
            <summary>
            支持资源的类别属性
            </summary>
        </member>
        <member name="M:System.FishLib.Attributes.SRCategoryAttribute.GetLocalizedString(System.String)">
            <summary>
            查阅指定类别的本地化名称。
            </summary>
            <returns>
            类别的本地化名称；如果本地化名称不存在，则为 null。
            </returns>
            <param name="value">要查阅的类别的标识符。</param>
        </member>
        <member name="T:System.FishLib.Attributes.SRDefaultValueAttribute">
            <summary>
            支持使用资源文件进行本地化的默认值属性
            </summary>
        </member>
        <member name="M:System.FishLib.Attributes.SRDefaultValueAttribute.#ctor(System.Type,System.Type,System.String)">
            <summary>
            建立  <see cref="T:System.FishLib.Attributes.SRDefaultValueAttribute"/> 的新实例
            </summary>
            <param name="type"></param>
            <param name="value"></param>
        </member>
        <member name="M:System.FishLib.Attributes.SRDefaultValueAttribute.#ctor(System.Type,System.String)">
            <summary>
            建立  <see cref="T:System.FishLib.Attributes.SRDefaultValueAttribute"/> 的新实例
            </summary>
        </member>
        <member name="T:System.FishLib.Attributes.SRDescriptionAttribute">
            <summary>
            支持使用资源文件进行本地化的描述属性
            </summary>
        </member>
        <member name="P:System.FishLib.Attributes.SRDescriptionAttribute.Description">
            <inheritdoc />
        </member>
        <member name="T:System.FishLib.Attributes.SRDisplayNameAttribute">
            <summary>
            支持使用资源文件进行本地化的显示名称属性
            </summary>
        </member>
        <member name="P:System.FishLib.Attributes.SRDisplayNameAttribute.DisplayName">
            <inheritdoc />
        </member>
        <member name="T:System.FishLib.CollectionUtility">
            <summary>
            集合辅助类
            </summary>
        </member>
        <member name="M:System.FishLib.CollectionUtility.CreateAnymousTypeArray``1(``0,System.Int32)">
            <summary>
            创建匿名类型的数组
            </summary>
            <typeparam name="T">匿名类型</typeparam>
            <param name="typeObj">匿名对象实例</param>
            <param name="length">数组长度</param>
            <returns></returns>
        </member>
        <member name="M:System.FishLib.CollectionUtility.CreateAnymousTypeList``1(``0,System.Int32)">
            <summary>
            创建匿名类型的列表对象
            </summary>
            <typeparam name="T">匿名类型</typeparam>
            <param name="typeObj">匿名对象实例</param>
            <param name="length">初始化容量</param>
            <returns></returns>
        </member>
        <member name="M:System.FishLib.CollectionUtility.CreateAnymousTypeHashSet``1(``0)">
            <summary>
            创建匿名类型的列表对象
            </summary>
            <typeparam name="T">匿名类型</typeparam>
            <param name="typeObj">匿名对象实例</param>
            <returns></returns>
        </member>
        <member name="M:System.FishLib.CollectionUtility.CreateAnymousDictionary``2(``0,``1)">
            <summary>
            根据类型推断的结果创建一个泛型字典
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishLib.CollectionUtility.GetRandomBytesBuffer(System.Int32)">
            <summary>
            获得指定长度的随机数组
            </summary>
            <param name="length">随机字节的长度</param>
            <returns></returns>
        </member>
        <member name="T:System.FishLib.ConsoleHelper">
            <summary>
            控制台辅助类
            </summary>
        </member>
        <member name="P:System.FishLib.ConsoleHelper.UseSynchroizeOut">
            <summary>
            获得或设置是否使用同步输出。当为 <see langword="true" /> 时，每次输出都将会使用加锁输出，两次输出之间不会重叠。
            </summary>
        </member>
        <member name="M:System.FishLib.ConsoleHelper.SetFor(System.ConsoleColor)">
            <summary>
            设置前景色
            </summary>
            <param name="c">颜色</param>
        </member>
        <member name="M:System.FishLib.ConsoleHelper.SetBack(System.ConsoleColor)">
            <summary>
            设置背景色
            </summary>
            <param name="c">颜色</param>
        </member>
        <member name="P:System.FishLib.ConsoleHelper.ShowCursor">
            <summary>
            获得或设置是否显示光标
            </summary>
        </member>
        <member name="M:System.FishLib.ConsoleHelper.ReadKey(System.Boolean)">
            <summary>
            从标准输入流读取一个按键
            </summary>
            <param name="intercept">是否回显；默认不回显</param>
            <returns>按键信息</returns>
        </member>
        <member name="M:System.FishLib.ConsoleHelper.WL">
            <summary>
            WriteLine的简化
            </summary>
        </member>
        <member name="M:System.FishLib.ConsoleHelper.WL(System.String)">
            <summary>
            WriteLine的简化
            </summary>
        </member>
        <member name="M:System.FishLib.ConsoleHelper.WL(System.ConsoleColor,System.Object)">
            <summary>
            WriteLine的简化
            </summary>
        </member>
        <member name="M:System.FishLib.ConsoleHelper.W(System.String)">
            <summary>
            Write的简化
            </summary>
        </member>
        <member name="M:System.FishLib.ConsoleHelper.WL(System.ConsoleColor,System.ConsoleColor,System.Object)">
            <summary>
            以指定的前景色和背景色输出信息
            </summary>
        </member>
        <member name="M:System.FishLib.ConsoleHelper.WL(System.Int32,System.Int32,System.Object)">
            <summary>
            在指定的位置输出信息
            </summary>
        </member>
        <member name="M:System.FishLib.ConsoleHelper.WL(System.Int32,System.Int32,System.ConsoleColor,System.Object)">
            <summary>
            在指定的位置以指定的前景色输出信息
            </summary>
        </member>
        <member name="M:System.FishLib.ConsoleHelper.WL(System.Int32,System.Int32,System.ConsoleColor,System.ConsoleColor,System.Object)">
            <summary>
            在指定的位置以指定的前景色和背景色输出信息
            </summary>
        </member>
        <member name="M:System.FishLib.ConsoleHelper.W(System.ConsoleColor,System.Object)">
            <summary>
            以指定的前景色输出文本
            </summary>
        </member>
        <member name="M:System.FishLib.ConsoleHelper.W(System.ConsoleColor,System.ConsoleColor,System.Object)">
            <summary>
            以指定的前景色和背景色输出文本
            </summary>
        </member>
        <member name="M:System.FishLib.ConsoleHelper.W(System.Int32,System.Int32,System.Object)">
            <summary>
            在指定位置输出文本
            </summary>
        </member>
        <member name="M:System.FishLib.ConsoleHelper.W(System.Int32,System.Int32,System.ConsoleColor,System.Object)">
            <summary>
            在指定的位置以指定的前景色输出信息
            </summary>
        </member>
        <member name="M:System.FishLib.ConsoleHelper.W(System.Int32,System.Int32,System.ConsoleColor,System.ConsoleColor,System.Object)">
            <summary>
            在指定的位置以指定的前景色和背景色输出信息
            </summary>
        </member>
        <member name="M:System.FishLib.ConsoleHelper.SetLoc(System.Int32,System.Int32)">
            <summary>
            设置光标位置
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:System.FishLib.ConsoleHelper.Title(System.String)">
            <summary>
            设置窗口标题
            </summary>
            <param name="title"></param>
        </member>
        <member name="M:System.FishLib.ConsoleHelper.Clear">
            <summary>
            清空屏幕
            </summary>
        </member>
        <member name="M:System.FishLib.ConsoleHelper.ShowProcess(System.Int32,System.Int32,System.Int32,System.ConsoleColor,System.Int32,System.Int32)">
            <summary>
            显示进度条
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="count"></param>
            <param name="color"></param>
            <param name="current"></param>
            <param name="totalCount"></param>
        </member>
        <member name="M:System.FishLib.ConsoleHelper.ShowProcess(System.Int32,System.Int32,System.Int32,System.Char,System.Int32,System.Int32)">
            <summary>
            显示进度条
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="count"></param>
            <param name="ch"></param>
            <param name="current"></param>
            <param name="totalCount"></param>
        </member>
        <member name="M:System.FishLib.ConsoleHelper.SubStringPath(System.String,System.Int32)">
            <summary>
            截取字符串
            </summary>
            <param name="message"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishLib.ConsoleHelper.RL">
            <summary>
            读取一行
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.FishLib.ConsoleHelper.RL(System.String)">
            <summary>
            读取一行
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.FishLib.ConsoleHelper.ReadInt(System.String,System.Int32)">
            <summary>
            读取一行数字
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.FishLib.ConsoleHelper.WFL(System.String,System.Object[])">
            <summary>
            输出格式化的字符串 
            </summary>
            <param name="str"></param>
            <param name="args"></param>
        </member>
        <member name="M:System.FishLib.ConsoleHelper.WF(System.String,System.Object[])">
            <summary>
            输出格式化的字符串 
            </summary>
            <param name="str"></param>
            <param name="args"></param>
            <remarks>
            可用 &lt;[BF]:ColorName&gt;.....&lt;/[BF]&gt; 来设置颜色
            </remarks>
        </member>
        <member name="M:System.FishLib.ConsoleHelper.Backup">
            <summary>
            备份背景色
            </summary>
        </member>
        <member name="M:System.FishLib.ConsoleHelper.Restore">
            <summary>
            恢复颜色配置
            </summary>
        </member>
        <member name="M:System.FishLib.Deferred`1.Reject(System.Exception,`0)">
            <summary>
            标记为任务失败
            </summary>
            <param name="ex">任务的异常</param>
            <param name="result">设置的结果</param>
        </member>
        <member name="M:System.FishLib.Deferred`1.Resolve(`0)">
            <summary>
            标记为已完成
            </summary>
            <param name="result">任务的结果</param>
        </member>
        <member name="M:System.FishLib.Deferred`1.Notify(System.Object)">
            <summary>
            通知进度发生变化
            </summary>
            <param name="progressObject"></param>
        </member>
        <member name="M:System.FishLib.Deferred`1.Promise">
            <summary>
            获得对应的Promise对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:System.FishLib.DeferredEventArgs`1">
            <summary>
            Promise事件参数
            </summary>
        </member>
        <member name="P:System.FishLib.DeferredEventArgs`1.Result">
            <summary>
            获得当前的结果
            </summary>
        </member>
        <member name="P:System.FishLib.DeferredEventArgs`1.Exception">
            <summary>
            获得当前的错误
            </summary>
        </member>
        <member name="M:System.FishLib.DeferredEventArgs`1.#ctor(`0,System.Exception)">
            <summary>
            创建 <see cref="T:System.FishLib.DeferredEventArgs`1" />  的新实例(DeferredEventArgs)
            </summary>
            <param name="result"></param>
            <param name="exception"></param>
        </member>
        <member name="T:System.FishLib.DeferredProgressEventArgs">
            <summary>
            进度事件数据
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:System.FishLib.DeferredProgressEventArgs.ProgressData">
            <summary>
            获得进度标示
            </summary>
        </member>
        <member name="M:System.FishLib.DeferredProgressEventArgs.#ctor(System.Object)">
            <summary>
            创建 <see cref="!:DeferredProgressEventArgs&lt;T&gt;" />  的新实例(DeferredProgressEventArgs)
            </summary>
            <param name="progressData"></param>
        </member>
        <member name="P:System.FishLib.DeferredSource`1.Context">
            <summary>
            获得或设置当前的状态
            </summary>
        </member>
        <member name="P:System.FishLib.DeferredSource`1.Result">
            <summary>
            获得当前的结果
            </summary>
        </member>
        <member name="P:System.FishLib.DeferredSource`1.Exception">
            <summary>
            获得当前的错误
            </summary>
        </member>
        <member name="M:System.FishLib.DeferredSource`1.Done(System.Action{System.Object,System.FishLib.DeferredEventArgs{`0}})">
            <summary>
            注册完成时应该调用的回调
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishLib.DeferredSource`1.Fail(System.Action{System.Object,System.FishLib.DeferredEventArgs{`0}})">
            <summary>
            注册失败时应该调用的回调
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishLib.DeferredSource`1.Progress(System.Action{System.Object,System.FishLib.DeferredProgressEventArgs})">
            <summary>
            注册当进度发生变化时需要进行的回调
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishLib.DeferredSource`1.Always(System.Action{System.Object,System.FishLib.DeferredEventArgs{`0}})">
            <summary>
            注册无论成功或失败都必须执行的回调
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishLib.DeferredSource`1.Reject(System.Exception,`0)">
            <summary>
            标记为任务失败
            </summary>
            <param name="ex">任务的异常</param>
            <param name="result">设置的结果</param>
        </member>
        <member name="M:System.FishLib.DeferredSource`1.Resolve(`0)">
            <summary>
            标记为已完成
            </summary>
            <param name="result">任务的结果</param>
        </member>
        <member name="M:System.FishLib.DeferredSource`1.Notify(System.Object)">
            <summary>
            通知进度变化
            </summary>
            <param name="progressObject"></param>
        </member>
        <member name="M:System.FishLib.DeferredSource`1.OnBeforeStart">
            <summary>
            引发 <see cref="E:System.FishLib.DeferredSource`1.BeforeStart" /> 事件
            </summary>
        </member>
        <member name="M:System.FishLib.DeferredSource`1.OnOperationSuccess(System.FishLib.DeferredEventArgs{`0})">
            <summary>
            引发 <see cref="E:System.FishLib.DeferredSource`1.OperationSuccess" /> 事件
            </summary>
            <param name="ea">包含此事件的参数</param>
        </member>
        <member name="M:System.FishLib.DeferredSource`1.OnOperationFailed(System.FishLib.DeferredEventArgs{`0})">
            <summary>
            引发 <see cref="E:System.FishLib.DeferredSource`1.OperationFailed" /> 事件
            </summary>
            <param name="ea">包含此事件的参数</param>
        </member>
        <member name="M:System.FishLib.DeferredSource`1.OnOperationCompleted(System.FishLib.DeferredEventArgs{`0})">
            <summary>
            引发 <see cref="E:System.FishLib.DeferredSource`1.OperationCompleted" /> 事件
            </summary>
            <param name="ea">包含此事件的参数</param>
        </member>
        <member name="E:System.FishLib.DeferredSource`1.ProgressChanged">
            <summary>
            进度发生变化
            </summary>
        </member>
        <member name="M:System.FishLib.DeferredSource`1.OnProgressChanged(System.FishLib.DeferredProgressEventArgs)">
            <summary>
            引发 <see cref="E:System.FishLib.DeferredSource`1.ProgressChanged" /> 事件
            </summary>
            <param name="ea">包含此事件的参数</param>
        </member>
        <member name="T:System.FishLib.Description">
            <summary>
            描述项目
            </summary>
        </member>
        <member name="P:System.FishLib.Description.DisplayName">
            <summary>
            显示名称
            </summary>
        </member>
        <member name="P:System.FishLib.Description.DescriptionText">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:System.FishLib.Description.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:System.FishLib.Description.Field">
            <summary>
            获得相关联的类型
            </summary>
        </member>
        <member name="M:System.FishLib.Description.#ctor(System.String,System.String,System.Object,System.Reflection.FieldInfo)">
            <summary>
            创建 <see cref="T:System.FishLib.Description" /> 的新实例
            </summary>
        </member>
        <member name="M:System.FishLib.Description.GetValueString">
            <summary>
            获得值的表达式形式
            </summary>
            <returns></returns>
        </member>
        <member name="T:System.FishLib.DescriptionGeneric`1">
            <summary>
            描述项目
            </summary>
        </member>
        <member name="M:System.FishLib.DescriptionGeneric`1.#ctor(System.String,System.String,System.Object,System.Reflection.FieldInfo)">
            <summary>
            创建 <see cref="!:DescriptionGeneric"></see> 的新实例
            </summary>
        </member>
        <member name="P:System.FishLib.DescriptionGeneric`1.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="M:System.FishLib.DescriptionGeneric`1.GetValueString">
            <summary>
            获得值的表达式形式
            </summary>
            <returns></returns>
        </member>
        <member name="T:System.FishLib.Description`1">
            <summary>
            泛型的描述项目
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:System.FishLib.Description`1.#ctor(System.String,System.String,System.Object,System.Reflection.FieldInfo)">
            <summary>
            创建 <see cref="T:System.FishLib.Description"></see> 的新实例
            </summary>
        </member>
        <member name="P:System.FishLib.Description`1.Value">
            <summary>
            获得或设置泛型值
            </summary>
        </member>
        <member name="T:System.FishLib.Diagnostics.CodeTimer">
            <summary>
            简单的代码计时器对象
            </summary>
        </member>
        <member name="M:System.FishLib.Diagnostics.CodeTimer.Run(System.Int32,System.String,System.Action)">
            <summary>
            运行测试
            </summary>
            <param name="iteration">重复次数</param>
            <param name="name">名称</param>
            <param name="predicate">测试函数</param>
            <returns>包含测试结果的<see cref="T:System.FishLib.Diagnostics.CodeTimerResult"/></returns>
        </member>
        <member name="M:System.FishLib.Diagnostics.CodeTimer.RunWithConsoleLog(System.Int32,System.String,System.Action)">
            <summary>
            运行测试，并在当前控制台显示结果
            </summary>
            <param name="iteration">重复次数</param>
            <param name="name">名称</param>
            <param name="predicate">测试函数</param>
            <returns>包含测试结果的<see cref="T:System.FishLib.Diagnostics.CodeTimerResult"/></returns>
        </member>
        <member name="T:System.FishLib.Diagnostics.CodeTimerResult">
            <summary>
            <see cref="T:System.FishLib.Diagnostics.CodeTimer"/> 运行测试的结果
            </summary>
        </member>
        <member name="P:System.FishLib.Diagnostics.CodeTimerResult.IsSupportCycle">
            <summary>
            当前环境是否支持线程计数
            </summary>
        </member>
        <member name="P:System.FishLib.Diagnostics.CodeTimerResult.Title">
            <summary>
            测试名称
            </summary>
        </member>
        <member name="P:System.FishLib.Diagnostics.CodeTimerResult.GCCount">
            <summary>
            GC 计数
            </summary>
        </member>
        <member name="P:System.FishLib.Diagnostics.CodeTimerResult.ThreadCycleCount">
            <summary>
            线程CPU计数
            </summary>
        </member>
        <member name="P:System.FishLib.Diagnostics.CodeTimerResult.CPUTimer">
            <summary>
            线程计数(以100ns为单位)
            </summary>
        </member>
        <member name="P:System.FishLib.Diagnostics.CodeTimerResult.ElapsedTime">
            <summary>
            经过的时间
            </summary>
        </member>
        <member name="M:System.FishLib.Diagnostics.CodeTimerResult.GetSnapshotBefore">
            <summary>
            获得第一个快照
            </summary>
        </member>
        <member name="M:System.FishLib.Diagnostics.CodeTimerResult.GetSnapshotAfter">
            <summary>
            获得第一个快照
            </summary>
        </member>
        <member name="T:System.FishLib.Diagnostics.CodeTimerNativeApi">
            <summary>
            <see cref="T:System.FishLib.Diagnostics.CodeTimer"/> 使用的本地API
            </summary>
        </member>
        <member name="M:System.FishLib.Diagnostics.CodeTimerNativeApi.GetCurrentThreadTimes(System.IntPtr)">
            <summary>
            获得线程本地计数
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.FishLib.Drawing.BrushUtility.FromKnownName(System.Drawing.KnownColor)">
            <summary>
            根据颜色名获得对应的笔刷
            </summary>
            <param name="colorName"></param>
            <returns></returns>
        </member>
        <member name="T:System.FishLib.EnumUtility">
            <summary>
            工具类
            </summary>
        </member>
        <member name="M:System.FishLib.EnumUtility.GetEnumNameKeys``1">
            <summary>
            获得指定枚举的所有值名称
            </summary>
            <returns>所有值的集合</returns>
            <exception cref="T:System.ArgumentNullException">type为null</exception>
        </member>
        <member name="M:System.FishLib.EnumUtility.GetEnumNameKeys(System.Type)">
            <summary>
            获得指定枚举的所有值名称
            </summary>
            <param name="type">指定的类型，可以为枚举或可空枚举</param>
            <returns>所有值名称的集合</returns>
            <exception cref="T:System.ArgumentNullException">type为null</exception>
        </member>
        <member name="M:System.FishLib.EnumUtility.GetEnumDisplayName``1(``0)">
            <summary>
            获得指定枚举值的显示名
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishLib.EnumUtility.GetEnumDisplayNames``1(``0)">
            <summary>
            获得指定枚举值的显示名
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishLib.EnumUtility.ConvertByteString(System.String)">
            <summary>
            将十六进制数组字符串转换为十六进制数组
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishLib.EnumUtility.ConvertFormattedByteString(System.String)">
            <summary>
            将一个已格式化的十六进制数组字符串转换为十六进制数组
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:System.FishLib.GeneralEventArgs`1">
            <summary>
            表示通用的包含事件数据的对象
            </summary>
            <typeparam name="T">数据对象类型</typeparam>
        </member>
        <member name="P:System.FishLib.GeneralEventArgs`1.Data">
            <summary>
            事件数据
            </summary>
        </member>
        <member name="P:System.FishLib.GeneralEventArgs`1.Canceled">
            <summary>
            获得或设置是否已经取消
            </summary>
        </member>
        <member name="M:System.FishLib.GeneralEventArgs`1.#ctor(`0)">
            <summary>
            创建 <see>
                <cref>GeneralEventArgs</cref>
            </see>
                的新实例(GeneralEventArgs)
            </summary>
        </member>
        <member name="T:System.FishLib.GeneralEventArgs`2">
            <summary>
            表示通用的包含事件数据的对象
            </summary>
            <typeparam name="T1">数据对象1类型</typeparam>
            <typeparam name="T2">数据对象2类型</typeparam>
        </member>
        <member name="P:System.FishLib.GeneralEventArgs`2.Data1">
            <summary>
            事件数据1
            </summary>
        </member>
        <member name="P:System.FishLib.GeneralEventArgs`2.Data2">
            <summary>
            事件数据2
            </summary>
        </member>
        <member name="P:System.FishLib.GeneralEventArgs`2.Canceled">
            <summary>
            获得或设置是否已经取消
            </summary>
        </member>
        <member name="M:System.FishLib.GeneralEventArgs`2.#ctor(`0,`1)">
            <summary>
            创建 <see>
                <cref>GeneralEventArgs</cref>
            </see>
                的新实例(GeneralEventArgs)
            </summary>
        </member>
        <member name="T:System.FishLib.GeneralEventArgs`3">
            <summary>
            表示通用的包含事件数据的对象
            </summary>
            <typeparam name="T1">数据对象1类型</typeparam>
            <typeparam name="T2">数据对象2类型</typeparam>
            <typeparam name="T3">数据对象3类型</typeparam>
        </member>
        <member name="P:System.FishLib.GeneralEventArgs`3.Data3">
            <summary>
            事件数据3
            </summary>
        </member>
        <member name="M:System.FishLib.GeneralEventArgs`3.#ctor(`0,`1,`2)">
            <summary>
            创建 <see>
                <cref>GeneralEventArgs</cref>
            </see>
                的新实例(GeneralEventArgs)
            </summary>
        </member>
        <member name="T:System.FishLib.IOUtility">
            <summary>
            文件操作辅助类
            </summary>
            <remarks>
            本辅助操作类的作用是为了简化一些代码，实际上考虑到程序的性能问题时，可能还是由自已来针对
            特定的File Directory FileInfo DirectoryInfo Path Drive DriveInfo来操作可能更好
            </remarks>
        </member>
        <member name="M:System.FishLib.IOUtility.RemoveInvalidPathChars(System.String)">
            <summary>
            移除路径中无效的路径字符
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishLib.IOUtility.RemoveInvalidFileNameChars(System.String)">
            <summary>
            移除文件名中无效字符
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishLib.IOUtility.GetAllFiles(System.String)">
            <summary>
            获得指定目录下的所有文件。此方法将会跳过无法访问的文件夹
            </summary>
            <param name="path">要获得的目录</param>
            <returns>包含文件名的数组</returns>
        </member>
        <member name="M:System.FishLib.IOUtility.GetExtensionWithoutDot(System.String)">
            <summary>
            返回没有前缀符号的扩展名
            </summary>
            <param name="path">路径</param>
            <returns>扩展名</returns>
        </member>
        <member name="M:System.FishLib.IOUtility.WriteAllBytes(System.String,System.Byte[])">
            <summary>
            将数据完全写入文件。当指定路径不存在时，会自动创建
            </summary>
            <param name="path">路径</param>
            <param name="data">数据</param>
        </member>
        <member name="M:System.FishLib.IOUtility.WriteAllText(System.String,System.String)">
            <summary>
            将数据完全写入文件。当指定路径不存在时，会自动创建
            </summary>
            <param name="path">路径</param>
        </member>
        <member name="M:System.FishLib.IOUtility.WriteAllLines(System.String,System.String[])">
            <summary>
            将数据完全写入文件。当指定路径不存在时，会自动创建
            </summary>
            <param name="path">路径</param>
        </member>
        <member name="M:System.FishLib.IOUtility.GetFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            获得指定目录下的文件，并根据指定的过滤规则进行过滤
            </summary>
            <param name="path">要检索的路径</param>
            <param name="searchPattern">过滤规则（正则表达式）</param>
            <param name="option">搜索选项</param>
            <returns><see cref="T:System.Array"/></returns>
        </member>
        <member name="M:System.FishLib.IOUtility.FileIsReadOnly(System.String)">
            <summary>
            文件是否只读
            </summary>
            <param name="fullpath"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishLib.IOUtility.SetFileReadonly(System.String,System.Boolean)">
            <summary>
            设置文件是否只读
            </summary>
            <param name="fullpath"></param>
            <param name="flag">true表示只读，反之</param>
        </member>
        <member name="M:System.FishLib.IOUtility.GetLastWriteTime(System.String)">
            <summary>
            取文件最后存储时间
            </summary>
            <param name="fullpath"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishLib.IOUtility.CalculateDirectorySize(System.IO.DirectoryInfo,System.Boolean)">
            <summary>
            计算一个目录的大小
            </summary>
            <param name="di">指定目录</param>
            <param name="includeSubDir">是否包含子目录</param>
            <returns></returns>
        </member>
        <member name="M:System.FishLib.IOUtility.CopyDirectory(System.IO.DirectoryInfo,System.IO.DirectoryInfo)">
            <summary>
            复制目录到目标目录
            </summary>
            <param name="source">源目录</param>
            <param name="destination">目标目录</param>
        </member>
        <member name="M:System.FishLib.IOUtility.CombinePath(System.String,System.String,System.Boolean)">
            <summary>
            合并两个路径
            </summary>
            <param name="path1">路径1</param>
            <param name="path2">路径2</param>
            <param name="sourcePathIncludeFileName">指定路径1是否带有文件名。如果为true，那么会先将文件名去除（取文件夹）</param>
            <returns>合并的路径</returns>
        </member>
        <member name="M:System.FishLib.IOUtility.GetRelativePath(System.String,System.String)">
            <summary>
            获得相对地址
            </summary>
            <param name="basePath">当前地址</param>
            <param name="secondPath">要转换为相对地址的路径</param>
            <returns>相对地址</returns>
        </member>
        <member name="M:System.FishLib.IOUtility.GetShortDisplayPath(System.String,System.Int32)">
            <summary>
            获得用于显示的短路径
            </summary>
            <param name="src"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishLib.IOUtility.RegFindFile(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            根据正则表达式查找文件
            </summary>
            <param name="path">查找源路径</param>
            <param name="pattern">过滤表达式</param>
            <param name="includeSubDirectory">是否包括子文件夹</param>
            <param name="applyFilerToPath">是否将过滤表达式应用到完整路径</param>
            <returns></returns>
        </member>
        <member name="F:System.FishLib.IOUtility.GetPathOptions.None">
            <summary>
            无标记位
            </summary>
        </member>
        <member name="F:System.FishLib.IOUtility.GetPathOptions.ScanSubDirectory">
            <summary>
            包含子文件夹
            </summary>
        </member>
        <member name="F:System.FishLib.IOUtility.GetPathOptions.IncludeFile">
            <summary>
            包含文件
            </summary>
        </member>
        <member name="F:System.FishLib.IOUtility.GetPathOptions.IncludeDirectory">
            <summary>
            包含文件夹
            </summary>
        </member>
        <member name="F:System.FishLib.IOUtility.GetPathOptions.Default">
            <summary>
            默认值，等效于 IncludeFile | ScanSubDirectory
            </summary>
        </member>
        <member name="M:System.FishLib.IOUtility.GetDirectoryContainsByRelativePath(System.String,System.FishLib.IOUtility.GetPathOptions)">
            <summary>
            获得指定目录下所有文件或文件夹的相对路径
            </summary>
            <param name="path"></param>
            <param name="flags">标记位</param>
            <returns></returns>
        </member>
        <member name="M:System.FishLib.IOUtility.GetDirectoryContainsByRelativePathInternal(System.String,System.String,System.FishLib.IOUtility.GetPathOptions)">
            <summary>
            获得指定目录下所有文件或文件夹的相对路径
            </summary>
            <param name="path"></param>
            <param name="flags">标记位</param>
            <returns></returns>
        </member>
        <member name="T:System.FishLib.LocalizeContext">
            <summary>
            本地化上下文环境
            </summary>
        </member>
        <member name="M:System.FishLib.LocalizeContext.GetAttributeResourceManager(System.Type)">
            <summary>
            获得指定类型的资源管理类
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishLib.LocalizeContext.GetResourceFromResourceManager(System.Type,System.String)">
            <summary>
            从指定的强类型资源类中加载指定的字符串
            </summary>
            <param name="type"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishLib.LocalizeContext.GetResourceStreamFromResourceManager(System.Type,System.String)">
            <summary>
            从指定的强类型资源类中加载指定的字符串
            </summary>
            <param name="type"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:System.FishLib.MemberDescriptorBase">
            <summary>
            类型描述基类
            </summary>
        </member>
        <member name="M:System.FishLib.MemberDescriptorBase.#ctor(System.Reflection.MemberInfo)">
            <summary>
            创建 <see cref="T:System.FishLib.MemberDescriptorBase" /> 的新实例
            </summary>
        </member>
        <member name="P:System.FishLib.MemberDescriptorBase.Member">
            <summary>
            获得或设置包含的基类
            </summary>
        </member>
        <member name="P:System.FishLib.MemberDescriptorBase.Name">
            <summary>
            当前的类名
            </summary>
        </member>
        <member name="P:System.FishLib.MemberDescriptorBase.Attributes">
            <summary>
            获得行为的自定义属性
            </summary>
        </member>
        <member name="M:System.FishLib.MemberDescriptorBase.op_Implicit(System.FishLib.MemberDescriptorBase)~System.Reflection.MemberInfo">
            <summary>
            隐式转换为 <see cref="T:System.Type"/>
            </summary>
            <param name="db">要转换的对象</param>
            <returns>返回 <see cref="T:System.FishLib.MemberDescriptorBase"/> 所表示的 <see cref="T:System.Type"/> 对象</returns>
        </member>
        <member name="M:System.FishLib.MemberDescriptorBase.op_Implicit(System.Reflection.MemberInfo)~System.FishLib.MemberDescriptorBase">
            <summary>
            隐式转换为 <see cref="T:System.FishLib.MemberDescriptorBase"/>
            </summary>
            <param name="type">要转换的对象</param>
            <returns>返回包含着 <see cref="T:System.Type"/> 类型的 <see cref="T:System.FishLib.MemberDescriptorBase"/> 对象</returns>
        </member>
        <member name="M:System.FishLib.MemberDescriptorBase.FindAttributes``1">
            <summary>
            根据类型获得属性
            </summary>
            <typeparam name="T">属性类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:System.FishLib.MemberDescriptorBase.FindAttribute``1">
            <summary>
            根据类型获得属性
            </summary>
            <typeparam name="T">属性类型</typeparam>
            <returns></returns>
        </member>
        <member name="P:System.FishLib.MemberDescriptorBase.Description">
            <summary>
            获得显示的描述
            </summary>
        </member>
        <member name="P:System.FishLib.MemberDescriptorBase.DisplayName">
            <summary>
            获得显示名称
            </summary>
        </member>
        <member name="P:System.FishLib.MemberDescriptorBase.HasAliasName">
            <summary>
            获得或设置当前的名称是否是通过别名获得的
            </summary>
        </member>
        <member name="T:System.FishLib.PropertyChangingEventArgs`1">
            <summary>
            属性正在变化事件类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:System.FishLib.PropertyChangingEventArgs`1.#ctor(`0,`0)">
            <summary>
            初始化 <see cref="T:System.FishLib.PropertyChangingEventArgs`1"/> 类的新实例。
            </summary>
        </member>
        <member name="P:System.FishLib.PropertyChangingEventArgs`1.Original">
            <summary>
            获得原始值
            </summary>
        </member>
        <member name="P:System.FishLib.PropertyChangingEventArgs`1.Current">
            <summary>
            获得或设置当前值
            </summary>
        </member>
        <member name="P:System.FishLib.PropertyChangingEventArgs`1.Cancelled">
            <summary>
            获得或设置是否取消变更
            </summary>
        </member>
        <member name="P:System.FishLib.PropertyChangingEventArgs`1.ThrowOnCancelled">
            <summary>
            获得或设置是否取消变更时抛出异常
            </summary>
        </member>
        <member name="P:System.FishLib.PropertyChangingEventArgs`1.ValidationException">
            <summary>
            获得或设置验证异常
            </summary>
        </member>
        <member name="M:System.FishLib.PropertyChangingEventArgsBuilder.Create``1(``0,``0)">
            <summary>
            创建新的 <see cref="T:System.FishLib.PropertyChangingEventArgs`1"/> 实例
            </summary>
            <typeparam name="T">事件属性的类型</typeparam>
            <param name="original">原始值</param>
            <param name="current">当前值</param>
            <returns></returns>
        </member>
        <member name="M:System.FishLib.PropertyChangingEventArgsBuilder.CreateAndInvoke``1(System.Object,System.EventHandler{System.FishLib.PropertyChangingEventArgs{``0}},``0,``0)">
            <summary>
            创建新的 <see cref="T:System.FishLib.PropertyChangingEventArgs`1"/> 实例
            </summary>
            <typeparam name="T">事件属性的类型</typeparam>
            <param name="handler">事件处理列表</param>
            <param name="original">原始值</param>
            <param name="current">当前值</param>
            <param name="sender">事件的发起方</param>
            <returns></returns>
        </member>
        <member name="T:System.FishLib.Reflection">
            <summary>
            反射辅助类
            </summary>
        </member>
        <member name="M:System.FishLib.Reflection.TryLoadAssemblyFrom(System.String)">
            <summary>
            尝试加载程序集，如果加载失败，则返回NULL
            </summary>
            <param name="filePath">要加载的文件路径</param>
            <returns><see cref="T:System.Reflection.Assembly"/></returns>
        </member>
        <member name="M:System.FishLib.Reflection.BuildDynamicDelegate(System.Reflection.MethodInfo)">
            <summary>
            动态构造委托
            </summary>
            <param name="methodInfo">方法元数据</param>
            <returns>委托</returns>
        </member>
        <member name="M:System.FishLib.Reflection.BuildSetPropertyAction``2(System.Reflection.PropertyInfo)">
            <summary>
            创建赋值委托
            </summary>
            <typeparam name="TInstance"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="propertyInfo"></param>
            <returns></returns>
        </member>
        <member name="T:System.FishLib.StringNaturalComparer">
            <summary>
            提供对字符串的自然排序
            </summary>
        </member>
        <member name="F:System.FishLib.StringNaturalComparer.Current">
            <summary>
            获得当前唯一的静态比较器实例
            </summary>
        </member>
        <member name="M:System.FishLib.StringNaturalComparer.Compare(System.String,System.String)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <returns>
            Value Condition Less than zerox is less than y.Zerox equals y.Greater than zerox is greater than y.
            </returns>
            <param name="y">The second object to compare.</param><param name="x">The first object to compare.</param>
        </member>
        <member name="M:System.FishLib.StringNaturalComparer.GetNumber(System.String,System.Int32@)">
            <summary>
            获得下一个数字
            </summary>
            <param name="str"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishLib.StringNaturalComparer.GetEmbedString(System.String,System.Int32@)">
            <summary>
            获得下一个字符串组
            </summary>
            <param name="str"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:System.FishLib.StringNaturalComparerWin32">
            <summary>
            提供对字符串的自然排序(基于Win32的PINVOKE版本)
            </summary>
        </member>
        <member name="F:System.FishLib.StringNaturalComparerWin32.Current">
            <summary>
            获得当前唯一的静态比较器实例
            </summary>
        </member>
        <member name="M:System.FishLib.StringNaturalComparerWin32.Compare(System.String,System.String)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <returns>
            Value Condition Less than zerox is less than y.Zerox equals y.Greater than zerox is greater than y.
            </returns>
            <param name="y">The second object to compare.</param><param name="x">The first object to compare.</param>
        </member>
        <member name="T:System.FishObjectExtension">
            <summary>
            对象扩展
            </summary>
        </member>
        <member name="M:System.FishObjectExtension.ToBytes(System.Drawing.Image)">
            <summary>
            将图像转换为字节格式
            </summary>
            <param name="image">要转换的图像</param>
            <returns>转换后的字节数组</returns>
        </member>
        <member name="M:System.FishObjectExtension.ToBytes(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
            <summary>
            将图像转换为字节格式
            </summary>
            <param name="image">要转换的图像</param>
            <returns>转换后的字节数组</returns>
        </member>
        <member name="M:System.FishObjectExtension.SaveAsJpeg(System.Drawing.Image,System.String)">
            <summary>
            使用质量90将图片保存到指定位置为JPEG图片
            </summary>
            <param name="image">要保存的图片</param>
            <param name="path">保存的路径</param>
        </member>
        <member name="M:System.FishObjectExtension.SaveAsJpeg(System.Drawing.Image,System.String,System.Int32)">
            <summary>
            使用指定的图片质量将图片保存到指定位置为JPEG图片
            </summary>
            <param name="image">要保存的图片</param>
            <param name="path">保存的路径</param>
            <param name="quality">质量</param>
        </member>
        <member name="M:System.FishObjectExtension.ResizeWithMargin(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            由原始的小图创建一个居中的大图
            </summary>
            <param name="image">原始图像</param>
            <param name="width">新图像的宽度</param>
            <param name="height">新图像的高度</param>
            <returns><see cref="T:System.Drawing.Image"/></returns>
        </member>
        <member name="M:System.FishObjectExtension.ToWebRgbColor(System.Drawing.Color,System.Boolean)">
            <summary>
            获得颜色的WEB RGB表示形式（如#000000）
            </summary>
            <param name="color">颜色</param>
            <param name="upperCase">是否使用大写。默认为 <see langword="true" /></param>
            <returns>对应的 <see langword="string" /></returns>
        </member>
        <member name="M:System.FishObjectExtension.ToWebRgbaColor(System.Drawing.Color)">
            <summary>
            获得颜色的WEB RGB表示形式（如 rgba(255,255,255,1)）
            </summary>
            <param name="color">颜色</param>
            <returns>对应的 <see langword="string" /></returns>
        </member>
        <member name="M:System.FishObjectExtension.GetFilteredTypeWithCustomerAttribute``1(System.Reflection.Assembly)">
            <summary>
            根据指定的自定义属性来过滤类型列表
            </summary>
            <typeparam name="T">要查找的自定义属性类型</typeparam>
            <param name="assembly">程序集</param>
            <returns>查找到的结果</returns>
        </member>
        <member name="M:System.FishObjectExtension.GetFilteredMethodWithCustomerAttribute``1(System.Type)">
            <summary>
            根据指定的自定义属性来过滤方法列表
            </summary>
            <typeparam name="T">要查找的自定义属性类型</typeparam>
            <param name="type">程序集</param>
            <returns>查找到的结果</returns>
        </member>
        <member name="M:System.FishObjectExtension.GetFilteredMethodWithCustomerAttribute``1(System.Type,System.Reflection.BindingFlags)">
            <summary>
            根据指定的自定义属性来过滤方法列表
            </summary>
            <typeparam name="T">要查找的自定义属性类型</typeparam>
            <param name="flags">查找的标志位</param>
            <param name="type">程序集</param>
            <returns>查找到的结果</returns>
        </member>
        <member name="M:System.FishObjectExtension.GetFilteredPropertyWithCustomerAttribute``1(System.Type)">
            <summary>
            根据指定的自定义属性来过滤属性列表
            </summary>
            <typeparam name="T">要查找的自定义属性类型</typeparam>
            <param name="type">程序集</param>
            <returns>查找到的结果</returns>
        </member>
        <member name="M:System.FishObjectExtension.GetFilteredPropertyWithCustomerAttribute``1(System.Type,System.Reflection.BindingFlags)">
            <summary>
            根据指定的自定义属性来过滤属性列表
            </summary>
            <typeparam name="T">要查找的自定义属性类型</typeparam>
            <param name="type">程序集</param>
            <param name="flags">查找的标志位</param>
            <returns>查找到的结果</returns>
        </member>
        <member name="M:System.FishObjectExtension.GetLocation(System.Reflection.Assembly)">
            <summary>
            获得程序集所在的目录
            </summary>
            <param name="assembly">程序集</param>
            <returns>指定程序集所在的位置目录</returns>
        </member>
        <member name="M:System.FishObjectExtension.GetVersion(System.Reflection.Assembly)">
            <summary>
            获得程序集版本信息
            </summary>
            <param name="assembly">程序集</param>
            <returns>指定程序集的版本</returns>
        </member>
        <member name="M:System.FishObjectExtension.GetFileVersionInfo(System.Reflection.Assembly)">
            <summary>
            获得程序集的文件信息
            </summary>
            <param name="assembly">程序集</param>
            <returns><see cref="T:System.Diagnostics.FileVersionInfo"/></returns>
        </member>
        <member name="M:System.FishObjectExtension.FilterType``1(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            对类型列表进行过滤。
            </summary>
            <typeparam name="T">过滤的类型，可以根据基类、接口或自定义属性进行过滤</typeparam>
            <param name="typeList">要过滤的类型列表</param>
            <param name="imp">对应的类型</param>
            <returns>过滤后的类型列表</returns>
        </member>
        <member name="M:System.FishObjectExtension.FilterType``1(System.Collections.Generic.IEnumerable{System.Type},System.Boolean)">
            <summary>
            对类型列表进行过滤。
            </summary>
            <typeparam name="T">过滤的类型，可以根据基类、接口或自定义属性进行过滤</typeparam>
            <param name="typeList">要过滤的类型列表</param>
            <param name="imp">对应的类型</param>
            <param name="ignoreAttribute">是否忽略自定义属性；如果为 true，则传入自定义属性时，不会按照自定义属性过滤</param>
            <returns>过滤后的类型列表</returns>
        </member>
        <member name="M:System.FishObjectExtension.GetTypeFullNameWithAssembly(System.Type)">
            <summary>
            获得类的完整名称（含程序集名称）
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishObjectExtension.GetCustomerAttributes``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
            获得自定义属性
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="type">自定义属性类型</param>
            <param name="inherit">是否继承</param>
            <returns></returns>
        </member>
        <member name="M:System.FishObjectExtension.GetCustomerAttributes``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
            获得自定义属性
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="type">自定义属性类型</param>
            <returns></returns>
        </member>
        <member name="M:System.FishObjectExtension.IsDebugAssembly(System.Reflection.Assembly)">
            <summary>
            获得程序集是否是调试版本编译的
            </summary>
            <param name="assembly">程序集</param>
            <returns>如果是调试版本，返回 true；否则返回false。</returns>
        </member>
        <member name="M:System.FishObjectExtension.FormatValue``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.Object}[])">
            <summary>
            将对象选择为字符串并进行格式化
            </summary>
            <typeparam name="T">来源类型</typeparam>
            <param name="source">来源</param>
            <param name="format">格式化字符串</param>
            <param name="selector">要填充的参数列</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="M:System.FishObjectExtension.SelectValue``2(``0,System.Func{``0,``1})">
            <summary>
            根据对象选择值，如果为空，则返回默认值
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <typeparam name="R">结果类型</typeparam>
            <param name="obj">对象</param>
            <param name="selector">选择器</param>
            <returns><typeparamref name="R"/></returns>
        </member>
        <member name="M:System.FishObjectExtension.SelectValue``2(``0,System.Func{``0,``1},``1)">
            <summary>
            根据对象选择值，如果为空，则返回默认值
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <typeparam name="R">结果类型</typeparam>
            <param name="obj">对象</param>
            <param name="selector">选择器</param>
            <param name="defaultValue">返回的默认值</param>
            <returns><typeparamref name="R"/></returns>
        </member>
        <member name="M:System.FishObjectExtension.SelectValue``1(``0,System.Func{``0,System.String})">
            <summary>
            根据对象选择值，如果为空，则返回默认值
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="obj">对象</param>
            <param name="selector">选择器</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:System.FishObjectExtension.SelectValue``1(``0,System.Func{``0,System.String},System.String)">
            <summary>
            根据对象选择值，如果为空，则返回默认值
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="obj">对象</param>
            <param name="selector">选择器</param>
            <param name="defaultValue">返回的默认值</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:System.FishObjectExtension.SelectValue``1(``0,System.Func{``0,System.DateTime})">
            <summary>
            根据对象选择值，如果为空，则返回默认值
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="obj">对象</param>
            <param name="selector">选择器</param>
            <returns><see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:System.FishObjectExtension.SelectValue``1(``0,System.Func{``0,System.DateTime},System.DateTime)">
            <summary>
            根据对象选择值，如果为空，则返回默认值
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="obj">对象</param>
            <param name="selector">选择器</param>
            <param name="defaultValue">返回的默认值</param>
            <returns><see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:System.FishObjectExtension.SelectValue``1(``0,System.Func{``0,System.Int32})">
            <summary>
            根据对象选择值，如果为空，则返回默认值
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="obj">对象</param>
            <param name="selector">选择器</param>
            <returns><see cref="T:System.Int32"/></returns>
        </member>
        <member name="M:System.FishObjectExtension.SelectValue``1(``0,System.Func{``0,System.Int32},System.Int32)">
            <summary>
            根据对象选择值，如果为空，则返回默认值
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="obj">对象</param>
            <param name="selector">选择器</param>
            <param name="defaultValue">返回的默认值</param>
            <returns><see cref="T:System.Int32"/></returns>
        </member>
        <member name="M:System.FishObjectExtension.JoinAsString``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            将对象序列连接为字符串
            </summary>
            <typeparam name="T">序列类型</typeparam>
            <param name="src">源序列</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:System.FishObjectExtension.JoinAsString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            将对象序列连接为字符串
            </summary>
            <typeparam name="T">序列类型</typeparam>
            <param name="src">源序列</param>
            <param name="seperator">分隔符</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:System.FishObjectExtension.GetGroupValue(System.Text.RegularExpressions.Match,System.Int32)">
            <summary>
            获得一个匹配结果中指定分组的值
            </summary>
            <param name="match">匹配结果</param>
            <param name="index">指定的索引</param>
            <returns>对应分组的值；如果不成功或索引不对，则返回null</returns>
        </member>
        <member name="M:System.FishObjectExtension.UnionWith``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            对两个序列进行合并。如果其中一个是null，则返回另一个
            </summary>
            <typeparam name="T">序列类型</typeparam>
            <param name="source">源序列</param>
            <param name="second">要合并的序列</param>
            <returns>合并后的序列</returns>
        </member>
        <member name="M:System.FishObjectExtension.PagedExecute``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Action{System.Int32,System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            对可遍历数据源进行分页操作
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="source">源</param>
            <param name="pagesize">每页尺寸</param>
            <param name="executor">执行器</param>
        </member>
        <member name="M:System.FishObjectExtension.PopulateTree``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``1},System.Func{``0,System.Collections.Generic.IList{``0}},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            将指定的序列生成为树状结构
            </summary>
            <typeparam name="T">树类型</typeparam>
            <typeparam name="TKey">上级键值类型</typeparam>
            <param name="src">原始序列</param>
            <param name="parentSelector">上级键选择器</param>
            <param name="childrenSelector">下级集合选择器</param>
            <returns>顶级节点</returns>
        </member>
        <member name="M:System.FishObjectExtension.GetFileName(System.Uri)">
            <summary>
            获得指定地址中的文件名
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishObjectExtension.GetTopLevelHost(System.Uri)">
            <summary>
            获得一个域名空间的顶级主机地址
            </summary>
            <param name="uri">完整域名</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:System.FishObjectExtension.ReadUInt16(System.IO.Stream)">
            <summary>
            从流中读入一个 <see cref="T:System.Int16"/>
            </summary>
            <param name="stream">要读取的流</param>
            <returns>读取的 <see cref="T:System.Int16"/></returns>
        </member>
        <member name="M:System.FishObjectExtension.ReadUInt32(System.IO.Stream)">
            <summary>
            从流中读入一个 <see cref="T:System.Int32"/>
            </summary>
            <param name="stream">要读取的流</param>
            <returns>读取的 <see cref="T:System.Int32"/></returns>
        </member>
        <member name="M:System.FishObjectExtension.ReadUInt64(System.IO.Stream)">
            <summary>
            从流中读入一个 <see cref="T:System.Int64"/>
            </summary>
            <param name="stream">要读取的流</param>
            <returns>读取的 <see cref="T:System.Int64"/></returns>
        </member>
        <member name="M:System.FishObjectExtension.ReadInt16(System.IO.Stream)">
            <summary>
            从流中读入一个 <see cref="T:System.Int16"/>
            </summary>
            <param name="stream">要读取的流</param>
            <returns>读取的 <see cref="T:System.Int16"/></returns>
        </member>
        <member name="M:System.FishObjectExtension.ReadInt32(System.IO.Stream)">
            <summary>
            从流中读入一个 <see cref="T:System.Int32"/>
            </summary>
            <param name="stream">要读取的流</param>
            <returns>读取的 <see cref="T:System.Int32"/></returns>
        </member>
        <member name="M:System.FishObjectExtension.ReadInt64(System.IO.Stream)">
            <summary>
            从流中读入一个 <see cref="T:System.Int64"/>
            </summary>
            <param name="stream">要读取的流</param>
            <returns>读取的 <see cref="T:System.Int64"/></returns>
        </member>
        <member name="M:System.FishObjectExtension.ReadDouble(System.IO.Stream)">
            <summary>
            从流中读入一个 <see cref="T:System.Int64"/>
            </summary>
            <param name="stream">要读取的流</param>
            <returns>读取的 <see cref="T:System.Int64"/></returns>
        </member>
        <member name="M:System.FishObjectExtension.ReadBuffer(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            从流中读入一个缓冲数组
            </summary>
            <param name="stream">要读取的流</param>
            <param name="length">读取的字节长度</param>
            <param name="lengthRequired">是否要求指定的字节数，如果读取不到，则抛出异常</param>
            <returns>缓冲数组</returns>
        </member>
        <member name="M:System.FishObjectExtension.ReadBuffer(System.IO.Stream,System.Int32,System.Int32@)">
            <summary>
            从流中读入一个缓冲数组
            </summary>
            <param name="stream">要读取的流</param>
            <param name="length">读取的字节长度</param>
            <param name="readedBytesCount">返回已经读取到的长度</param>
            <returns>缓冲数组</returns>
        </member>
        <member name="M:System.FishObjectExtension.FillBuffer(System.IO.Stream,System.Byte[])">
            <summary>
            从流中读入一个缓冲数组
            </summary>
            <param name="stream">要读取的流</param>
            <param name="buffer">缓冲数组</param>
            <returns>缓冲数组</returns>
        </member>
        <member name="M:System.FishObjectExtension.ReadToEnd(System.IO.Stream,System.Int32)">
            <summary>
            读取所有的数据到内存流中
            </summary>
            <param name="stream">要读取的流</param>
            <param name="readBufferSize">读取的缓冲区长度，默认为 4KB</param>
            <returns>包含所有数据的 <see cref="T:System.IO.MemoryStream"/> </returns>
        </member>
        <member name="M:System.FishObjectExtension.Zip(System.IO.Stream)">
            <summary>
            压缩原始流
            </summary>
            <param name="stream">要写入的目标流</param>
            <returns>供写入的压缩流</returns>
        </member>
        <member name="M:System.FishObjectExtension.UnZip(System.IO.Stream)">
            <summary>
            解压缩原始流
            </summary>
            <param name="stream">供读取的压缩流</param>
            <returns>供读取的解压缩流</returns>
        </member>
        <member name="M:System.FishObjectExtension.GetPositionString(System.IO.Stream)">
            <summary>
            获得当前流位置的显示字符串格式
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishObjectExtension.Write``1(``0,System.Byte[])">
            <summary>
            将指定的缓冲数组全部写入流中
            </summary>
            <param name="stream">目标流</param>
            <param name="buffer">缓冲数组</param>
        </member>
        <member name="M:System.FishObjectExtension.Write``1(``0,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            将指定的缓冲数组全部写入流中
            </summary>
            <param name="stream">目标流</param>
            <param name="buffer">缓冲数组</param>
        </member>
        <member name="M:System.FishObjectExtension.Write``1(``0,System.Int32)">
            <summary>
            将目标值写入流中
            </summary>
            <param name="stream">当前流</param>
            <param name="value">值</param>
        </member>
        <member name="M:System.FishObjectExtension.Write``1(``0,System.UInt32)">
            <summary>
            将目标值写入流中
            </summary>
            <param name="stream">当前流</param>
            <param name="value">值</param>
        </member>
        <member name="M:System.FishObjectExtension.Write``1(``0,System.Int16)">
            <summary>
            将目标值写入流中
            </summary>
            <param name="stream">当前流</param>
            <param name="value">值</param>
        </member>
        <member name="M:System.FishObjectExtension.Write``1(``0,System.UInt16)">
            <summary>
            将目标值写入流中
            </summary>
            <param name="stream">当前流</param>
            <param name="value">值</param>
        </member>
        <member name="M:System.FishObjectExtension.Write``1(``0,System.Int64)">
            <summary>
            将目标值写入流中
            </summary>
            <param name="stream">当前流</param>
            <param name="value">值</param>
        </member>
        <member name="M:System.FishObjectExtension.Write``1(``0,System.UInt64)">
            <summary>
            将目标值写入流中
            </summary>
            <param name="stream">当前流</param>
            <param name="value">值</param>
        </member>
        <member name="M:System.FishObjectExtension.ExecuteIf``1(``0,System.Func{``0,System.Boolean},System.Action{``0})">
            <summary>
            对指定的数据进行条件判断，如果符合要求则执行
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="value">值</param>
            <param name="eval">表达式</param>
            <param name="action">执行方法</param>
        </member>
        <member name="M:System.FishObjectExtension.ExecuteIfPositive(System.Int32,System.Action{System.Int32})">
            <summary>
            对指定的数据进行条件判断，如果大于0则执行
            </summary>
            <param name="value">值</param>
            <param name="action">执行方法</param>
        </member>
        <member name="M:System.FishObjectExtension.ExecuteIfNotEmpty(System.String,System.Action{System.String})">
            <summary>
            对指定的数据进行条件判断，如果不为空字符串则执行
            </summary>
            <param name="value">值</param>
            <param name="action">执行方法</param>
        </member>
        <member name="M:System.FishObjectExtension.ExecuteIfNotEmpty``1(``0,System.Action{``0})">
            <summary>
            对指定的数据进行条件判断，如果不为null则执行
            </summary>
            <param name="value">值</param>
            <param name="action">执行方法</param>
        </member>
        <member name="M:System.FishObjectExtension.ExecuteIfNotEmpty``1(System.Collections.Generic.IEnumerable{``0},System.Action{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            对指定的数据进行条件判断，如果不为空序列则执行
            </summary>
            <param name="value">值</param>
            <param name="action">执行方法</param>
        </member>
        <member name="M:System.FishObjectExtension.LockExecute(System.Object,System.Func{System.Boolean},System.Action)">
            <summary>
            双重加锁执行
            </summary>
            <param name="obj">当前锁对象</param>
            <param name="condition">条件，返回false则不执行</param>
            <param name="action">执行的操作</param>
        </member>
        <member name="M:System.FishObjectExtension.IsNumericType(System.Object)">
            <summary>
            True if object is value type.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:System.FishStringExtension">
            <summary>
            包含了与字符串相关的一些常用扩展方法
            </summary>
        </member>
        <member name="M:System.FishStringExtension.ToHexByte(System.Char)">
            <summary>
            转换为BYTE
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishStringExtension.IsNullOrEmpty(System.String)">
            <summary>
            判断当前字符串是否为空或长度为零
            </summary>
            <param name="str">字符串</param>
            <returns>true为空或长度为零</returns>
        </member>
        <member name="M:System.FishStringExtension.ToLines(System.String)">
            <summary>
            将字符串分割成行数组
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishStringExtension.TemplateTagReplace(System.String,System.String[],System.String[])">
            <summary>
            替换模板字符
            </summary>
            <param name="template">模板内容</param>
            <param name="tags">标签数组</param>
            <param name="dest">内容数组</param>
            <returns>替换后的结果</returns>
        </member>
        <member name="M:System.FishStringExtension.EncodeToJsExpression(System.String)">
            <summary>
            将字符串转义为表达式
            </summary>
            <param name="value">要转换的字符串</param>
            <returns>转义后的结果</returns>
        </member>
        <member name="M:System.FishStringExtension.DecodeFromJsExpression(System.String)">
            <summary>
            将字符串从JS的转义中转换
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishStringExtension.DefaultForEmpty(System.String,System.String)">
            <summary>
            为字符串设定默认值
            </summary>
            <param name="value">要设置的值</param>
            <param name="defaultValue">如果要设定的值为空，则返回此默认值</param>
            <returns>设定后的结果</returns>
        </member>
        <member name="M:System.FishStringExtension.FormatWith(System.String,System.Object[])">
            <summary>
            使用指定参数来对当前字符串进行格式化
            </summary>
            <param name="value">The value.</param>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:System.FishStringExtension.IsEmail(System.String)">
            <summary>
            判断一个字符串是否是邮件地址
            </summary>
            <param name="value">地址</param>
            <returns>如果是，则返回 true</returns>
        </member>
        <member name="M:System.FishStringExtension.IsIgnoreCaseEqualTo(System.String,System.String)">
            <summary>
            比较两个字符串在忽略大小写的情况下是否相等
            </summary>
            <param name="value">字符串1</param>
            <param name="compareTo">要比较的字符串</param>
            <returns>是否相等</returns>
        </member>
        <member name="M:System.FishStringExtension.GetSubString(System.String,System.Int32)">
            <summary>
            按照字节截取字符串
            </summary>
            <param name="value">字符串</param>
            <param name="byteLength">字节长度，一个汉字两个字节</param>
            <returns>截取后的字符串</returns>
            <exception cref="T:System.ArgumentException">指定了截取后的省略字符串，但要截取的字符串过短，不足以容纳省略字符串</exception>
        </member>
        <member name="M:System.FishStringExtension.GetSubString(System.String,System.Int32,System.String)">
            <summary>
            按照字节截取字符串
            </summary>
            <param name="value">字符串</param>
            <param name="byteLength">字节长度，一个汉字两个字节</param>
            <param name="tailString">如果截取了，那么省略字符串</param>
            <returns>截取后的字符串</returns>
            <exception cref="T:System.ArgumentException">指定了截取后的省略字符串，但要截取的字符串过短，不足以容纳省略字符串</exception>
        </member>
        <member name="M:System.FishStringExtension.EnsureEndWith(System.String,System.String)">
            <summary>
            确认字符串是以指定字符串结尾的
            </summary>
            <param name="value">字符串</param>
            <param name="ending">结尾</param>
            <returns></returns>
        </member>
        <member name="M:System.FishStringExtension.GetByteCount(System.String)">
            <summary>
            获得指定字符串的字节长度
            </summary>
            <param name="value">值</param>
            <returns><see cref="T:System.Int32"/></returns>
        </member>
        <member name="M:System.FishStringExtension.GetByteCount(System.String,System.Text.Encoding)">
            <summary>
            获得指定字符串的字节长度
            </summary>
            <param name="value">值</param>
            <param name="encoding">编码</param>
            <returns><see cref="T:System.Int32"/></returns>
        </member>
        <member name="M:System.FishStringExtension.ToBytes(System.String)">
            <summary>
            转换为字节数组
            </summary>
            <param name="value">字符串值</param>
            <returns>结果字节数组</returns>
        </member>
        <member name="M:System.FishStringExtension.ToBytes(System.String,System.Text.Encoding)">
            <summary>
            转换为字节数组
            </summary>
            <param name="value">字符串值</param>
            <param name="encoding">使用的编码</param>
            <returns>结果字节数组</returns>
        </member>
        <member name="M:System.FishStringExtension.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            返回指定的字符串中是否包含另外一个子字符串
            </summary>
            <param name="str">字符串</param>
            <param name="key">关键字</param>
            <param name="comparison">比较方式</param>
            <returns>包含为true， 否则为false</returns>
        </member>
        <member name="M:System.FishStringExtension.SplitByTag(System.String,System.String,System.String,System.Int32)">
            <summary>
            按照标签分割并枚举
            </summary>
            <param name="text">文本</param>
            <param name="startTag">开始标签</param>
            <param name="endTag">结束标签</param>
            <param name="startPos">开始位置。默认为0</param>
            <returns>符合要求的代码片段</returns>
        </member>
        <member name="M:System.FishStringExtension.RegMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            对字符串进行正则表达式匹配，并返回所有匹配的字符串数组
            </summary>
            <param name="text">字符串</param>
            <param name="pattern">正则表达式模式</param>
            <param name="options">选项</param>
            <returns>如果匹配失败，则返回false</returns>
        </member>
        <member name="M:System.FishStringExtension.RegMatches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            对字符串进行正则表达式匹配，并返回所有匹配的字符串数组
            </summary>
            <param name="text">字符串</param>
            <param name="pattern">正则表达式模式</param>
            <param name="options">选项</param>
            <returns>如果匹配失败，则返回false</returns>
        </member>
        <member name="M:System.FishStringExtension.SearchStringTag(System.String,System.String,System.String,System.Int32,System.Boolean,System.StringComparison)">
            <summary>
            在字符串中搜索指定的特征字符串并截取其中的一段。
            </summary>
            <param name="text">源字符串</param>
            <param name="beginTag">开始特征字符串</param>
            <param name="includeTag">是否包含标签本身，默认为 <see langword="true" /></param>
            <param name="endTag">结束特征字符串</param>
            <param name="beginIndex">开始索引</param>
            <param name="comparison">比较类型</param>
            <returns></returns>
        </member>
        <member name="M:System.FishStringExtension.SearchStringTag(System.String,System.String,System.String,System.Int32@,System.Boolean,System.StringComparison)">
            <summary>
            在字符串中搜索指定的特征字符串并截取其中的一段。
            </summary>
            <param name="text">源字符串</param>
            <param name="beginTag">开始特征字符串</param>
            <param name="endTag">结束特征字符串</param>
            <param name="beginIndex">开始索引。当搜索完成后，将会指向匹配结束后的下一个位置</param>
            <param name="includeTag">是否包含标签本身，默认为 <see langword="true" /></param>
            <param name="comparison">比较类型</param>
            <returns></returns>
        </member>
        <member name="M:System.FishStringExtension.MD5(System.String)">
            <summary>
            计算指定字符串的MD5值
            </summary>
            <param name="key">要计算Hash的字符串</param>
            <returns>字符串的Hash</returns>
        </member>
        <member name="M:System.FishStringExtension.MD5(System.String,System.String)">
            <summary>
            计算指定字符串的MD5值
            </summary>
            <param name="key">要计算Hash的字符串</param>
            <param name="encoding">计算Hash的编码方法</param>
            <returns>字符串的Hash</returns>
        </member>
        <member name="M:System.FishStringExtension.MD5(System.String,System.Text.Encoding)">
            <summary>
            计算指定字符串的MD5值
            </summary>
            <param name="key">要计算Hash的字符串</param>
            <param name="encoding">计算Hash的编码方法</param>
            <returns>字符串的Hash</returns>
        </member>
        <member name="M:System.FishStringExtension.SHA1(System.String)">
            <summary>
            计算指定字符串的SHA1值
            </summary>
            <param name="key">要计算Hash的字符串</param>
            <returns>字符串的Hash</returns>
        </member>
        <member name="M:System.FishStringExtension.SHA1(System.String,System.String)">
            <summary>
            计算指定字符串的SHA1值
            </summary>
            <param name="key">要计算Hash的字符串</param>
            <param name="encoding">计算Hash的编码方法</param>
            <returns>字符串的Hash</returns>
        </member>
        <member name="M:System.FishStringExtension.SHA1(System.String,System.Text.Encoding)">
            <summary>
            计算指定字符串的SHA1值
            </summary>
            <param name="key">要计算Hash的字符串</param>
            <param name="encoding">计算Hash的编码方法</param>
            <returns>字符串的Hash</returns>
        </member>
        <member name="M:System.FishStringExtension.ToInt32(System.String,System.Int32,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            将字符串转换为Int值，如果转换失败，则返回0
            </summary>
            <param name="value">字符串</param>
            <param name="defaultValue">如果转换失败,则返回的默认值</param>
            <returns>转换后的 <see cref="T:System.Int32"/></returns>
        </member>
        <member name="M:System.FishStringExtension.ToInt32Nullable(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            将字符串转换为Int值，如果转换失败，则返回null
            </summary>
            <param name="value">字符串</param>
            <returns>转换后的 <see cref="T:System.Int32"/></returns>
        </member>
        <member name="M:System.FishStringExtension.SplitAsIntArray(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            将字符串分割为整数数组
            </summary>
            <param name="value">要分割的字符串</param>
            <returns>返回最终的 <see cref="T:System.Int32"/>数组</returns>
        </member>
        <member name="M:System.FishStringExtension.ToInt64(System.String,System.Int64,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            将字符串转换为Int值
            </summary>
            <param name="value">字符串</param>
            <param name="defaultValue">如果转换失败,则返回的默认值</param>
            <returns>转换后的 <see cref="T:System.Int64"/></returns>
        </member>
        <member name="M:System.FishStringExtension.ToInt64Nullable(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            将字符串转换为Int值
            </summary>
            <param name="value">字符串</param>
            <returns>转换后的 <see cref="T:System.Int64"/></returns>
        </member>
        <member name="M:System.FishStringExtension.ToSingle(System.String,System.Single,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            转换字符串为浮点数.如果转换失败,则返回指定的默认值
            </summary>
            <param name="value">要转换的字符串</param>
            <param name="defaultValue">如果转换失败,则返回的默认值</param>
            <returns>转换后的 <see cref="T:System.Single"/></returns>
        </member>
        <member name="M:System.FishStringExtension.ToSingleNullable(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            转换字符串为浮点数.如果转换失败,则返回null
            </summary>
            <param name="value">要转换的字符串</param>
            <returns>转换后的 <see cref="T:System.Single"/></returns>
        </member>
        <member name="M:System.FishStringExtension.ToDateTime(System.String,System.DateTime,System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <summary>
            转换字符串为日期时间.如果转换失败,则返回指定的默认值
            </summary>
            <param name="value">要转换的字符串</param>
            <param name="defaultValue">如果转换失败,则返回的默认值</param>
            <param name="formatProvider">格式</param>
            <param name="styles"></param>
            <returns>
            转换后的 <see cref="T:System.DateTime"/>
            </returns>
        </member>
        <member name="M:System.FishStringExtension.ToDateTimeExact(System.String,System.DateTime,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <summary>
            转换字符串为日期时间.如果转换失败,则返回指定的默认值
            </summary>
            <param name="value">要转换的字符串</param>
            <param name="defaultValue">如果转换失败,则返回的默认值</param>
            <returns>转换后的 <see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:System.FishStringExtension.ToDateTimeExact(System.String,System.DateTime,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <summary>
            转换字符串为日期时间.如果转换失败,则返回指定的默认值
            </summary>
            <param name="value">要转换的字符串</param>
            <param name="defaultValue">如果转换失败,则返回的默认值</param>
            <returns>转换后的 <see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:System.FishStringExtension.ToDateTime(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <summary>
            转换字符串为日期时间.如果转换失败,则返回指定的默认值
            </summary>
            <param name="value">要转换的字符串</param>
            <returns>转换后的 <see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:System.FishStringExtension.ToDateTimeExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <summary>
            转换字符串为日期时间.如果转换失败,则返回指定的默认值
            </summary>
            <param name="value">要转换的字符串</param>
            <returns>转换后的 <see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:System.FishStringExtension.ToDateTimeExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <summary>
            转换字符串为日期时间.如果转换失败,则返回 <see cref="F:System.DataTime.MinValue"/>
            </summary>
            <param name="value">要转换的字符串</param>
            <returns>转换后的 <see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:System.FishStringExtension.ToDateTimeNullable(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <summary>
            转换字符串为日期时间.如果转换失败,则返回null
            </summary>
            <param name="value">要转换的字符串</param>
            <returns>转换后的 <see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:System.FishStringExtension.ToDateTimeNullableExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <summary>
            转换字符串为日期时间.如果转换失败,则返回null
            </summary>
            <param name="value">要转换的字符串</param>
            <returns>转换后的 <see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:System.FishStringExtension.ToDateTimeNullableExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <summary>
            转换字符串为日期时间.如果转换失败,则返回null
            </summary>
            <param name="value">要转换的字符串</param>
            <returns>转换后的 <see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:System.FishStringExtension.ToTimeSpanNullable(System.String,System.IFormatProvider)">
            <summary>
            将字符串分析为可空Timespan
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishStringExtension.ToTimeSpanNullableExact(System.String,System.String,System.IFormatProvider,System.Globalization.TimeSpanStyles)">
            <summary>
            将字符串分析为可空Timespan
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishStringExtension.ToTimeSpanNullableExact(System.String,System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles)">
            <summary>
            将字符串分析为可空Timespan
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishStringExtension.ToTimeSpan(System.String,System.TimeSpan,System.IFormatProvider)">
            <summary>
            将字符串分析为Timespan
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishStringExtension.ToTimeSpanExact(System.String,System.TimeSpan,System.String,System.IFormatProvider,System.Globalization.TimeSpanStyles)">
            <summary>
            将字符串分析为Timespan
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishStringExtension.ToTimeSpanExact(System.String,System.TimeSpan,System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles)">
            <summary>
            将字符串分析为Timespan
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishStringExtension.ToTimeSpan(System.String,System.IFormatProvider)">
            <summary>
            将字符串分析为Timespan
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishStringExtension.ToTimeSpanExact(System.String,System.String,System.IFormatProvider,System.Globalization.TimeSpanStyles)">
            <summary>
            将字符串分析为Timespan
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishStringExtension.ToTimeSpanExact(System.String,System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles)">
            <summary>
            将字符串分析为Timespan
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishStringExtension.ToDouble(System.String,System.Double,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            转换字符串为双精度数.如果转换失败,则返回 0.0
            </summary>
            <param name="value">要转换的字符串</param>
            <param name="defaultValue">默认值，默认为 0.0</param>
            <param name="styles">分析的格式</param>
            <param name="formatProvider">区域信息</param>
            <returns>转换后的 <see cref="T:System.Double"/></returns>
        </member>
        <member name="M:System.FishStringExtension.ToDoubleNullable(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            转换字符串为双精度数.如果转换失败,则返回指定的默认值
            </summary>
            <param name="value">要转换的字符串</param>
            <returns>转换后的 <see cref="T:System.Double"/></returns>
        </member>
        <member name="M:System.FishStringExtension.ToDecimal(System.String,System.Decimal,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            转换字符串为双精度数.如果转换失败,则返回指定的默认值
            </summary>
            <param name="value">要转换的字符串</param>
            <param name="defaultValue">如果转换失败,则返回的默认值</param>
            <returns>转换后的 <see cref="T:System.Double"/></returns>
        </member>
        <member name="M:System.FishStringExtension.ToDecimalNullable(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            转换字符串为双精度数.如果转换失败,则返回 0.0
            </summary>
            <param name="value">要转换的字符串</param>
            <returns>转换后的 <see cref="T:System.Double"/></returns>
        </member>
        <member name="M:System.FishStringExtension.ParseToPoint(System.String)">
            <summary>
            将字符串转换为坐标点格式
            </summary>
            <param name="location">字符串</param>
            <returns><see cref="T:System.Drawing.Point"/></returns>
        </member>
        <member name="M:System.FishStringExtension.AsDirectoryInfo(System.String)">
            <summary>
            转换为文件夹对象
            </summary>
            <param name="folder">文件夹路径</param>
            <returns>对应的文件夹信息对象</returns>
        </member>
        <member name="M:System.FishStringExtension.AsFileInfo(System.String)">
            <summary>
            转换为文件信息对象
            </summary>
            <param name="filePath">文件路径</param>
            <returns><see cref="T:System.IO.FileInfo"/></returns>
        </member>
        <member name="M:System.FishStringExtension.ConvertBase64ToBytes(System.String)">
            <summary>
            将Base64格式的字符串转换为字节数组
            </summary>
            <param name="base64String">要转换的Base64字符串</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:System.FishStringExtension.Compress(System.String)">
            <summary>
            压缩数据组
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishStringExtension.DecompressAsString(System.Byte[])">
            <summary>
            解压缩数据组
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishStringExtension.ConvertHexStringToBytes(System.String)">
            <summary>
            将HEX字符串转换为对应的字节数组
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishStringExtension.ToStringFormat(System.Drawing.Point)">
            <summary>
            将坐标点转换为字符串格式
            </summary>
            <param name="point">坐标点位置</param>
            <returns>
            字符串格式
            </returns>
        </member>
        <member name="M:System.FishValueExtension.IsValueInRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            判断一个数值是否在指定范围内
            </summary>
            <param name="value"></param>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishValueExtension.LimitRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            对数值进行上下限判定，返回限制范围内的数据
            </summary>
            <param name="value">当前值</param>
            <param name="min">最小值。如果 <paramref name="value"/> 小于此值， 则会返回最小值</param>
            <param name="max">最大值。如果 <paramref name="value"/> 大于此值， 则会返回最大值</param>
            <returns></returns>
        </member>
        <member name="M:System.FishValueExtension.CeilingDivide(System.Int32,System.Int32)">
            <summary>
            返回大于等于数字被指定值除的商的数字
            </summary>
            <param name="value">被除数</param>
            <param name="divideBy">除数</param>
            <returns><see cref="T:System.Int32"/></returns>
        </member>
        <member name="F:System.FishValueExtension.SizeLevel">
            <summary>
            控制尺寸显示转换上限
            </summary>
        </member>
        <member name="M:System.FishValueExtension.ToSizeDescription(System.Double)">
            <summary>
            转换为尺寸显示方式
            </summary>
            <param name="size">大小</param>
            <returns>尺寸显示方式</returns>
        </member>
        <member name="M:System.FishValueExtension.ToSizeDescription(System.Double,System.Int32)">
            <summary>
            转换为尺寸显示方式
            </summary>
            <param name="size">大小</param>
            <param name="digits">小数位数</param>
            <returns>尺寸显示方式</returns>
        </member>
        <member name="M:System.FishValueExtension.ToSizeDescription(System.UInt64)">
            <summary>
            转换为尺寸显示方式
            </summary>
            <param name="size">大小</param>
            <returns>尺寸显示方式</returns>
        </member>
        <member name="M:System.FishValueExtension.ToSizeDescription(System.UInt64,System.Int32)">
            <summary>
            转换为尺寸显示方式
            </summary>
            <param name="size">大小</param>
            <param name="digits">小数位数</param>
            <returns>尺寸显示方式</returns>
        </member>
        <member name="M:System.FishValueExtension.ToSizeDescription(System.Int64)">
            <summary>
            转换为尺寸显示方式
            </summary>
            <param name="size">大小</param>
            <returns>尺寸显示方式</returns>
        </member>
        <member name="M:System.FishValueExtension.ToSizeDescription(System.Int64,System.Int32)">
            <summary>
            转换为尺寸显示方式
            </summary>
            <param name="size">大小</param>
            <param name="digits">小数位数</param>
            <returns>尺寸显示方式</returns>
        </member>
        <member name="M:System.FishValueExtension.ToSizeDescription(System.Int32)">
            <summary>
            转换为尺寸显示方式
            </summary>
            <param name="size">大小</param>
            <returns>尺寸显示方式</returns>
        </member>
        <member name="M:System.FishValueExtension.ToSizeDescription(System.Int32,System.Int32)">
            <summary>
            转换为尺寸显示方式
            </summary>
            <param name="size">大小</param>
            <param name="digits">小数位数</param>
            <returns>尺寸显示方式</returns>
        </member>
        <member name="M:System.FishValueExtension.Min(System.Int32,System.Int32)">
            <summary>
            限制数值的最小值, 当数值小于一定范围时, 则返回最小值
            </summary>
            <param name="value">当前数值</param>
            <param name="minValue">最小值</param>
            <returns>不小于 <paramref name="minValue"/> 的值</returns>
        </member>
        <member name="M:System.FishValueExtension.Max(System.Int32,System.Int32)">
            <summary>
            限制数值的最大值, 当数值大于一定范围时, 则返回最大值
            </summary>
            <param name="value">当前数值</param>
            <param name="maxValue">最大值</param>
            <returns>不大于 <paramref name="maxValue"/> 的值</returns>
        </member>
        <member name="M:System.FishValueExtension.ToBooleanNullable(System.String)">
            <summary>
            转换字符串到可空逻辑值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishValueExtension.ToBoolean(System.String)">
            <summary>
            转换字符串到逻辑值
            </summary>
            <param name="value">要转换的字符串，如果转换失败，则返回 false</param>
            <returns>转换后的 <see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:System.FishValueExtension.ToBoolean(System.String,System.Boolean)">
            <summary>
            转换字符串到逻辑值
            </summary>
            <param name="value">要转换的字符串</param>
            <param name="defaultValue">如果转换失败返回的默认值</param>
            <returns>转换后的 <see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:System.FishValueExtension.GetValue``1(System.Nullable{``0})">
            <summary>
            从可空类型中获得原始值
            </summary>
            <typeparam name="T">可空值类型的数值类型</typeparam>
            <param name="value">包装后的对象</param>
            <returns>原始 <typeparamref name="T"/> 类型的值</returns>
        </member>
        <member name="M:System.FishValueExtension.GetValue``1(System.Nullable{``0},``0)">
            <summary>
            从可空类型中获得原始值
            </summary>
            <typeparam name="T">可空值类型的数值类型</typeparam>
            <param name="value">包装后的对象</param>
            <param name="defaultValue">默认值</param>
            <returns>原始 <typeparamref name="T"/> 类型的值</returns>
        </member>
        <member name="M:System.FishValueExtension.GetPercentageBy(System.Double,System.Double)">
            <summary>
            获得第一个数字占第二个数字的百分比
            </summary>
            <param name="first">第一个数字</param>
            <param name="second">第二个数字</param>
            <returns>百分比-浮点数</returns>
        </member>
        <member name="M:System.FishValueExtension.GetPercentageBy(System.Decimal,System.Decimal)">
            <summary>
            获得第一个数字占第二个数字的百分比
            </summary>
            <param name="first">第一个数字</param>
            <param name="second">第二个数字</param>
            <returns>百分比-浮点数</returns>
        </member>
        <member name="M:System.FishValueExtension.ToDisplayString(System.Nullable{System.Int32})">
            <summary>
            显示为字符串
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishValueExtension.ToDisplayString(System.Nullable{System.Int32},System.String)">
            <summary>
            显示为字符串
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishValueExtension.ToDisplayString(System.Nullable{System.Single})">
            <summary>
            显示为字符串
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishValueExtension.ToDisplayString(System.Nullable{System.Single},System.String)">
            <summary>
            显示为字符串
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishValueExtension.ToDisplayString(System.Nullable{System.Double})">
            <summary>
            显示为字符串
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishValueExtension.ToDisplayString(System.Nullable{System.Double},System.String)">
            <summary>
            显示为字符串
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.FishValueExtension.GetInitialCodeString">
            <summary>
            获得初始化字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.FishValueExtension.CompressToString(System.UInt32)">
            <summary>
            将int压缩为字符串
            </summary>
            <param name="value">要压缩的 <see cref="T:System.Int32"/></param>
            <returns>压缩后的字符串</returns>
        </member>
        <member name="M:System.FishValueExtension.DecompressToInt(System.String)">
            <summary>
            将字符串解压为Int值
            </summary>
            <param name="value">要解压的 <see cref="T:System.String"/></param>
            <returns>解压后的 <see cref="T:System.Int32"/></returns>
        </member>
        <member name="T:System.FsLibEnumExtension">
            <summary>
            枚举的扩展
            </summary>
        </member>
        <member name="M:System.FsLibEnumExtension.GetEnumDescription(System.Type)">
            <summary>
            获得描述
            </summary>
            <param name="type">枚举类型参数</param>
            <returns></returns>
        </member>
        <member name="M:System.FsLibEnumExtension.GetEnumDescription``1">
            <summary>
            获得描述
            </summary>
            <returns></returns>
        </member>
        <member name="T:System.FSLib_BinarySerializeExtension">
            <summary>
            XML序列化支持类
            </summary>
        </member>
        <member name="M:System.FSLib_BinarySerializeExtension.SerializeToFile(System.Object,System.String)">
            <summary>
            序列化对象到文件
            </summary>
            <param name="ObjectToSerilize">要序列化的对象</param>
            <param name="FileName">保存到的文件路径</param>
        </member>
        <member name="M:System.FSLib_BinarySerializeExtension.SerializeToBytes(System.Object)">
            <summary>
            序列化对象到字节数组
            </summary>
            <param name="objectToSerialize">要序列化的对象</param>
            <returns>返回创建后的字节数组</returns>
        </member>
        <member name="M:System.FSLib_BinarySerializeExtension.SerializeToStream(System.Object,System.IO.Stream)">
            <summary>
            序列化对象到流
            </summary>
            <param name="objectToSerialize">要序列化的对象</param>
            <param name="stream">保存对象信息的流</param>
        </member>
        <member name="M:System.FSLib_BinarySerializeExtension.DeserializeFromStream(System.IO.Stream)">
            <summary>
            从流中反序列化对象
            </summary>
            <param name="stream">流</param>
            <returns>反序列化的对象</returns>
        </member>
        <member name="T:System.FSLib_XmlSerializeExtension">
            <summary>
            XML序列化支持类
            </summary>
        </member>
        <member name="M:System.FSLib_XmlSerializeExtension.XmlSerilizeToFile(System.Object,System.String)">
            <summary>
            序列化对象到文件
            </summary>
            <param name="objectToSerialize">要序列化的对象</param>
            <param name="fileName">保存到的目标文件</param>
        </member>
        <member name="M:System.FSLib_XmlSerializeExtension.XmlSerializeToString(System.Object)">
            <summary>
            序列化对象为文本
            </summary>
            <param name="objectToSerialize">要序列化的对象</param>
            <returns>保存信息的 <see cref="T:System.String"/></returns>
        </member>
        <member name="M:System.FSLib_XmlSerializeExtension.XmlSerializeToStream(System.Object)">
            <summary>
            序列化指定对象为一个内存流
            </summary>
            <param name="objectToSerialize">要序列化的对象</param>
            <returns>保存序列化信息的 <see cref="T:System.IO.MemoryStream"/></returns>
        </member>
        <member name="M:System.FSLib_XmlSerializeExtension.XmlSerializeToStream(System.Object,System.IO.Stream)">
            <summary>
            序列化指定对象到指定流中
            </summary>
            <param name="objectToSerialize">要序列化的对象</param>
            <param name="stream">目标流</param>
        </member>
        <member name="M:System.FSLib_XmlSerializeExtension.XmlDeserialize(System.Type,System.String)">
            <summary>
            从指定的字符串或文件中反序列化对象
            </summary>
            <param name="type">目标类型</param>
            <param name="content">文件路径或XML文本</param>
            <returns>反序列化的结果</returns>
        </member>
        <member name="M:System.FSLib_XmlSerializeExtension.XmlDeserializeFromFile(System.String,System.Type)">
            <summary>
            从文件中反序列化指定类型的对象
            </summary>
            <param name="objType">反序列化的对象类型</param>
            <param name="fileName">文件名</param>
            <returns>对象</returns>
        </member>
        <member name="M:System.FSLib_XmlSerializeExtension.XmlDeserialize(System.IO.Stream,System.Type)">
            <summary>
            从流中反序列化出指定对象类型的对象
            </summary>
            <param name="objType">对象类型</param>
            <param name="stream">流对象</param>
            <returns>反序列结果</returns>
        </member>
        <member name="M:System.FSLib_XmlSerializeExtension.XmlDeserialize``1(System.IO.Stream)">
            <summary>
            从流中反序列化对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="stream">流对象</param>
            <returns>反序列化结果</returns>
        </member>
        <member name="M:System.FSLib_XmlSerializeExtension.XmlDeserialize``1(System.String)">
            <summary>
            序列化文本或文件为对象
            </summary>
            <returns>保存信息的 <see cref="T:System.String"/></returns>
        </member>
        <member name="T:System.FU">
            <summary>
            FishUtility
            </summary>
        </member>
        <member name="M:System.FU.ConvertHexCharToByte(System.Char)">
            <summary>
            转换十六进制字符为对应的数据
            </summary>
            <param name="byteChar">0-9, A-F, a-f</param>
            <returns></returns>
        </member>
        <member name="M:System.FU.ConvertHexStringToBytes(System.String)">
            <summary>
            转换十六进制字符串为数组
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="F:System.Globalization.ChineseLunisolarCalendarExtension._tiangan">
            <summary>
            十天干
            </summary>
        </member>
        <member name="F:System.Globalization.ChineseLunisolarCalendarExtension._dizhi">
            <summary>
            十二地支
            </summary>
        </member>
        <member name="F:System.Globalization.ChineseLunisolarCalendarExtension._shengxiao">
            <summary>
            十二生肖
            </summary>
        </member>
        <member name="M:System.Globalization.ChineseLunisolarCalendarExtension.GetLunisolarYear(System.Int32)">
            <summary>
            返回农历天干地支年 
            </summary>
            <param name="year">农历年</param>
            <returns></returns>
        </member>
        <member name="M:System.Globalization.ChineseLunisolarCalendarExtension.GetLunisolarYear(System.Globalization.ChineseLunisolarCalendar,System.DateTime)">
            <summary>
            获得指定公历日期中对应的农历天干地支年
            </summary>
            <param name="calendar"></param>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="F:System.Globalization.ChineseLunisolarCalendarExtension.months">
            <summary>
            农历月
            </summary>
        </member>
        <member name="M:System.Globalization.ChineseLunisolarCalendarExtension.GetLunisolarMonth(System.Int32)">
            <summary>
            返回农历月
            </summary>
            <param name="month">月份</param>
            <returns></returns>
        </member>
        <member name="M:System.Globalization.ChineseLunisolarCalendarExtension.GetLunisolarMonth(System.Globalization.ChineseLunisolarCalendar,System.DateTime)">
            <summary>
            返回指定公历日期对应的农历月
            </summary>
            <param name="calendar"></param>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="F:System.Globalization.ChineseLunisolarCalendarExtension.days1">
            <summary>
            日期前缀
            </summary>
        </member>
        <member name="F:System.Globalization.ChineseLunisolarCalendarExtension.days">
            <summary>
            日
            </summary>
        </member>
        <member name="M:System.Globalization.ChineseLunisolarCalendarExtension.GetLunisolarDay(System.Int32)">
            <summary>
            返回农历日
            </summary>
            <param name="day"></param>
            <returns></returns>
        </member>
        <member name="M:System.Globalization.ChineseLunisolarCalendarExtension.GetLunisolarDay(System.Globalization.ChineseLunisolarCalendar,System.DateTime)">
            <summary>
            返回农历日
            </summary>
            <param name="day"></param>
            <returns></returns>
        </member>
        <member name="M:System.Globalization.ChineseLunisolarCalendarExtension.GetShengXiao(System.Globalization.ChineseLunisolarCalendar,System.DateTime)">
            <summary>
            返回生肖
            </summary>
            <param name="datetime">公历日期</param>
            <returns></returns>
        </member>
        <member name="M:System.Globalization.ChineseLunisolarCalendarExtension.GetLunisolarDateString(System.Globalization.ChineseLunisolarCalendar,System.DateTime)">
            <summary>
            获得指定公历的农历表述方式
            </summary>
            <param name="calendar"></param>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:System.IO.PathUtility.Combine(System.String[])">
            <summary>
            合并路径
            </summary>
            <param name="paths"></param>
            <returns></returns>
        </member>
        <member name="T:System.IO.StreamWithEventsWrapper">
            <summary>
            包装现有Stream以提供进度变化通知的类
            </summary>
        </member>
        <member name="E:System.IO.StreamWithEventsWrapper.PositionChanged">
            <summary>
            位置发生变化
            </summary>
        </member>
        <member name="M:System.IO.StreamWithEventsWrapper.OnPositionChanged">
            <summary>
            引发 <see cref="E:System.IO.StreamWithEventsWrapper.PositionChanged" /> 事件
            </summary>
        </member>
        <member name="M:System.IO.StreamWithEventsWrapper.#ctor(System.IO.Stream)">
            <summary>
            创建 <see cref="T:System.IO.StreamWithEventsWrapper" />  的新实例(StreamWithEventsWrapper)
            </summary>
            <param name="innerStream"></param>
        </member>
        <member name="M:System.IO.StreamWithEventsWrapper.Flush">
            <summary>
            当在派生类中重写时，将清除该流的所有缓冲区，并使得所有缓冲数据被写入到基础设备。
            </summary>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception>
        </member>
        <member name="M:System.IO.StreamWithEventsWrapper.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            当在派生类中重写时，设置当前流中的位置。
            </summary>
            <returns>
            当前流中的新位置。
            </returns>
            <param name="offset">相对于 <paramref name="origin"/> 参数的字节偏移量。</param><param name="origin"><see cref="T:System.IO.SeekOrigin"/> 类型的值，指示用于获取新位置的参考点。</param><exception cref="T:System.IO.IOException">发生 I/O 错误。</exception><exception cref="T:System.NotSupportedException">流不支持查找，例如在流通过管道或控制台输出构造的情况下即为如此。</exception><exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="M:System.IO.StreamWithEventsWrapper.SetLength(System.Int64)">
            <summary>
            当在派生类中重写时，设置当前流的长度。
            </summary>
            <param name="value">所需的当前流的长度（以字节表示）。</param><exception cref="T:System.IO.IOException">发生 I/O 错误。</exception><exception cref="T:System.NotSupportedException">流不支持写入和查找，例如在流通过管道或控制台输出构造的情况下即为如此。</exception><exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="M:System.IO.StreamWithEventsWrapper.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            当在派生类中重写时，从当前流读取字节序列，并将此流中的位置提升读取的字节数。
            </summary>
            <returns>
            读入缓冲区中的总字节数。如果当前可用的字节数没有请求的字节数那么多，则总字节数可能小于请求的字节数；如果已到达流的末尾，则为零 (0)。
            </returns>
            <param name="buffer">字节数组。此方法返回时，该缓冲区包含指定的字符数组，该数组的 <paramref name="offset"/> 和 (<paramref name="offset"/> + <paramref name="count"/> -1) 之间的值由从当前源中读取的字节替换。</param><param name="offset"><paramref name="buffer"/> 中的从零开始的字节偏移量，从此处开始存储从当前流中读取的数据。</param><param name="count">要从当前流中最多读取的字节数。</param><exception cref="T:System.ArgumentException"><paramref name="offset"/> 与 <paramref name="count"/> 的和大于缓冲区长度。</exception><exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> 为 null。</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> 或 <paramref name="count"/> 为负。</exception><exception cref="T:System.IO.IOException">发生 I/O 错误。</exception><exception cref="T:System.NotSupportedException">流不支持读取。</exception><exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="M:System.IO.StreamWithEventsWrapper.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            当在派生类中重写时，向当前流中写入字节序列，并将此流中的当前位置提升写入的字节数。
            </summary>
            <param name="buffer">字节数组。此方法将 <paramref name="count"/> 个字节从 <paramref name="buffer"/> 复制到当前流。</param><param name="offset"><paramref name="buffer"/> 中的从零开始的字节偏移量，从此处开始将字节复制到当前流。</param><param name="count">要写入当前流的字节数。</param><exception cref="T:System.ArgumentException"><paramref name="offset"/> 与 <paramref name="count"/> 的和大于缓冲区长度。</exception><exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> 为 null。</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> 或 <paramref name="count"/> 为负。</exception><exception cref="T:System.IO.IOException">发生 I/O 错误。</exception><exception cref="T:System.NotSupportedException">流不支持写入。</exception><exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="P:System.IO.StreamWithEventsWrapper.CanRead">
            <summary>
            当在派生类中重写时，获取指示当前流是否支持读取的值。
            </summary>
            <returns>
            如果流支持读取，为 true；否则为 false。
            </returns>
        </member>
        <member name="P:System.IO.StreamWithEventsWrapper.CanSeek">
            <summary>
            当在派生类中重写时，获取指示当前流是否支持查找功能的值。
            </summary>
            <returns>
            如果流支持查找，为 true；否则为 false。
            </returns>
        </member>
        <member name="P:System.IO.StreamWithEventsWrapper.CanWrite">
            <summary>
            当在派生类中重写时，获取指示当前流是否支持写入功能的值。
            </summary>
            <returns>
            如果流支持写入，为 true；否则为 false。
            </returns>
        </member>
        <member name="P:System.IO.StreamWithEventsWrapper.Length">
            <summary>
            当在派生类中重写时，获取用字节表示的流长度。
            </summary>
            <returns>
            用字节表示流长度的长值。
            </returns>
            <exception cref="T:System.NotSupportedException">从 Stream 派生的类不支持查找。</exception><exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="P:System.IO.StreamWithEventsWrapper.Position">
            <summary>
            当在派生类中重写时，获取或设置当前流中的位置。
            </summary>
            <returns>
            流中的当前位置。
            </returns>
            <exception cref="T:System.IO.IOException">发生 I/O 错误。</exception><exception cref="T:System.NotSupportedException">流不支持查找。</exception><exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="M:System.IO.StreamWithEventsWrapper.ReadByte">
            <summary>
            从流中读取一个字节，并将流内的位置向前推进一个字节，或者如果已到达流的末尾，则返回 -1。
            </summary>
            <returns>
            转换为 Int32 的无符号字节，或者如果到达流的末尾，则为 -1。
            </returns>
            <exception cref="T:System.NotSupportedException">流不支持读取。</exception><exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="M:System.IO.StreamWithEventsWrapper.WriteByte(System.Byte)">
            <summary>
            将一个字节写入流内的当前位置，并将流内的位置向前推进一个字节。
            </summary>
            <param name="value">要写入流的字节。</param><exception cref="T:System.IO.IOException">发生 I/O 错误。</exception><exception cref="T:System.NotSupportedException">该流不支持写入，或者该流已关闭。</exception><exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
        </member>
        <member name="M:System.IO.StreamWithEventsWrapper.EndRead(System.IAsyncResult)">
            <summary>
            等待挂起的异步读取完成。 （考虑使用<see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)"/>进行替换；请参见“备注”部分。）
            </summary>
            <returns>
            从流中读取的字节数，介于零 (0) 和所请求的字节数之间。 流仅在流的末尾返回零 (0)，否则应一直阻止到至少有 1 个字节可用为止。
            </returns>
            <param name="asyncResult">对要完成的挂起异步请求的引用。</param><exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> 为 null。</exception><exception cref="T:System.ArgumentException">处于挂起状态的读取操作的句柄不可用。 - 或 - 悬挂操作不支持读取。</exception><exception cref="T:System.InvalidOperationException"><paramref name="asyncResult"/> 并非源自当前流上的 <see cref="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"/> 方法。</exception><exception cref="T:System.IO.IOException">此流关闭或发生内部错误。</exception>
        </member>
        <member name="M:System.IO.StreamWithEventsWrapper.EndWrite(System.IAsyncResult)">
            <summary>
            结束异步写操作。 （考虑使用<see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)"/>进行替换；请参见“备注”部分。）
            </summary>
            <param name="asyncResult">对未完成的异步 I/O 请求的引用。</param><exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> 为 null。</exception><exception cref="T:System.ArgumentException">处于挂起状态的写入操作的句柄不可用。 - 或 - 悬挂操作不支持写入。</exception><exception cref="T:System.InvalidOperationException"><paramref name="asyncResult"/> 并非源自当前流上的 <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"/> 方法。</exception><exception cref="T:System.IO.IOException">此流关闭或发生内部错误。</exception>
        </member>
        <member name="T:System.Net.FSLib_Network_WebExtension">
            <summary>
            WebException的辅助类
            </summary>
        </member>
        <member name="M:System.Net.FSLib_Network_WebExtension.IsHttpResponse(System.Net.WebException)">
            <summary>
            判断当前的请求是不是 <see cref="T:System.Net.HttpWebResponse"/>
            </summary>
            <param name="e">包含异常的事件数据</param>
            <returns>如果是 <see cref="T:System.Net.HttpWebResponse"/> ，则返回 true</returns>
        </member>
        <member name="M:System.Net.FSLib_Network_WebExtension.AsHttpWebResponse(System.Net.WebException)">
            <summary>
            获得 <see cref="T:System.Net.WebException"/> 所对应的 <see cref="T:System.Net.HttpWebResponse"/>
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:System.Net.FSLib_Network_WebExtension.IsRedirectHttpWebResponse(System.Net.HttpWebResponse)">
            <summary>
            判断当前的 <see cref="T:System.Net.HttpWebResponse"/> 是不是重定向的请求
            </summary>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="T:System.Reflection.FishReflectionExtensions">
            <summary>
            用于反射中使用的扩展方法
            </summary>
        </member>
        <member name="M:System.Reflection.FishReflectionExtensions.HasInterface``1(System.Type)">
            <summary>
            判断指定的类型是否具有指定的接口
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.FishReflectionExtensions.FilterByInterface``1(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            按照指定的接口过滤类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:System.Threading.SynchorizonExtension.Send(System.Threading.SynchronizationContext,System.Threading.SendOrPostCallback)">
            <summary>
            同步一个不需要参数的回调到目标线程
            </summary>
            <param name="context"></param>
            <param name="callback"></param>
        </member>
        <member name="M:System.Threading.SynchorizonExtension.Post(System.Threading.SynchronizationContext,System.Threading.SendOrPostCallback)">
            <summary>
            异步一个不需要参数的回调到目标线程
            </summary>
            <param name="context"></param>
            <param name="callback"></param>
        </member>
        <member name="M:System.Threading.SynchorizonExtension.Send(System.Threading.SynchronizationContext,System.Action)">
            <summary>
            同步一个不需要参数的回调到目标线程
            </summary>
            <param name="context"></param>
            <param name="callback"></param>
        </member>
        <member name="M:System.Threading.SynchorizonExtension.Post(System.Threading.SynchronizationContext,System.Action)">
            <summary>
            异步一个不需要参数的回调到目标线程
            </summary>
            <param name="context"></param>
            <param name="callback"></param>
        </member>
        <member name="M:System.Threading.SynchorizonExtension.Send``1(System.Threading.SynchronizationContext,System.Action{``0},``0)">
            <summary>
            同步一个不需要参数的回调到目标线程
            </summary>
            <param name="context"></param>
            <param name="callback"></param>
        </member>
        <member name="M:System.Threading.SynchorizonExtension.Post``1(System.Threading.SynchronizationContext,System.Action{``0},``0)">
            <summary>
            异步一个不需要参数的回调到目标线程
            </summary>
            <param name="context"></param>
            <param name="callback"></param>
        </member>
        <member name="P:System.Windows.Forms.ControlBatchOperationWrap`1.Control">
            <summary>
            获得绑定的控件
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlBatchOperationWrap`1.#ctor(`0)">
            <summary>
            创建 <see cref="T:System.Windows.Forms.ControlBatchOperationWrap`1" />  的新实例(ControlBatchOperationWrap)
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:System.Windows.Forms.ControlBatchOperationWrap`1.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:System.Windows.Forms.ControlExtensionMethods">
            <summary>
            关于控件的扩展方法
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlExtensionMethods.KeepCenter``1(``0,System.Windows.Forms.Control,System.Int32)">
            <summary>
            保持指定的控件始终居中
            </summary>
            <param name="control">要保持居中的控件</param>
            <param name="parentControl">相对位置的父控件，默认为上级控件</param>
            <param name="topAdjust">垂直方向位置微调，为负的偏移</param>
        </member>
        <member name="M:System.Windows.Forms.ControlExtensionMethods.CreateBatchOperationDispatcher``1(``0)">
            <summary>
            创建一个批量操作的包装类
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.ControlExtensionMethods.Closest``1(System.Windows.Forms.Control)">
            <summary>
            向上级不断地查找到指定类型的控件
            </summary>
            <typeparam name="T">要查找的控件类型</typeparam>
            <param name="control">当前控件</param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.ControlExtensionMethods.UnCheckAll(System.Windows.Forms.CheckedListBox)">
            <summary>
            取消选择所有选项
            </summary>
            <param name="clb">控件</param>
        </member>
        <member name="M:System.Windows.Forms.ControlExtensionMethods.CheckAll(System.Windows.Forms.CheckedListBox)">
            <summary>
            全选所有选项
            </summary>
            <param name="clb">控件</param>
        </member>
        <member name="M:System.Windows.Forms.ControlExtensionMethods.GetTopNode(System.Windows.Forms.TreeNode)">
            <summary>
            获得当前节点的一级节点
            </summary>
            <param name="node">当前节点</param>
            <returns><see cref="T:System.Windows.Forms.TreeNode"/></returns>
        </member>
        <member name="M:System.Windows.Forms.ControlExtensionMethods.GetAllNodes(System.Windows.Forms.TreeView,System.Windows.Forms.TreeNode,System.Boolean)">
            <summary>
            获得所有节点列表
            </summary>
            <param name="view">当前列表</param>
            <param name="parentNode">父节点</param>
            <param name="includeFolderNode">是否包含文件夹节点</param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.ControlExtensionMethods.GetCurrentViewItem(System.Windows.Forms.ListView)">
            <summary>
            获得当前选中的项
            </summary>
            <param name="view">对应的控件</param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.ControlExtensionMethods.GetCurrentViewItem``1(System.Windows.Forms.ListView)">
            <summary>
            获得当前选中的项
            </summary>
            <param name="view">对应的控件</param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.ControlExtensionMethods.IsInDesignMode(System.ComponentModel.IComponent)">
            <summary>
            确定指定的组件是否处于设计模式
            </summary>
            <param name="target">组件</param>
            <returns><c>true</c> 表示正在设计模式，<c>false</c> 表示不是</returns>
        </member>
        <member name="M:System.Windows.Forms.ControlExtensionMethods.IsInRuntimeMode(System.ComponentModel.IComponent)">
            <summary>
            确定指定的组件是否处于运行模式
            </summary>
            <param name="target">组件</param>
            <returns><c>true</c> 表示正在运行模式，<c>false</c> 表示不是</returns>
        </member>
        <member name="M:System.Windows.Forms.ControlExtensionMethods.HasAvailableFileItem(System.Windows.Forms.DataObject,System.Boolean,System.Boolean,System.Collections.Generic.HashSet{System.String})">
            <summary>
            判断拖放列表是否有任何一个符合要求的拖放项
            </summary>
            <param name="data">拖放数据</param>
            <param name="enableFolder">是否允许文件夹</param>
            <param name="enableFile">是否允许文件</param>
            <param name="fileExtensions">允许的文件类型</param>
            <returns>如果至少一个符合要求，则返回true，否则返回false</returns>
        </member>
        <member name="M:System.Windows.Forms.ControlExtensionMethods.GetAvailableFileItem(System.Windows.Forms.DataObject,System.Boolean,System.Boolean,System.Collections.Generic.HashSet{System.String})">
            <summary>
            获得拖放列表中符合要求的拖放项
            </summary>
            <param name="data">拖放数据</param>
            <param name="enableFolder">是否允许文件夹</param>
            <param name="enableFile">是否允许文件</param>
            <param name="fileExtensions">允许的文件类型</param>
            <returns>返回符合要求的文件列表</returns>
        </member>
        <member name="M:System.Windows.Forms.ControlExtensionMethods.IsAltPressed(System.Windows.Forms.QueryContinueDragEventArgs)">
            <summary>
            判断ALT键是否按下
            </summary>
            <param name="e">事件数据</param>
            <returns>true/false</returns>
        </member>
        <member name="M:System.Windows.Forms.ControlExtensionMethods.IsCtrlPressed(System.Windows.Forms.QueryContinueDragEventArgs)">
            <summary>
            判断CTRL键是否按下
            </summary>
            <param name="e">事件数据</param>
            <returns>true/false</returns>
        </member>
        <member name="M:System.Windows.Forms.ControlExtensionMethods.IsShiftPressed(System.Windows.Forms.QueryContinueDragEventArgs)">
            <summary>
            判断SHIFT键是否按下
            </summary>
            <param name="e">事件数据</param>
            <returns>true/false</returns>
        </member>
        <member name="M:System.Windows.Forms.ControlExtensionMethods.IsMouseLeftButtonPressed(System.Windows.Forms.QueryContinueDragEventArgs)">
            <summary>
            判断ALT键是否按下
            </summary>
            <param name="e">事件数据</param>
            <returns>true/false</returns>
        </member>
        <member name="M:System.Windows.Forms.ControlExtensionMethods.IsMouseRightButtonPressed(System.Windows.Forms.QueryContinueDragEventArgs)">
            <summary>
            判断ALT键是否按下
            </summary>
            <param name="e">事件数据</param>
            <returns>true/false</returns>
        </member>
        <member name="M:System.Windows.Forms.ControlExtensionMethods.IsMouseCenterButtonPressed(System.Windows.Forms.QueryContinueDragEventArgs)">
            <summary>
            判断ALT键是否按下
            </summary>
            <param name="e">事件数据</param>
            <returns>true/false</returns>
        </member>
        <member name="M:System.Windows.Forms.ControlExtensionMethods.IsAltPressed(System.Windows.Forms.DragEventArgs)">
            <summary>
            判断ALT键是否按下
            </summary>
            <param name="e">事件数据</param>
            <returns>true/false</returns>
        </member>
        <member name="M:System.Windows.Forms.ControlExtensionMethods.IsCtrlPressed(System.Windows.Forms.DragEventArgs)">
            <summary>
            判断CTRL键是否按下
            </summary>
            <param name="e">事件数据</param>
            <returns>true/false</returns>
        </member>
        <member name="M:System.Windows.Forms.ControlExtensionMethods.IsShiftPressed(System.Windows.Forms.DragEventArgs)">
            <summary>
            判断SHIFT键是否按下
            </summary>
            <param name="e">事件数据</param>
            <returns>true/false</returns>
        </member>
        <member name="M:System.Windows.Forms.ControlExtensionMethods.IsMouseLeftButtonPressed(System.Windows.Forms.DragEventArgs)">
            <summary>
            判断ALT键是否按下
            </summary>
            <param name="e">事件数据</param>
            <returns>true/false</returns>
        </member>
        <member name="M:System.Windows.Forms.ControlExtensionMethods.IsMouseRightButtonPressed(System.Windows.Forms.DragEventArgs)">
            <summary>
            判断ALT键是否按下
            </summary>
            <param name="e">事件数据</param>
            <returns>true/false</returns>
        </member>
        <member name="M:System.Windows.Forms.ControlExtensionMethods.IsMouseCenterButtonPressed(System.Windows.Forms.DragEventArgs)">
            <summary>
            判断ALT键是否按下
            </summary>
            <param name="e">事件数据</param>
            <returns>true/false</returns>
        </member>
        <member name="M:System.Windows.Forms.ControlExtensionMethods.IsFocused(System.Windows.Forms.DrawItemState)">
            <summary>
            判断指定的状态是否有焦点
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.ControlExtensionMethods.IsSelected(System.Windows.Forms.DrawItemState)">
            <summary>
            判断指定的状态是否已选中
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.ControlExtensionMethods.SetLink(System.Windows.Forms.LinkLabel,System.String)">
            <summary>
            设置链接的格式化文本，并附上链接。 &lt;!NAME&gt;LINK TEXT&lt;/!&gt;
            </summary>
            <param name="link"></param>
            <param name="text"></param>
        </member>
        <member name="M:System.Windows.Forms.ControlExtensionMethods.IsValueEmpty(System.Windows.Forms.TextBox)">
            <summary>
            获得指定的文本框是不是没有输入内容
            </summary>
            <param name="txt"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.ControlExtensionMethods.EnableCommonShortCuts(System.Windows.Forms.TextBox)">
            <summary>
            为控件启用常规快捷操作（如Ctrl+A等）
            </summary>
            <param name="txt"></param>
        </member>
        <member name="M:System.Windows.Forms.ControlExtensionMethods.AddDataBinding``3(``0,``1,System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
            <summary>
            添加一个数据源绑定
            </summary>
            <typeparam name="TControl"></typeparam>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="control"></param>
            <param name="source"></param>
            <param name="controlExpression"></param>
            <param name="propertyExpression"></param>
        </member>
        <member name="M:System.Windows.Forms.ControlExtensionMethods.AddTextValidationStatus(System.Windows.Forms.TextBox,System.Windows.Forms.PictureBox,System.Func{System.Windows.Forms.TextBox,System.Boolean})">
            <summary>
            增加文本的验证，并在指定的图片框中显示状态。
            </summary>
            <param name="txt"></param>
            <param name="pbTarget"></param>
            <param name="validationFunc"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:System.Windows.Forms.ControlExtensionMethods.IsHandleAvailable(System.Windows.Forms.Control)">
            <summary>
            判断指定的控件是否正在销毁中
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.ControlExtensionMethods.Invoke(System.Windows.Forms.Control,System.Action)">
            <summary>
            在UI线程上回调指定委托
            </summary>
            <param name="action">委托</param>
        </member>
        <member name="M:System.Windows.Forms.ControlExtensionMethods.Invoke``1(System.Windows.Forms.Control,System.Action{``0},``0)">
            <summary>
            在UI线程上回调指定委托
            </summary>
            <param name="action">委托</param>
            <param name="p">参数1</param>
            <typeparam name="T">参数类型2</typeparam>
        </member>
        <member name="M:System.Windows.Forms.ControlExtensionMethods.Invoke``2(System.Windows.Forms.Control,System.Action{``0,``1},``0,``1)">
            <summary>
            在UI线程上回调指定委托
            </summary>
            <param name="action">委托</param>
            <param name="p1">参数1</param>
            <param name="p2">参数2</param>
            <typeparam name="T1">参数类型1</typeparam>
            <typeparam name="T2">参数类型2</typeparam>
        </member>
        <member name="M:System.Windows.Forms.ControlExtensionMethods.Invoke``3(System.Windows.Forms.Control,System.Action{``0,``1,``2},``0,``1,``2)">
            <summary>
            在UI线程上回调指定委托
            </summary>
            <param name="action">委托</param>
            <param name="p1">参数1</param>
            <param name="p2">参数2</param>
            <param name="p3">参数3</param>
            <typeparam name="T1">参数类型1</typeparam>
            <typeparam name="T2">参数类型2</typeparam>
            <typeparam name="T3">参数类型3</typeparam>
        </member>
        <member name="M:System.Windows.Forms.ControlExtensionMethods.Invoke``4(System.Windows.Forms.Control,System.Action{``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            在UI线程上回调指定委托
            </summary>
            <param name="action">委托</param>
            <param name="p1">参数1</param>
            <param name="p2">参数2</param>
            <param name="p3">参数3</param>
            <param name="p4">参数4</param>
            <typeparam name="T1">参数类型1</typeparam>
            <typeparam name="T2">参数类型2</typeparam>
            <typeparam name="T3">参数类型3</typeparam>
            <typeparam name="T4">参数类型4</typeparam>
        </member>
        <member name="M:System.Windows.Forms.ControlExtensionMethods.Invoke``2(System.Windows.Forms.Control,System.Func{``0,``1},``0)">
            <summary>
            在UI上执行操作
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlExtensionMethods.Invoke``3(System.Windows.Forms.Control,System.Func{``0,``1,``2},``0,``1)">
            <summary>
            在UI上执行操作
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlExtensionMethods.Invoke``4(System.Windows.Forms.Control,System.Func{``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            在UI上执行操作
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlExtensionMethods.Invoke``5(System.Windows.Forms.Control,System.Func{``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            在UI上执行操作
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlExtensionMethods.SafeInvoke(System.Windows.Forms.Control,System.Action)">
            <summary>
            包装委托为指定控件上跨线程安全的方法
            </summary>
            <param name="control"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.ControlExtensionMethods.SafeInvoke(System.Windows.Forms.Control,System.EventHandler)">
            <summary>
            包装委托为指定控件上跨线程安全的方法
            </summary>
            <param name="control"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.ControlExtensionMethods.SafeInvoke``1(System.Windows.Forms.Control,System.EventHandler{``0})">
            <summary>
            包装委托为指定控件上跨线程安全的方法
            </summary>
            <param name="control"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.ControlExtensionMethods.SafeInvoke``1(System.Windows.Forms.Control,System.Action{``0})">
            <summary>
            包装委托为指定控件上跨线程安全的方法
            </summary>
            <param name="control"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.ControlExtensionMethods.IsDescendantOf(System.Windows.Forms.TreeNode,System.Windows.Forms.TreeNode)">
            <summary>
            判断指定的 <paramref name="currentNode"/> 是否是节点 <paramref name="targetTreeNode"/> 的后代
            </summary>
            <param name="currentNode"></param>
            <param name="targetTreeNode"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.ControlExtensionMethods.IsAncestorOf(System.Windows.Forms.TreeNode,System.Windows.Forms.TreeNode)">
            <summary>
            判断指定的 <paramref name="currentNode"/> 是否是节点 <paramref name="targetTreeNode"/> 的先辈
            </summary>
            <param name="currentNode"></param>
            <param name="targetTreeNode"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.ListViewExtensionMethods.RemoveSelectedItems(System.Windows.Forms.ListView)">
            <summary>
            移除选中项，并返回移除的项
            </summary>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.ListViewExtensionMethods.SelectAll(System.Windows.Forms.ListView)">
            <summary>
            全选
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:System.Windows.Forms.ListViewExtensionMethods.SelectNone(System.Windows.Forms.ListView)">
            <summary>
            全部不选
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:System.Windows.Forms.ListViewExtensionMethods.SelectInverse(System.Windows.Forms.ListView)">
            <summary>
            反选
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:System.Windows.Forms.ListViewExtensionMethods.CheckAll(System.Windows.Forms.ListView)">
            <summary>
            全选
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:System.Windows.Forms.ListViewExtensionMethods.CheckNone(System.Windows.Forms.ListView)">
            <summary>
            全部不选
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:System.Windows.Forms.ListViewExtensionMethods.CheckInverse(System.Windows.Forms.ListView)">
            <summary>
            反选
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:System.Xml.FishXmlExtensionMethods.GetAttributeValue(System.Xml.XmlNode,System.String)">
            <summary>
            获得对应名称属性的值
            </summary>
            <param name="node">当前的节点</param>
            <param name="attName">属性名</param>
            <returns>属性值</returns>
        </member>
        <member name="T:FSLib.IO.SerializeHelper.BinarySerializeHelper">
            <summary>
            二进制序列化辅助类
            </summary>
        </member>
        <member name="M:FSLib.IO.SerializeHelper.BinarySerializeHelper.DeserializeFromFile(System.String)">
            <summary>
            从文件中反序列化对象
            </summary>
            <param name="FileName">文件名</param>
            <returns>原对象</returns>
        </member>
        <member name="M:FSLib.IO.SerializeHelper.BinarySerializeHelper.DeserialzieFromBytes(System.Byte[])">
            <summary>
            从字节数组中反序列化
            </summary>
            <param name="array">字节数组</param>
            <returns>序列化结果</returns>
        </member>
        <member name="M:FSLib.Data.DataSetExtension.ToCompressedByteBuffer(System.Data.DataSet)">
            <summary>
            将DataSet转换成压缩的字节数组
            </summary>
            <param name="dataset"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Data.DataSetExtension.ReadFromCompressedByteBuffer(System.Data.DataSet,System.Byte[])">
            <summary>
            从指定的缓冲字节数组中读取DataSet
            </summary>
            <param name="dataset"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="T:FSLib.Extension.FishExtension.Resources.SR">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:FSLib.Extension.FishExtension.Resources.SR.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:FSLib.Extension.FishExtension.Resources.SR.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:FSLib.Extension.FishExtension.Resources.SR.FriendlyTime_DayBeforeYesterday">
            <summary>
              查找类似 前天 的本地化字符串。
            </summary>
        </member>
        <member name="P:FSLib.Extension.FishExtension.Resources.SR.FriendlyTime_Hour">
            <summary>
              查找类似 {0} 小时前 的本地化字符串。
            </summary>
        </member>
        <member name="P:FSLib.Extension.FishExtension.Resources.SR.FriendlyTime_Minute">
            <summary>
              查找类似 {0} 分钟前 的本地化字符串。
            </summary>
        </member>
        <member name="P:FSLib.Extension.FishExtension.Resources.SR.FriendlyTime_Second">
            <summary>
              查找类似 {0} 秒前 的本地化字符串。
            </summary>
        </member>
        <member name="P:FSLib.Extension.FishExtension.Resources.SR.FriendlyTime_Yesterday">
            <summary>
              查找类似 昨天 的本地化字符串。
            </summary>
        </member>
        <member name="P:FSLib.Extension.FishExtension.Resources.SR.Size_Bytes">
            <summary>
              查找类似 字节 的本地化字符串。
            </summary>
        </member>
        <member name="P:FSLib.Extension.FishExtension.Resources.SR.Size_GB">
            <summary>
              查找类似 GB 的本地化字符串。
            </summary>
        </member>
        <member name="P:FSLib.Extension.FishExtension.Resources.SR.Size_KB">
            <summary>
              查找类似 KB 的本地化字符串。
            </summary>
        </member>
        <member name="P:FSLib.Extension.FishExtension.Resources.SR.Size_MB">
            <summary>
              查找类似 MB 的本地化字符串。
            </summary>
        </member>
        <member name="P:FSLib.Extension.FishExtension.Resources.SR.Size_TB">
            <summary>
              查找类似 TB 的本地化字符串。
            </summary>
        </member>
        <member name="P:FSLib.Extension.FishExtension.Resources.SR.String1">
            <summary>
              查找类似 2 的本地化字符串。
            </summary>
        </member>
        <member name="P:FSLib.Extension.FishExtension.Resources.SR.StringExtract_GetSubString_LengthError">
            <summary>
              查找类似 截取长度过短，不应该再存在省略字符串 的本地化字符串。
            </summary>
        </member>
        <member name="P:FSLib.Extension.FishExtension.Resources.SR.TaskAlreadyCancelPending">
            <summary>
              查找类似 当前任务正在取消，无法更改状态 的本地化字符串。
            </summary>
        </member>
        <member name="T:FSLib.Extension.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:FSLib.Extension.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:FSLib.Extension.Properties.Resources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:FSLib.Extension.Properties.Resources.block_16">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:FSLib.Extension.Properties.Resources.tick_16">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="T:FSLib.Attributes.DisplayNameWAttribute">
             <summary>
            
             </summary>
        </member>
    </members>
</doc>
