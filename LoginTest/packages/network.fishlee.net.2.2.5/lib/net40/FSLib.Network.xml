<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FSLib.Network</name>
    </assembly>
    <members>
        <member name="T:FSLib.Network.DataProgressEventArgs">
            <summary>
            数据事件
            </summary>
        </member>
        <member name="P:FSLib.Network.DataProgressEventArgs.BytesCount">
            <summary>
            获得长度
            </summary>
        </member>
        <member name="P:FSLib.Network.DataProgressEventArgs.BytesPassed">
            <summary>
            
            </summary>
        </member>
        <member name="P:FSLib.Network.DataProgressEventArgs.Percentage">
            <summary>
            获得当前操作的进度
            </summary>
        </member>
        <member name="M:FSLib.Network.DataProgressEventArgs.#ctor(System.Int64,System.Int64)">
            <summary>
            创建 <see cref="T:FSLib.Network.DataProgressEventArgs" />  的新实例(DataProgressEventArgs)
            </summary>
        </member>
        <member name="T:FSLib.Network.Http.AbstractFormData">
            <summary>
            一个抽象的表单对象
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.AbstractFormData.GetAllFields">
            <summary>
            获得所有的域
            </summary>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.AbstractFormData.GetAllFiles">
            <summary>
            获得所有要上传的文件
            </summary>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.AbstractFormData.BindData(FSLib.Network.Http.HttpClient,FSLib.Network.Http.HttpContext,FSLib.Network.Http.HttpRequestMessage,FSLib.Network.Http.HttpRequestContent,System.String,System.Int32)">
            <summary>
            绑定内容到请求中
            </summary>
            <param name="client">当前的HTTP客户端</param>
            <param name="context">当前的上下文</param>
            <param name="requestMessage">当前的请求信息</param>
            <param name="content">当前的请求内容对象</param>
            <param name="prefix">前缀：当前绑定之前的父对象路径</param>
            <param name="level">当前绑定的级别</param>
        </member>
        <member name="T:FSLib.Network.Http.AsyncStreamProcessData">
            <summary>
            异步处理的参数
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.AsyncStreamProcessData.Stream">
            <summary>
            获得当前的Stream
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.AsyncStreamProcessData.WriteCallback">
            <summary>
            用于继续处理的回调
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.AsyncStreamProcessData.Exception">
            <summary>
            获得或设置在处理中遇到的异常数据
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.AsyncStreamProcessData.HttpWebRequest">
            <summary>
            获得当前的WebRequest
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.AsyncStreamProcessData.#ctor(System.IO.Stream,FSLib.Network.Http.HttpContext,System.Action{FSLib.Network.Http.AsyncStreamProcessData})">
            <summary>
            创建 <see cref="T:FSLib.Network.Http.AsyncStreamProcessData" />  的新实例(AsyncStreamCopyData)
            </summary>
            <param name="stream"></param>
            <param name="httpContext"></param>
            <param name="writeCallback"></param>
        </member>
        <member name="M:FSLib.Network.Http.AsyncStreamProcessData.NotifyAsyncComplete">
            <summary>
            通知控制器已经完成
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.AsyncStreamProcessData.AsyncStreamWrite(System.Byte[],System.Boolean,System.Action{System.IAsyncResult})">
            <summary>
            异步写入流
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.AsyncStreamProcessData.AsyncStreamWrite(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Action{System.IAsyncResult})">
            <summary>
            异步写入流
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <param name="needContinue"></param>
            <param name="resumeCallback"></param>
            <returns></returns>
        </member>
        <member name="T:FSLib.Network.Http.AttachedFileAttribute">
            <summary>
            表示这是一个附加的表单文件
            </summary>
        </member>
        <member name="T:FSLib.Network.Http.IAuthorization">
            <summary>
            授权信息类
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.IAuthorization.HttpClient">
            <summary>
            获得当前的HttpClient
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.IAuthorization.SetRequest(System.Net.HttpWebRequest,FSLib.Network.Http.HttpContext)">
            <summary>
            将信息写入HttpWebRequest中
            </summary>
            <param name="request">请求</param>
            <param name="httpContext">当前的上下文</param>
        </member>
        <member name="T:FSLib.Network.Http.Authorization">
            <summary>
            授权信息类
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.Authorization.HttpClient">
            <summary>
            获得当前的HttpClient
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.Authorization.SetRequest(System.Net.HttpWebRequest,FSLib.Network.Http.HttpContext)">
            <summary>
            将信息写入HttpWebRequest中
            </summary>
            <param name="request">请求</param>
            <param name="httpContext">当前的上下文</param>
        </member>
        <member name="T:FSLib.Network.Http.IAuthorizationManager">
            <summary>
            身份验证管理类
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.IAuthorizationManager.GetAuthorization(FSLib.Network.Http.HttpContext)">
            <summary>
            将信息写入HttpWebRequest中
            </summary>
            <param name="httpContext">当前的上下文</param>
        </member>
        <member name="T:FSLib.Network.Http.AuthorizationManager">
            <summary>
            多个域名管理的身份验证类
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.AuthorizationManager.Authorizations">
            <summary>
            获得身份认证集合
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.AuthorizationManager.#ctor">
            <summary>
            创建 <see cref="T:FSLib.Network.Http.AuthorizationManager" />  的新实例(BasicAuthorizationManager)
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.AuthorizationManager.AddBasicAuthorization(System.String,System.String,System.String)">
            <summary>
            向授权管理中添加一个基本授权
            </summary>
            <param name="host">域名</param>
            <param name="username">用户名</param>
            <param name="password">密码</param>
        </member>
        <member name="M:FSLib.Network.Http.AuthorizationManager.GetAuthorization(FSLib.Network.Http.HttpContext)">
            <summary>
            将信息写入HttpWebRequest中
            </summary>
            <param name="httpContext">当前的上下文</param>
        </member>
        <member name="T:FSLib.Network.Http.BasicAuthorization">
            <summary>
            适用于普通认证的认证结果
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.BasicAuthorization.UserName">
            <summary>
            获得或设置用户名
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.BasicAuthorization.Password">
            <summary>
            获得或设置密码
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.BasicAuthorization.TextEncoding">
            <summary>
            获得或设置编码格式
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.BasicAuthorization.#ctor(System.String,System.String)">
            <summary>
            创建一个新的对象
            </summary>
            <param name="userName">用户名</param>
            <param name="password">密码</param>
        </member>
        <member name="M:FSLib.Network.Http.BasicAuthorization.SetRequest(System.Net.HttpWebRequest,FSLib.Network.Http.HttpContext)">
            <summary>
            将信息写入HttpWebRequest中
            </summary>
            <param name="request">请求</param>
            <param name="httpContext">当前的上下文</param>
        </member>
        <member name="T:FSLib.Network.Http.CertificateManager">
            <summary>
            默认的证书管理类 
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.CertificateManager.SetRequest(FSLib.Network.Http.HttpRequestMessage)">
            <summary>
            设置请求的证书 
            </summary>
            <param name="message">请求</param>
        </member>
        <member name="M:FSLib.Network.Http.CertificateManager.LookupHostCertificates(System.String)">
            <summary>
            查找设置的主机
            </summary>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.CertificateManager.AddCertificates(System.String,System.Security.Cryptography.X509Certificates.X509Certificate[])">
            <summary>
            添加证书到管理器中 
            </summary>
            <param name="host">对应的主机</param>
            <param name="certificates">要添加的证书</param>
        </member>
        <member name="T:FSLib.Network.Http.CertificateValidationEventArgs">
            <summary>
            证书校验事件参数
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.CertificateValidationEventArgs.Request">
            <summary>
            相关联的请求
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.CertificateValidationEventArgs.Client">
            <summary>
            相关联的客户端
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.CertificateValidationEventArgs.HttpContext">
            <summary>
            相关联的上下文会话
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.CertificateValidationEventArgs.SslPolicyErrors">
            <summary>
            验证中发生的错误
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.CertificateValidationEventArgs.X509Chain">
            <summary>
            验证的证书链
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.CertificateValidationEventArgs.Certificate">
            <summary>
            证书
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.CertificateValidationEventArgs.Result">
            <summary>
            获得或设置验证结果
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.CertificateValidationEventArgs.#ctor(FSLib.Network.Http.HttpContext,System.Net.Security.SslPolicyErrors,System.Security.Cryptography.X509Certificates.X509Chain,System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            新建新的 <see cref="T:FSLib.Network.Http.CertificateValidationEventArgs"/> 对象
            </summary>
            <param name="httpContext"></param>
            <param name="sslPolicyErrors"></param>
            <param name="x509Chain"></param>
            <param name="certificate"></param>
        </member>
        <member name="M:FSLib.Network.Http.CertificateValidationEventArgs.#ctor(System.Net.HttpWebRequest,System.Net.Security.SslPolicyErrors,System.Security.Cryptography.X509Certificates.X509Chain,System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            新建新的 <see cref="T:FSLib.Network.Http.CertificateValidationEventArgs"/> 对象
            </summary>
        </member>
        <member name="T:FSLib.Network.Http.ConnectionInfo">
            <summary>
            当前上下文会话信息
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.ConnectionInfo.Exception">
            <summary>
            获得分析过程中的错误信息
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.ConnectionInfo.RefreshInfo(System.Net.HttpWebRequest,System.Net.HttpWebResponse)">
            <summary>
            刷新信息
            </summary>
            <param name="request"></param>
            <param name="response"></param>
        </member>
        <member name="M:FSLib.Network.Http.ConnectionInfo.SetStream(System.Boolean,System.IO.Stream)">
            <summary>
            刷新访问数据
            </summary>
            <param name="isRequest"></param>
            <param name="stream"></param>
        </member>
        <member name="P:FSLib.Network.Http.ConnectionInfo.Certificate">
            <summary>
            当前的服务器证书
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.ConnectionInfo.ClientCertificate">
            <summary>
            获得最后使用的客户端证书
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.ConnectionInfo.ConnectionAddress">
            <summary>
            获得当前会话连接的远程节点
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.ConnectionInfo.LocalIPEndPoint">
            <summary>
            获得请求的本地端口
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.ConnectionInfo.ProtocolInfo">
            <summary>
            当前的协议版本
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.ConnectionInfo.RawSocket">
            <summary>
            提供一个对原始Socket的只读访问。警告：请不要尝试对此Socket进行任何操作
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.ConnectionInfo.IsSocketConnected">
            <summary>
            返回当前的Socket是否还连接
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.ConnectionInfo.ServerIPAddressList">
            <summary>
            获得已解析的服务器IP列表
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.ConnectionInfo.RemoteIPEndPoint">
            <summary>
            远程节点
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.ConnectionInfo.ServicePoint">
            <summary>
            获得相关联的服务器连接
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.ConnectionInfo.ServicePointSupportPipelining">
            <summary>
            获得相应最后的服务节点是否支持Pipelining
            </summary>
        </member>
        <member name="T:FSLib.Network.Http.ContentPayloadBuilder">
            <summary>
            Request和Response内容承载的包装行为默认实现
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.ContentPayloadBuilder.WrapRequestContent(System.Object,FSLib.Network.Http.RequestWrapRequestContentEventArgs)">
            <summary>
            包装内容
            </summary>
            <param name="ea"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.ContentPayloadBuilder.GetResponseContent``1(``0,FSLib.Network.Http.GetPreferedResponseTypeEventArgs{``0})">
            <summary>
            包装内容
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:FSLib.Network.Http.ContentType">
            <summary>
            请求的内容类型
            </summary>
        </member>
        <member name="F:FSLib.Network.Http.ContentType.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:FSLib.Network.Http.ContentType.PlainText">
            <summary>
            纯文本
            </summary>
        </member>
        <member name="F:FSLib.Network.Http.ContentType.Binary">
            <summary>
            二进制
            </summary>
        </member>
        <member name="F:FSLib.Network.Http.ContentType.Json">
            <summary>
            Application/Json
            </summary>
        </member>
        <member name="F:FSLib.Network.Http.ContentType.Javascript">
            <summary>
            Application/Javascript
            </summary>
        </member>
        <member name="F:FSLib.Network.Http.ContentType.Xml">
            <summary>
            text/xml
            </summary>
        </member>
        <member name="F:FSLib.Network.Http.ContentType.XmlApp">
            <summary>
            application/xml
            </summary>
        </member>
        <member name="F:FSLib.Network.Http.ContentType.Html">
            <summary>
            text/html
            </summary>
        </member>
        <member name="F:FSLib.Network.Http.ContentType.FormData">
            <summary>
            multipart/form-data
            </summary>
        </member>
        <member name="F:FSLib.Network.Http.ContentType.FormUrlEncoded">
            <summary>
            application/x-www-form-urlencoded
            </summary>
        </member>
        <member name="T:FSLib.Network.Http.ContentTypeAttribute">
            <summary>
             表示当前类对象的发送方式
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.ContentTypeAttribute.ContentType">
            <summary>
            获得ContentType值
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.ContentTypeAttribute.#ctor(FSLib.Network.Http.ContentType)">
            <summary>
            创建 <see cref="T:FSLib.Network.Http.ContentTypeAttribute" />  的新实例(RequestPayloadAttribute)
            </summary>
            <param name="contentType"></param>
        </member>
        <member name="T:FSLib.Network.Http.CookiesHandleMethod">
            <summary>
            Cookies处理逻辑
            </summary>
        </member>
        <member name="F:FSLib.Network.Http.CookiesHandleMethod.Auto">
            <summary>
            默认处理逻辑，自动跟踪处理
            </summary>
        </member>
        <member name="F:FSLib.Network.Http.CookiesHandleMethod.Ignore">
            <summary>
            忽略Cookies
            </summary>
        </member>
        <member name="F:FSLib.Network.Http.CookiesHandleMethod.OnlySendWithoutReceive">
            <summary>
            仅发送，不接收
            </summary>
        </member>
        <member name="T:FSLib.Network.Http.Downloader.DownloadInfo">
            <summary>
            下载状态信息
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.Downloader.DownloadInfo.TotalLength">
            <summary>
            总长度
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.Downloader.DownloadInfo.DownloadPosition">
            <summary>
            当前下载的位置
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.Downloader.DownloadInfo.DownloadedLength">
            <summary>
            已下载长度
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.Downloader.DownloadInfo.BufferStream">
            <summary>
            缓冲流
            </summary>
        </member>
        <member name="T:FSLib.Network.Http.Downloader.DownloadState">
            <summary>
            下载状态
            </summary>
        </member>
        <member name="F:FSLib.Network.Http.Downloader.DownloadState.Pedding">
            <summary>
            等待
            </summary>
        </member>
        <member name="F:FSLib.Network.Http.Downloader.DownloadState.Connecting">
            <summary>
            连接服务器
            </summary>
        </member>
        <member name="F:FSLib.Network.Http.Downloader.DownloadState.Downloading">
            <summary>
            正在下载
            </summary>
        </member>
        <member name="F:FSLib.Network.Http.Downloader.DownloadState.Wait">
            <summary>
            等待中
            </summary>
        </member>
        <member name="F:FSLib.Network.Http.Downloader.DownloadState.Success">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:FSLib.Network.Http.Downloader.DownloadState.Error">
            <summary>
            失败
            </summary>
        </member>
        <member name="T:FSLib.Network.Http.Downloader.DownloadTask">
            <summary>
            下载任务
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.Downloader.DownloadTask.Uri">
            <summary>
            源URI
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.Downloader.DownloadTask.HttpMethod">
            <summary>
            请求方法
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.Downloader.DownloadTask.RequestObject">
            <summary>
            请求对象
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.Downloader.DownloadTask.Cookies">
            <summary>
            Cookies
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.Downloader.DownloadTask.WebProxy">
            <summary>
            获得或设置使用的代理
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.Downloader.DownloadTask.TargetStream">
            <summary>
            目标文件
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.Downloader.DownloadTask.PreAllocSpace">
            <summary>
            是否预先分配空间
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.Downloader.DownloadTask.BufferSize">
            <summary>
            缓冲区大小
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.Downloader.DownloadTask.DownloadInfo">
            <summary>
            获得当前的下载状态信息
            </summary>
        </member>
        <member name="T:FSLib.Network.Http.Downloader.MultiThreadDownloader">
            <summary>
            一个可使用多线程技术进行下载的HTTP下载器
            </summary>
        </member>
        <member name="T:FSLib.Network.Http.Downloader.MultiThreadDownloadPiece">
            <summary>
            多线程下载中的块
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.Downloader.MultiThreadDownloadPiece.From">
            <summary>
            结束字节数
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.Downloader.MultiThreadDownloadPiece.To">
            <summary>
            开始字节数
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.Downloader.MultiThreadDownloadPiece.DownloadLength">
            <summary>
            当前负责下载的长度
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.Downloader.MultiThreadDownloadPiece.DownloadInfo">
            <summary>
            获得当前的下载状态信息
            </summary>
        </member>
        <member name="T:FSLib.Network.Http.Downloader.MultiThreadDownloadTask">
            <summary>
            多线程下载任务
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.Downloader.MultiThreadDownloadTask.ThreadCount">
            <summary>
            线程数
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.Downloader.MultiThreadDownloadTask.MiniumPieceSize">
            <summary>
            最小允许的块尺寸
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.Downloader.MultiThreadDownloadTask.PieceCollection">
            <summary>
            下载分块
            </summary>
        </member>
        <member name="T:FSLib.Network.Http.Downloader.MultiThreadPieceCollection">
            <summary>
            下载分片集合
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.Downloader.MultiThreadPieceCollection.GetEnumerator">
            <summary>
            返回一个循环访问集合的枚举器。
            </summary>
            <returns>
            可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1"/>。
            </returns>
        </member>
        <member name="M:FSLib.Network.Http.Downloader.MultiThreadPieceCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            返回一个循环访问集合的枚举数。
            </summary>
            <returns>
            一个可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator"/> 对象。
            </returns>
        </member>
        <member name="T:FSLib.Network.Http.EndPointInfo">
            <summary>
            与请求相关的终端信息
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.EndPointInfo.RemoteEndPoint">
            <summary>
            获得服务器的终端信息
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.EndPointInfo.LocalEndPoint">
            <summary>
            获得本地终端信息
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.EndPointInfo.ServicePoint">
            <summary>
            相关联的IP地址信息
            </summary>
        </member>
        <member name="T:FSLib.Network.Http.ExtensionMethods">
            <summary>
            扩展方法
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.ExtensionMethods.IsValid``1(FSLib.Network.Http.HttpContext{``0})">
            <summary>
            确认当前的对象是否是成功的。此验证将会要求请求已发送且返回成功（状态码小于400），且返回的Result不为null。
            </summary>
            <typeparam name="T">HttpContext的返回值类型</typeparam>
            <param name="ctx">当前的<see cref="T:FSLib.Network.Http.HttpContext`1"/></param>
            <returns>如果判断成功，则返回true。否则返回false。</returns>
            <exception cref="T:System.ArgumentNullException">The value of 'ctx' cannot be null. </exception>
            <exception cref="T:System.InvalidOperationException">如果请求尚未发送，则引发此异常. </exception>
        </member>
        <member name="M:FSLib.Network.Http.ExtensionMethods.RequestRange(FSLib.Network.Http.HttpContext,System.Nullable{System.Collections.Generic.KeyValuePair{System.Int64,System.Nullable{System.Int64}}})">
            <summary>
            设置请求的域
            </summary>
            <param name="context">当前HTTP会话</param>
            <param name="range">请求的区域</param>
        </member>
        <member name="M:FSLib.Network.Http.ExtensionMethods.SendDelay(FSLib.Network.Http.HttpContext,System.TimeSpan)">
            <summary>
            设置发送延迟。设置此标记后，发送前将会等待指定的时间后再发送。
            </summary>
            <param name="context"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.ExtensionMethods.SendDelay``1(FSLib.Network.Http.HttpContext{``0},System.TimeSpan)">
            <summary>
            设置发送延迟。设置此标记后，发送前将会等待指定的时间后再发送。
            </summary>
            <param name="context"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.ExtensionMethods.SetAcceptJson``1(FSLib.Network.Http.HttpContext{``0})">
            <summary>
            设置此请求接受JSON响应
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.ExtensionMethods.SetAcceptXml``1(FSLib.Network.Http.HttpContext{``0})">
            <summary>
            设置此请求接受XML响应
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.ExtensionMethods.SetAccept(FSLib.Network.Http.HttpContext,System.String)">
            <summary>
            设置此请求接受的结果类型
            </summary>
            <param name="context"></param>
            <param name="accpet"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.ExtensionMethods.AddRequestHeader``1(FSLib.Network.Http.HttpContext{``0},System.Net.HttpRequestHeader,System.String)">
            <summary>
            添加额外的标头（此方法用于添加额外的标头，特殊的标头需要直接设置相关属性）
            </summary>
            <param name="context"></param>
            <param name="header">标头</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.ExtensionMethods.AddRequestHeader(FSLib.Network.Http.HttpContext,System.Net.HttpRequestHeader,System.String)">
            <summary>
            添加额外的标头（此方法用于添加额外的标头，特殊的标头需要直接设置相关属性）
            </summary>
            <param name="context"></param>
            <param name="header">标头</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.ExtensionMethods.AddRequestHeader``1(FSLib.Network.Http.HttpContext{``0},System.String,System.String)">
            <summary>
            添加额外的标头（此方法用于添加额外的标头，特殊的标头需要直接设置相关属性）
            </summary>
            <param name="context"></param>
            <param name="header">标头</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.ExtensionMethods.AddRequestHeader(FSLib.Network.Http.HttpContext,System.String,System.String)">
            <summary>
            添加额外的标头（此方法用于添加额外的标头，特殊的标头需要直接设置相关属性）
            </summary>
            <param name="context"></param>
            <param name="header">标头</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.ExtensionMethods.SetRefer``1(``0,System.String)">
            <summary>
            设置请求引用页，并返回自己
            </summary>
            <param name="context">当前的 <typeparam name="T">类型</typeparam></param>
            <param name="refer">引用页</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.ExtensionMethods.SetAllowAutoRedirect``1(``0,System.Boolean)">
            <summary>
            设置是否允许自动重定向
            </summary>
            <typeparam name="T">当前的实际请求内容类型</typeparam>
            <param name="context">当前请求类型为 <typeparamref name="T" /> 的上下文</param>
            <param name="enabled">是否允许自动重定向，如果允许，则为 <see langword="true" />，否则为 <see langword="false" /> 。默认为<see langword="true" /> 。</param>
        </member>
        <member name="M:FSLib.Network.Http.ExtensionMethods.EnableAutoRedirect``1(``0)">
            <summary>
            设置是允许自动重定向
            </summary>
            <typeparam name="T">当前的实际请求内容类型</typeparam>
            <param name="context">当前请求类型为 <typeparamref name="T" /> 的上下文</param>
        </member>
        <member name="M:FSLib.Network.Http.ExtensionMethods.DisableAutoRedirect``1(``0)">
            <summary>
            设置是不允许自动重定向
            </summary>
            <typeparam name="T">当前的实际请求内容类型</typeparam>
            <param name="context">当前请求类型为 <typeparamref name="T" /> 的上下文</param>
        </member>
        <member name="M:FSLib.Network.Http.ExtensionMethods.FromOrigin``1(``0,System.String)">
            <summary>
            设置请求来源Origin请求头
            </summary>
            <typeparam name="T">当前的实际请求内容类型</typeparam>
            <param name="context">当前请求类型为 <typeparamref name="T" /> 的上下文</param>
            <param name="origin">当前请求来源</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.ExtensionMethods.ViaXmlHttpRequest``1(``0,System.Boolean)">
            <summary>
            设置当前的请求头（XmlHttpRequest）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="context">上下文</param>
            <param name="enabled">如果为 <see langword="true" />，则会设置此标头；如果为 <see langword="false" />，则会清除此标头</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.ExtensionMethods.Timeout``1(``0,System.Int32)">
            <summary>
            设置请求超时时间
            </summary>
            <typeparam name="T"></typeparam>
            <param name="context">上下文</param>
            <param name="timeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.ExtensionMethods.ReadWriteTimeout``1(``0,System.Int32)">
            <summary>
            设置读写超时
            </summary>
            <typeparam name="T"></typeparam>
            <param name="context">上下文</param>
            <param name="timeout">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.ExtensionMethods.CookiesHandle``1(``0,FSLib.Network.Http.CookiesHandleMethod)">
            <summary>
            设置当前请求的Cookies处理模式
            </summary>
            <typeparam name="T"></typeparam>
            <param name="context">上下文</param>
            <param name="method">处理模式</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.ExtensionMethods.WithSpeedMeter``1(``0)">
            <summary>
            开启当前上下文的性能速度计数
            </summary>
            <typeparam name="T"></typeparam>
            <param name="context">上下文</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.ExtensionMethods.WithLocalCache``1(``0,System.String,System.Nullable{System.DateTime})">
            <summary>
            设置本地的缓存信息以便于提交给服务器确认是否有更新
            </summary>
            <typeparam name="T"></typeparam>
            <param name="context">当前上下文</param>
            <param name="etag">ETAG</param>
            <param name="modifiedSince">最后修改时间</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.ExtensionMethods.LookupCookiesForUri(FSLib.Network.Http.HttpClient,System.String)">
            <summary>
            在指定的HttpClient中查找与指定的Uri关联的所有Cookies
            </summary>
            <param name="client">客户端</param>
            <param name="url">地址</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.ExtensionMethods.LookupCookiesForUri(FSLib.Network.Http.HttpClient,System.Uri)">
            <summary>
            在指定的HttpClient中查找与指定的Uri关联的所有Cookies
            </summary>
            <param name="client">客户端</param>
            <param name="uri">URI</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.ExtensionMethods.UseProxy(FSLib.Network.Http.HttpClient,System.Net.IWebProxy)">
            <summary>
            使用指定的代理服务器
            </summary>
            <param name="client"></param>
            <param name="proxy"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.ExtensionMethods.UseProxy(FSLib.Network.Http.HttpClient,System.Uri,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            使用指定的代理服务器
            </summary>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.ExtensionMethods.FindByName(System.Net.CookieCollection,System.String)">
            <summary>
            按照名称查找Cookies，如果没有找到，则返回 null。
            </summary>
            <param name="container">当前的上下文</param>
            <param name="name">Cookies名称</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.ExtensionMethods.FindResponseCookie(FSLib.Network.Http.HttpContext,System.String)">
            <summary>
            在响应的Cookies中查找指定名称的Cookeis
            </summary>
            <param name="context">当前的上下文</param>
            <param name="name">Cookies名称</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.ExtensionMethods.GetResponseHeader(FSLib.Network.Http.HttpContext,System.String)">
            <summary>
            查找指定的响应标头
            </summary>
            <param name="context"></param>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.ExtensionMethods.GetResponseHeader(FSLib.Network.Http.HttpContext,System.Net.HttpResponseHeader)">
            <summary>
            查找指定的响应标头
            </summary>
            <param name="context"></param>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.ExtensionMethods.GetResponseHeader(FSLib.Network.Http.HttpContext,System.Int32)">
            <summary>
            查找指定的响应标头
            </summary>
            <param name="context"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.ExtensionMethods.GetWebRequestHeader(FSLib.Network.Http.HttpContext,System.String)">
            <summary>
            查找指定的请求标头
            </summary>
            <param name="context"></param>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.ExtensionMethods.GetWebRequestHeader(FSLib.Network.Http.HttpContext,System.Net.HttpResponseHeader)">
            <summary>
            查找指定的请求标头
            </summary>
            <param name="context"></param>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.ExtensionMethods.GetWebRequestHeader(FSLib.Network.Http.HttpContext,System.Int32)">
            <summary>
            查找指定的请求标头
            </summary>
            <param name="context"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.ExtensionMethods.GetRequestHeader(FSLib.Network.Http.HttpContext,System.String)">
            <summary>
            查找指定的请求标头
            </summary>
            <param name="context"></param>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.ExtensionMethods.GetRequestHeader(FSLib.Network.Http.HttpContext,System.Net.HttpResponseHeader)">
            <summary>
            查找指定的请求标头
            </summary>
            <param name="context"></param>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.ExtensionMethods.GetRequestHeader(FSLib.Network.Http.HttpContext,System.Int32)">
            <summary>
            查找指定的请求标头
            </summary>
            <param name="context"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.ExtensionMethods.CopyTo(System.Net.WebHeaderCollection,System.Net.WebHeaderCollection,System.Boolean)">
            <summary>
            将 <paramref name="collectionSrc"/> 中的头全部复制到 <paramref name="collectionDest"/> 中
            </summary>
            <param name="collectionSrc">来源</param>
            <param name="collectionDest">目标</param>
            <param name="overwrite">如果为 <langword>true</langword>，则 <paramref name="collectionSrc"/> 中的同名标头将会覆盖 <paramref name="collectionDest"/> 中的值</param>
        </member>
        <member name="T:FSLib.Network.Http.ExtraRequestInfo">
            <summary>
            额外的不常用的请求信息
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.ExtraRequestInfo.ContentType">
            <summary>
            内容类型
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.ExtraRequestInfo.Disable302Redirection">
            <summary>
            是否禁止302跳转。如果设置为 <see langword="true" />，则当服务器返回302/301跳转时，视为错误
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.ExtraRequestInfo.ErrorResponseObject">
            <summary>
            获得或设置如果请求发生了HTTP协议级别的错误（返回码大于400小于等于599），那么返回什么样的内容 
            </summary>
            <value>The response object.</value>
            <remarks>
            <para>此处设计用于当服务器返回禁止类型错误时，自动返回期望的结果。</para>
            <para>这通常用于在API接口等，对于40x错误有统一的返回结果，通常针对JSON处理</para>
            <para>因此，这里的设置仅针对40x代码且返回的是json时起效</para>
            </remarks>
        </member>
        <member name="T:FSLib.Network.Http.FormNameAttribute">
            <summary>
            设置一个表单的别名
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.FormNameAttribute.Name">
            <summary>
            获得表单名
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.FormNameAttribute.#ctor(System.String)">
            <summary>
            创建 <see cref="T:FSLib.Network.Http.FormNameAttribute" />  的新实例(FormNameAttribute)
            </summary>
        </member>
        <member name="T:FSLib.Network.Http.FsLibNetworkHttpExtensionMethod">
            <summary>
            HTTP相关扩展方法
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.FsLibNetworkHttpExtensionMethod.IsSuccess(FSLib.Network.Http.HttpContext)">
            <summary>
            判断当前请求是否成功
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.FsLibNetworkHttpExtensionMethod.GetExceptionMessage(FSLib.Network.Http.HttpContext,System.String)">
            <summary>
            获得错误信息
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="T:FSLib.Network.Http.GetPreferedResponseTypeEventArgs`1">
            <summary>
            包含在获得对应的数据处理类事件中将会用到的参数
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:FSLib.Network.Http.GetPreferedResponseTypeEventArgs`1.#ctor(FSLib.Network.Http.HttpClient,FSLib.Network.Http.HttpContext,`0,System.String,System.EventHandler{FSLib.Network.Http.ResponseStreamContent.RequireProcessStreamEventArgs},System.IO.Stream,FSLib.Network.Http.ExtraRequestInfo)">
            <summary>
            创建 <see cref="T:FSLib.Network.Http.GetPreferedResponseTypeEventArgs" />  的新实例(GetPreferedResponseTypeEventArgs)
            </summary>
            <param name="httpClient">当前的客户端</param>
            <param name="httpContext">当前的上下文环境</param>
            <param name="targetObject">已有目标数据</param>
            <param name="saveToFilePath">要将当前请求写入的文件路径</param>
            <param name="streamInvoker">处理当前数据片段的事件处理句柄</param>
            <param name="targetStream">要写入的目标流</param>
        </member>
        <member name="P:FSLib.Network.Http.GetPreferedResponseTypeEventArgs`1.TargetObject">
            <summary>
            获得已有目标数据
            </summary>
        </member>
        <member name="T:FSLib.Network.Http.GetPreferedResponseTypeEventArgs">
            <summary>
            包含在获得对应的数据处理类事件中将会用到的参数
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.GetPreferedResponseTypeEventArgs.HttpClient">
            <summary>
            获得当前的客户端
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.GetPreferedResponseTypeEventArgs.HttpContext">
            <summary>
            获得当前的上下文环境
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.GetPreferedResponseTypeEventArgs.ResultType">
            <summary>
            获得目标类型
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.GetPreferedResponseTypeEventArgs.TargetObject">
            <summary>
            获得已有目标数据
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.GetPreferedResponseTypeEventArgs.SaveToFilePath">
            <summary>
            获得要将当前请求写入的文件路径
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.GetPreferedResponseTypeEventArgs.StreamInvoker">
            <summary>
            获得处理当前数据片段的事件处理句柄
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.GetPreferedResponseTypeEventArgs.TargetStream">
            <summary>
            获得要写入的目标流
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.GetPreferedResponseTypeEventArgs.ResponseContent">
            <summary>
            获得或设置当前的数据处理类
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.GetPreferedResponseTypeEventArgs.Handled">
            <summary>
            获得或设置是否已经结束处理
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.GetPreferedResponseTypeEventArgs.ExtraRequestInfo">
            <summary>
            额外的请求数据信息
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.GetPreferedResponseTypeEventArgs.#ctor(FSLib.Network.Http.HttpClient,FSLib.Network.Http.HttpContext,System.Type,System.Object,System.String,System.EventHandler{FSLib.Network.Http.ResponseStreamContent.RequireProcessStreamEventArgs},System.IO.Stream,FSLib.Network.Http.ExtraRequestInfo)">
            <summary>
            创建 <see cref="T:FSLib.Network.Http.GetPreferedResponseTypeEventArgs" />  的新实例(GetPreferedResponseTypeEventArgs)
            </summary>
            <param name="httpClient">当前的客户端</param>
            <param name="httpContext">当前的上下文环境</param>
            <param name="resultType">目标类型</param>
            <param name="targetObject">已有目标数据</param>
            <param name="saveToFilePath">要将当前请求写入的文件路径</param>
            <param name="streamInvoker">处理当前数据片段的事件处理句柄</param>
            <param name="targetStream">要写入的目标流</param>
        </member>
        <member name="E:FSLib.Network.Http.GlobalEvents.AfterRequest">
            <summary>
            完成发送请求
            </summary>
        </member>
        <member name="E:FSLib.Network.Http.GlobalEvents.BeforeRequest">
            <summary>
            准备发送请求
            </summary>
        </member>
        <member name="E:FSLib.Network.Http.GlobalEvents.BeforeRequestGetPreferedResponseType">
            <summary>
            获得对应的数据处理类
            </summary>
        </member>
        <member name="E:FSLib.Network.Http.GlobalEvents.BeforeRequestWrapRequestContent">
            <summary>
            请求将发送数据包装为请求承载数据
            </summary>
        </member>
        <member name="E:FSLib.Network.Http.GlobalEvents.RequestCancelled">
            <summary>
            WEB请求已取消
            </summary>
        </member>
        <member name="E:FSLib.Network.Http.GlobalEvents.RequestEnd">
            <summary>
            WEB请求结束
            </summary>
        </member>
        <member name="E:FSLib.Network.Http.GlobalEvents.HttpContextCreated">
            <summary>
            Context已创建
            </summary>
        </member>
        <member name="E:FSLib.Network.Http.GlobalEvents.RequestFailed">
            <summary>
            请求发送失败
            </summary>
        </member>
        <member name="E:FSLib.Network.Http.GlobalEvents.RequestGetPreferedResponseType">
            <summary>
            获得对应的数据处理类
            </summary>
        </member>
        <member name="E:FSLib.Network.Http.GlobalEvents.RequestResubmit">
            <summary>
            当前请求被重新发送
            </summary>
        </member>
        <member name="E:FSLib.Network.Http.GlobalEvents.RequestSuccess">
            <summary>
            WEB请求成功
            </summary>
        </member>
        <member name="E:FSLib.Network.Http.GlobalEvents.RequestValidateResponse">
            <summary>
            请求验证内容
            </summary>
        </member>
        <member name="E:FSLib.Network.Http.GlobalEvents.RequestWrapRequestContent">
            <summary>
            请求将发送数据包装为请求承载数据
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.GlobalEvents.OnRequestResubmit">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.GlobalEvents.RequestResubmit"/> 事件
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.GlobalEvents.OnAfterRequest(System.Object,FSLib.Network.Http.WebEventArgs)">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.GlobalEvents.AfterRequest" /> 事件
            </summary>
            <param name="sender">引发此事件的源对象</param>
            <param name="ea">包含此事件的参数</param>
        </member>
        <member name="M:FSLib.Network.Http.GlobalEvents.OnBeforeRequest(System.Object,FSLib.Network.Http.WebEventArgs)">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.GlobalEvents.BeforeRequest" /> 事件
            </summary>
            <param name="sender">引发此事件的源对象</param>
            <param name="ea">包含此事件的参数</param>
        </member>
        <member name="M:FSLib.Network.Http.GlobalEvents.OnRequestCancelled(System.Object,FSLib.Network.Http.WebEventArgs)">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.GlobalEvents.RequestCancelled" /> 事件
            </summary>
            <param name="sender">引发此事件的源对象</param>
            <param name="ea">包含此事件的参数</param>
        </member>
        <member name="M:FSLib.Network.Http.GlobalEvents.OnRequestEnd(System.Object,FSLib.Network.Http.WebEventArgs)">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.GlobalEvents.RequestEnd" /> 事件
            </summary>
            <param name="sender">引发此事件的源对象</param>
            <param name="ea">包含此事件的参数</param>
        </member>
        <member name="M:FSLib.Network.Http.GlobalEvents.OnHttpContextCreated(System.Object,FSLib.Network.Http.WebEventArgs)">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.GlobalEvents.HttpContextCreated" /> 事件
            </summary>
            <param name="sender">引发此事件的源对象</param>
            <param name="ea">包含此事件的参数</param>
        </member>
        <member name="M:FSLib.Network.Http.GlobalEvents.OnRequestFailed(System.Object,FSLib.Network.Http.WebEventArgs)">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.GlobalEvents.RequestFailed" /> 事件
            </summary>
            <param name="sender">引发此事件的源对象</param>
            <param name="ea">包含此事件的参数</param>
        </member>
        <member name="M:FSLib.Network.Http.GlobalEvents.OnRequestSuccess(System.Object,FSLib.Network.Http.WebEventArgs)">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.GlobalEvents.RequestSuccess" /> 事件
            </summary>
            <param name="sender">引发此事件的源对象</param>
            <param name="ea">包含此事件的参数</param>
        </member>
        <member name="M:FSLib.Network.Http.GlobalEvents.OnBeforeRequestGetPreferedResponseType(System.Object,FSLib.Network.Http.GetPreferedResponseTypeEventArgs)">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.GlobalEvents.BeforeRequestGetPreferedResponseType" /> 事件
            </summary>
            <param name="sender">引发此事件的源对象</param>
            <param name="ea">包含此事件的参数</param>
        </member>
        <member name="M:FSLib.Network.Http.GlobalEvents.OnBeforeRequestWrapRequestContent(System.Object,FSLib.Network.Http.RequestWrapRequestContentEventArgs)">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.GlobalEvents.BeforeRequestWrapRequestContent" /> 事件
            </summary>
            <param name="sender">引发此事件的源对象</param>
            <param name="ea">包含此事件的参数</param>
        </member>
        <member name="M:FSLib.Network.Http.GlobalEvents.OnRequestGetPreferedResponseType(System.Object,FSLib.Network.Http.GetPreferedResponseTypeEventArgs)">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.GlobalEvents.RequestGetPreferedResponseType" /> 事件
            </summary>
            <param name="sender">引发此事件的源对象</param>
            <param name="ea">包含此事件的参数</param>
        </member>
        <member name="M:FSLib.Network.Http.GlobalEvents.OnRequestValidateResponse(System.Object)">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.GlobalEvents.RequestValidateResponse" /> 事件
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.GlobalEvents.OnRequestWrapRequestContent(System.Object,FSLib.Network.Http.RequestWrapRequestContentEventArgs)">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.GlobalEvents.RequestWrapRequestContent" /> 事件
            </summary>
            <param name="sender">引发此事件的源对象</param>
            <param name="ea">包含此事件的参数</param>
        </member>
        <member name="T:FSLib.Network.Http.HttpClient">
            <summary>
            类型 HttpClient
            </summary>
            <summary>
            简化用法
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpClient.DefaultMonitor">
            <summary>
            获得或设置默认的HTTP监控
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpClient.CheckCertificateRevocationList">
            <summary>
            [全局] 获得或设置是否检查证书吊销列表，等同于 <code>ServicePointManager.CheckCertificateRevocationList</code>
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpClient.DefaultConnectionLimit">
            <summary>
            获得或设置最大连接数，等同于 <code>ServicePointManager.DefaultConnectionLimit</code>
            </summary>
        </member>
        <member name="E:FSLib.Network.Http.HttpClient.ServerCertificateValidation">
            <summary>
            全局：校验服务器证书
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.OnServerCertificateValidation(System.Object,FSLib.Network.Http.CertificateValidationEventArgs)">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.HttpClient.ServerCertificateValidation"/> 事件
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:FSLib.Network.Http.HttpClient.Setting">
            <summary>
            获得或设置参数
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpClient.Monitor">
            <summary>
            获得当前客户端的监控类
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpClient.HttpHandler">
            <summary>
            获得或创建HTTP请求句柄
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpClient.CookieContainer">
            <summary>
            获得或设置使用的CookiesContainer
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.#ctor(FSLib.Network.Http.HttpSetting,FSLib.Network.Http.HttpHandler,System.Net.CookieContainer)">
            <summary>
            创建 <see cref="T:FSLib.Network.Http.HttpClient" />  的新实例(HttpClient)
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.ImportCookies(System.String,System.Uri,System.Nullable{System.DateTime})">
            <summary>
            向当前客户端中导入Cookies
            </summary>
            <param name="cookies"></param>
            <param name="uri"></param>
            <param name="expiresTime">过期时间</param>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.Clear">
            <summary>
            重置客户端状态，清理诸如Cookies等存储
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.ProcessCookies(FSLib.Network.Http.HttpContext)">
            <summary>
            自定义处理Cookies。仅在启用非标准cookeis解析的时候起效
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="E:FSLib.Network.Http.HttpClient.ResolveToUri">
            <summary>
            将要进行地址解析
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.ResolveUri(System.Nullable{System.Net.HttpRequestHeader},System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            将URL字符串分析成URI
            </summary>
            <param name="url"></param>
            <param name="header">当前解析使用的标头。如果为 <see langword="null" />，则为主要地址</param>
            <param name="contextData">当前的上下文数据</param>
            <returns></returns>
        </member>
        <member name="E:FSLib.Network.Http.HttpClient.RequestGetPreferedResponseType">
            <summary>
            获得对应的数据处理类
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.OnRequestGetPreferedResponseType(System.Object,FSLib.Network.Http.GetPreferedResponseTypeEventArgs)">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.HttpClient.RequestGetPreferedResponseType" /> 事件
            </summary>
            <param name="sender">引发此事件的源对象</param>
            <param name="ea">包含此事件的参数</param>
        </member>
        <member name="E:FSLib.Network.Http.HttpClient.BeforeRequestGetPreferedResponseType">
            <summary>
            获得对应的数据处理类
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.OnBeforeRequestGetPreferedResponseType(System.Object,FSLib.Network.Http.GetPreferedResponseTypeEventArgs)">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.HttpClient.BeforeRequestGetPreferedResponseType" /> 事件
            </summary>
            <param name="sender">引发此事件的源对象</param>
            <param name="ea">包含此事件的参数</param>
        </member>
        <member name="E:FSLib.Network.Http.HttpClient.BeforeWrapRequestContent">
            <summary>
            请求将发送数据包装为请求承载数据
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.OnBeforeWrapRequestContent(System.Object,FSLib.Network.Http.RequestWrapRequestContentEventArgs)">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.HttpClient.BeforeWrapRequestContent" /> 事件
            </summary>
            <param name="sender">引发此事件的源对象</param>
            <param name="ea">包含此事件的参数</param>
        </member>
        <member name="E:FSLib.Network.Http.HttpClient.RequestWrapRequestContent">
            <summary>
            请求将发送数据包装为请求承载数据
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.OnRequestWrapRequestContent(System.Object,FSLib.Network.Http.RequestWrapRequestContentEventArgs)">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.HttpClient.RequestWrapRequestContent" /> 事件
            </summary>
            <param name="sender">引发此事件的源对象</param>
            <param name="ea">包含此事件的参数</param>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.GetPreferedResponseType``1(FSLib.Network.Http.HttpContext,System.EventHandler{FSLib.Network.Http.ResponseStreamContent.RequireProcessStreamEventArgs},``0,System.IO.Stream,System.String,FSLib.Network.Http.ExtraRequestInfo)">
            <summary>
            获得对应的数据处理类
            </summary>
            <param name="ctx"></param>
            <param name="streamInvoker"></param>
            <param name="result"></param>
            <param name="targetStream">目标流</param>
            <param name="saveToFilePath">希望保存到的目标文件路径</param>
            <param name="extraRequestInfo">额外的请求数据信息</param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.Create(FSLib.Network.Http.HttpRequestMessage)">
            <summary>
            创建请求
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.WrapRequestContent(System.Object,System.Nullable{FSLib.Network.Http.ContentType},FSLib.Network.Http.ExtraRequestInfo)">
            <summary>
            对请求数据进行包装，转换为合适的请求类型，并返回对应的负载类型
            </summary>
            <param name="data">要发送的数据</param>
            <param name="contentType">对应的负载类型</param>
            <param name="extraRequestInfo">额外的请求数据</param>
            <returns>经过包装的 <see cref="T:FSLib.Network.Http.HttpRequestContent"/> 对象</returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.WrapRequestDataToObjectContent``1(``0,FSLib.Network.Http.ContentType)">
            <summary>
            将数据包装为指定的请求对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="contentType"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.WrapRequestDataToFormDataContent(System.Collections.Generic.IDictionary{System.String,System.String},FSLib.Network.Http.ContentType)">
            <summary>
            将数据包装为指定的请求对象
            </summary>
            <param name="data"></param>
            <param name="contentType"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.WrapRequestDataToStringContent(System.String,FSLib.Network.Http.ContentType)">
            <summary>
            将数据包装为指定的请求对象
            </summary>
            <param name="data"></param>
            <param name="contentType"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.WrapRequestDataToStreamContent(System.IO.Stream,FSLib.Network.Http.ContentType)">
            <summary>
            将数据包装为指定的请求对象
            </summary>
            <param name="data"></param>
            <param name="contentType"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.WrapRequestDataToByteBufferContent(System.Byte[],FSLib.Network.Http.ContentType)">
            <summary>
            将数据包装为指定的请求对象
            </summary>
            <param name="data"></param>
            <param name="contentType"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.WrapRequestDataToXmlContent``1(``0,FSLib.Network.Http.ContentType)">
            <summary>
            将数据包装为指定的请求对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="contentType"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.WrapRequestDataToJsonContent``1(``0)">
            <summary>
            将数据包装为指定的请求对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.Create``1(FSLib.Network.Http.HttpMethod,System.Uri,System.Uri,System.Object,``0,System.String,System.EventHandler{FSLib.Network.Http.ResponseStreamContent.RequireProcessStreamEventArgs},System.Boolean,System.Nullable{System.Boolean},System.Collections.Generic.Dictionary{System.String,System.Object},System.Net.WebHeaderCollection,System.Nullable{FSLib.Network.Http.ContentType},System.Nullable{System.Boolean},System.IO.Stream,FSLib.Network.Http.ExtraRequestInfo)">
            <summary>
            创建网络请求
            </summary>
            <param name="uri">请求地址</param>
            <param name="method">方法</param>
            <param name="data">写入的数据</param>
            <param name="refer">引用页</param>
            <param name="saveToFile">保存文件地址</param>
            <param name="streamInvoker">流读取对象，仅当返回结果为流时可用</param>
            <param name="async"></param>
            <param name="result"></param>
            <param name="isXhr"></param>
            <param name="contextData">关联的上下文数据</param>
            <param name="headers">额外的要发出去的标头</param>
            <param name="contentType">设置当发送对象类型时，设置发送类型</param>
            <param name="allowAutoRedirect">设置当服务器发送3xx代码时是否自动跟踪跳转</param>
            <param name="targetStream">要写入的目标流</param>
            <param name="extra">额外的请求数据</param>
            <typeparam name="TResult">结果类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.Create``1(FSLib.Network.Http.HttpMethod,System.Uri,System.String,System.Object,``0,System.String,System.EventHandler{FSLib.Network.Http.ResponseStreamContent.RequireProcessStreamEventArgs},System.Boolean,System.Nullable{System.Boolean},System.Collections.Generic.Dictionary{System.String,System.Object},System.Net.WebHeaderCollection,System.Nullable{FSLib.Network.Http.ContentType},System.Nullable{System.Boolean},System.IO.Stream,FSLib.Network.Http.ExtraRequestInfo)">
            <summary>
            创建网络请求
            </summary>
            <param name="uri">请求地址</param>
            <param name="method">方法</param>
            <param name="data">写入的数据</param>
            <param name="refer">引用页</param>
            <param name="saveToFile">保存文件地址</param>
            <param name="streamInvoker">流读取对象，仅当返回结果为流时可用</param>
            <param name="async"></param>
            <param name="result"></param>
            <param name="isXhr"></param>
            <param name="contextData">关联的上下文数据</param>
            <param name="headers">额外的要发出去的标头</param>
            <param name="contentType">设置当发送对象类型时，设置发送类型</param>
            <param name="allowAutoRedirect">设置当服务器发送3xx代码时是否自动跟踪跳转</param>
            <param name="targetStream">要写入的目标流</param>
            <param name="extra">额外的请求数据</param>
            <typeparam name="TResult">结果类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.Create``1(System.String,System.Uri,System.String,System.Object,``0,System.String,System.EventHandler{FSLib.Network.Http.ResponseStreamContent.RequireProcessStreamEventArgs},System.Boolean,System.Nullable{System.Boolean},System.Collections.Generic.Dictionary{System.String,System.Object},System.Net.WebHeaderCollection,System.Nullable{FSLib.Network.Http.ContentType},System.Nullable{System.Boolean},System.IO.Stream,FSLib.Network.Http.ExtraRequestInfo)">
            <summary>
            创建网络请求
            </summary>
            <param name="uri">请求地址</param>
            <param name="method">方法</param>
            <param name="data">写入的数据</param>
            <param name="refer">引用页</param>
            <param name="saveToFile">保存文件地址</param>
            <param name="streamInvoker">流读取对象，仅当返回结果为流时可用</param>
            <param name="async"></param>
            <param name="result"></param>
            <param name="isXhr"></param>
            <param name="contextData">关联的上下文数据</param>
            <param name="headers">额外的要发出去的标头</param>
            <param name="contentType">设置当发送对象类型时，设置发送类型</param>
            <param name="allowAutoRedirect">设置当服务器发送3xx代码时是否自动跟踪跳转</param>
            <param name="targetStream">要写入的目标流</param>
            <param name="extra">额外的请求数据</param>
            <typeparam name="TResult">结果类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.Create``1(FSLib.Network.Http.HttpMethod,System.String,System.String,System.Object,``0,System.String,System.EventHandler{FSLib.Network.Http.ResponseStreamContent.RequireProcessStreamEventArgs},System.Boolean,System.Nullable{System.Boolean},System.Collections.Generic.Dictionary{System.String,System.Object},System.Net.WebHeaderCollection,System.Nullable{FSLib.Network.Http.ContentType},System.Nullable{System.Boolean},System.IO.Stream,FSLib.Network.Http.ExtraRequestInfo)">
            <summary>
            创建网络请求
            </summary>
            <param name="url">请求地址</param>
            <param name="method">方法</param>
            <param name="data">写入的数据</param>
            <param name="refer">引用页</param>
            <param name="saveToFile">保存文件地址</param>
            <param name="streamInvoker">流读取对象，仅当返回结果为流时可用</param>
            <param name="async">是否是异步发送</param>
            <param name="result">预先设置结果类型</param>
            <param name="isXhr">是否增加AJAX请求头标记</param>
            <param name="contextData">关联的上下文数据</param>
            <param name="headers">要跟随请求一起发送的HTTP标头</param>
            <param name="contentType">设置当发送对象类型时，设置发送类型。不设置或传递null值将会自动判断</param>
            <param name="allowAutoRedirect">是否允许自动重定向</param>
            <param name="targetStream">要写入的目标流</param>
            <param name="extra">额外的请求数据</param>
            <typeparam name="TResult">结果类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.CopyDefaultSettings(FSLib.Network.Http.HttpContext)">
            <summary>
            复制默认设置到对应的HttpContext中，供初始化请求使用
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.GetPreferContentType(System.Type)">
            <summary>
            判断指定的对象是否定义了JSON请求结果属性
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="E:FSLib.Network.Http.HttpClient.BeforeRequest">
            <summary>
            准备发送请求
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.OnBeforeRequest(FSLib.Network.Http.WebEventArgs)">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.HttpClient.BeforeRequest" /> 事件
            </summary>
            <param name="ea">包含此事件的参数</param>
        </member>
        <member name="E:FSLib.Network.Http.HttpClient.AfterRequest">
            <summary>
            完成发送请求
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.OnAfterRequest(FSLib.Network.Http.WebEventArgs)">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.HttpClient.AfterRequest" /> 事件
            </summary>
            <param name="ea">包含此事件的参数</param>
        </member>
        <member name="E:FSLib.Network.Http.HttpClient.RequestSuccess">
            <summary>
            WEB请求成功
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.OnRequestSuccess(FSLib.Network.Http.WebEventArgs)">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.HttpClient.RequestSuccess" /> 事件
            </summary>
            <param name="ea">包含此事件的参数</param>
        </member>
        <member name="E:FSLib.Network.Http.HttpClient.RequestFailed">
            <summary>
            请求发送失败
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.OnRequestFailed(FSLib.Network.Http.WebEventArgs)">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.HttpClient.RequestFailed" /> 事件
            </summary>
            <param name="ea">包含此事件的参数</param>
        </member>
        <member name="E:FSLib.Network.Http.HttpClient.RequestCancelled">
            <summary>
            请求发送取消
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.OnRequestCancelled(FSLib.Network.Http.WebEventArgs)">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.HttpClient.RequestFailed" /> 事件
            </summary>
            <param name="ea">包含此事件的参数</param>
        </member>
        <member name="E:FSLib.Network.Http.HttpClient.RequestEnd">
            <summary>
            请求发送取消
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.OnRequestEnd(FSLib.Network.Http.WebEventArgs)">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.HttpClient.RequestFailed" /> 事件
            </summary>
            <param name="ea">包含此事件的参数</param>
        </member>
        <member name="E:FSLib.Network.Http.HttpClient.HttpContextCreated">
            <summary>
            HTTP会话被创建
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.OnHttpContextCreated(FSLib.Network.Http.WebEventArgs)">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.HttpClient.HttpContextCreated" /> 事件
            </summary>
            <param name="ea">包含此事件的参数</param>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.Get``1(System.String,System.Object,System.String,System.Nullable{System.Boolean})">
            <summary>
            发起一个期望结果类型为 <typeparamref name="T"/> 的请求
            </summary>
            <typeparam name="T">期望的结果类型</typeparam>
            <param name="uri">请求地址</param>
            <param name="refer">引用页</param>
            <param name="queryParam">请求参数</param>
            <param name="allowAutoRedirect">是否允许自动重定向</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.GetData(System.String,System.Object,System.String,System.Nullable{System.Boolean})">
            <summary>
            发起一个期望结果类型为 <see cref="T:System.Array"/> 的请求
            </summary>
            <param name="uri">请求地址</param>
            <param name="refer">引用页</param>
            <param name="queryParam">请求参数</param>
            <param name="allowAutoRedirect">是否允许自动重定向</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.GetDataResult(System.String,System.Object,System.String,System.Nullable{System.Boolean})">
            <summary>
            发起一个期望结果类型为 <see cref="T:System.Array"/> 的请求
            </summary>
            <param name="uri">请求地址</param>
            <param name="refer">引用页</param>
            <param name="queryParam">请求参数</param>
            <param name="allowAutoRedirect">是否允许自动重定向</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.GetImage(System.String,System.Object,System.String,System.Nullable{System.Boolean})">
            <summary>
            发起一个期望结果类型为 <see cref="T:System.Drawing.Image"/> 的请求
            </summary>
            <param name="uri">请求地址</param>
            <param name="refer">引用页</param>
            <param name="queryParam">请求参数</param>
            <param name="allowAutoRedirect">是否允许自动重定向</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.GetImageResult(System.String,System.Object,System.String,System.Nullable{System.Boolean})">
            <summary>
            发起一个期望结果类型为 <see cref="T:System.Drawing.Image"/> 的请求
            </summary>
            <param name="uri">请求地址</param>
            <param name="refer">引用页</param>
            <param name="queryParam">请求参数</param>
            <param name="allowAutoRedirect">是否允许自动重定向</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.GetResult``1(System.String,System.Object,System.String,System.Nullable{System.Boolean})">
            <summary>
            发起一个期望结果类型为 <typeparamref name="T"/> 的请求
            </summary>
            <typeparam name="T">期望的结果类型</typeparam>
            <param name="uri">请求地址</param>
            <param name="refer">引用页</param>
            <param name="queryParam">请求参数</param>
            <param name="allowAutoRedirect">是否允许自动重定向</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.GetString(System.String,System.Object,System.String,System.Nullable{System.Boolean})">
            <summary>
            发起一个期望结果类型为 <see langword="string" /> 的请求
            </summary>
            <param name="uri">请求地址</param>
            <param name="refer">引用页</param>
            <param name="queryParam">请求参数</param>
            <param name="allowAutoRedirect">是否允许自动重定向</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.GetStringResult(System.String,System.Object,System.String,System.Nullable{System.Boolean})">
            <summary>
            发起一个期望结果类型为 <see langword="string" /> 的请求
            </summary>
            <param name="uri">请求地址</param>
            <param name="refer">引用页</param>
            <param name="queryParam">请求参数</param>
            <param name="allowAutoRedirect">是否允许自动重定向</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.Post``1(System.String,System.Object,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            发起一个期望结果类型为 <typeparamref name="T"/> 的请求
            </summary>
            <typeparam name="T">期望的结果类型</typeparam>
            <param name="uri">请求地址</param>
            <param name="refer">引用页</param>
            <param name="data">请求参数</param>
            <param name="usingJsonBody">是否将数据序列化成JSON内容发送</param>
            <param name="allowAutoRedirect">是否允许自动重定向</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.PostData(System.String,System.Object,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            发起一个期望结果类型为 <see cref="T:System.Array"/> 的请求
            </summary>
            <param name="uri">请求地址</param>
            <param name="refer">引用页</param>
            <param name="data">请求参数</param>
            <param name="usingJsonBody">是否将数据序列化成JSON内容发送</param>
            <param name="allowAutoRedirect">是否允许自动重定向</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.PostDataResult(System.String,System.Object,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            发起一个期望结果类型为 <see cref="T:System.Array"/> 的请求
            </summary>
            <param name="uri">请求地址</param>
            <param name="refer">引用页</param>
            <param name="data">请求参数</param>
            <param name="usingJsonBody">是否将数据序列化成JSON内容发送</param>
            <param name="allowAutoRedirect">是否允许自动重定向</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.PostImage(System.String,System.Object,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            发起一个期望结果类型为 <see cref="T:System.Drawing.Image"/> 的请求
            </summary>
            <param name="uri">请求地址</param>
            <param name="refer">引用页</param>
            <param name="data">请求参数</param>
            <param name="usingJsonBody">是否将数据序列化成JSON内容发送</param>
            <param name="allowAutoRedirect">是否允许自动重定向</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.PostImageResult(System.String,System.Object,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            发起一个期望结果类型为 <see cref="T:System.Drawing.Image"/> 的请求
            </summary>
            <param name="uri">请求地址</param>
            <param name="refer">引用页</param>
            <param name="data">请求参数</param>
            <param name="usingJsonBody">是否将数据序列化成JSON内容发送</param>
            <param name="allowAutoRedirect">是否允许自动重定向</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.PostResult``1(System.String,System.Object,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            发起一个期望结果类型为 <typeparamref name="T"/> 的请求
            </summary>
            <typeparam name="T">期望的结果类型</typeparam>
            <param name="uri">请求地址</param>
            <param name="refer">引用页</param>
            <param name="data">请求参数</param>
            <param name="usingJsonBody">是否将数据序列化成JSON内容发送</param>
            <param name="allowAutoRedirect">是否允许自动重定向</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.PostString(System.String,System.Object,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            发起一个期望结果类型为 <see langword="string" /> 的请求
            </summary>
            <param name="uri">请求地址</param>
            <param name="refer">引用页</param>
            <param name="data">请求参数</param>
            <param name="usingJsonBody">是否将数据序列化成JSON内容发送</param>
            <param name="allowAutoRedirect">是否允许自动重定向</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.PostStringResult(System.String,System.Object,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            发起一个期望结果类型为 <see langword="string" /> 的请求
            </summary>
            <param name="uri">请求地址</param>
            <param name="refer">引用页</param>
            <param name="data">请求参数</param>
            <param name="usingJsonBody">是否将数据序列化成JSON内容发送</param>
            <param name="allowAutoRedirect">是否允许自动重定向</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.SendContextWithRetry``1(System.Func{FSLib.Network.Http.HttpContext{``0}},System.Func{FSLib.Network.Http.HttpContext{``0},System.Boolean},System.Action{System.Int32,FSLib.Network.Http.HttpContext{``0}},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            带重试的发送请求，直到判定成功或者超过次数。
            </summary>
            <typeparam name="T">内容类型</typeparam>
            <param name="contextGenerator">创建目标HttpContext的回调</param>
            <param name="maxRetryCount">最多重试次数。如果为null，则默认使用全局设置</param>
            <param name="contextChecker">判断是否正确的响应，默认为判断 IsValid 为true</param>
            <param name="retryIndicator">重试的时候将会通知</param>
            <param name="sleepTime">两次重试之间的休息时间（毫秒）</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.GetResultAsync``1(System.String,System.Object,System.String,System.Nullable{System.Boolean})">
            <summary>
            发起一个期望结果类型为 <typeparamref name="T"/> 的请求
            </summary>
            <typeparam name="T">期望的结果类型</typeparam>
            <param name="uri">请求地址</param>
            <param name="refer">引用页</param>
            <param name="queryParam">请求参数</param>
            <param name="allowAutoRedirect">是否允许自动重定向</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.GetResultAsync``1(System.Threading.CancellationToken,System.String,System.Object,System.String,System.Nullable{System.Boolean})">
            <summary>
            发起一个期望结果类型为 <typeparamref name="T"/> 的请求
            </summary>
            <typeparam name="T">期望的结果类型</typeparam>
            <param name="cancellationToken">取消标记</param>
            <param name="uri">请求地址</param>
            <param name="refer">引用页</param>
            <param name="queryParam">请求参数</param>
            <param name="allowAutoRedirect">是否允许自动重定向</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.GetDataResultAsync(System.String,System.Object,System.String,System.Nullable{System.Boolean})">
            <summary>
            发起一个期望结果类型为 <see cref="T:System.Array"/> 的请求
            </summary>
            <param name="uri">请求地址</param>
            <param name="refer">引用页</param>
            <param name="queryParam">请求参数</param>
            <param name="allowAutoRedirect">是否允许自动重定向</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.GetDataResultAsync(System.Threading.CancellationToken,System.String,System.Object,System.String,System.Nullable{System.Boolean})">
            <summary>
            发起一个期望结果类型为 <see cref="T:System.Array"/> 的请求
            </summary>
            <param name="cancellationToken">取消标记</param>
            <param name="uri">请求地址</param>
            <param name="refer">引用页</param>
            <param name="queryParam">请求参数</param>
            <param name="allowAutoRedirect">是否允许自动重定向</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.GetImageResultAsync(System.String,System.Object,System.String,System.Nullable{System.Boolean})">
            <summary>
            发起一个期望结果类型为 <see cref="T:System.Drawing.Image"/> 的请求
            </summary>
            <param name="uri">请求地址</param>
            <param name="refer">引用页</param>
            <param name="queryParam">请求参数</param>
            <param name="allowAutoRedirect">是否允许自动重定向</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.GetImageResultAsync(System.Threading.CancellationToken,System.String,System.Object,System.String,System.Nullable{System.Boolean})">
            <summary>
            发起一个期望结果类型为 <see cref="T:System.Drawing.Image"/> 的请求
            </summary>
            <param name="cancellationToken">取消标记</param>
            <param name="uri">请求地址</param>
            <param name="refer">引用页</param>
            <param name="queryParam">请求参数</param>
            <param name="allowAutoRedirect">是否允许自动重定向</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.GetStringResultAsync(System.String,System.Object,System.String,System.Nullable{System.Boolean})">
            <summary>
            发起一个期望结果类型为 <see langword="string" /> 的请求
            </summary>
            <param name="uri">请求地址</param>
            <param name="refer">引用页</param>
            <param name="queryParam">请求参数</param>
            <param name="allowAutoRedirect">是否允许自动重定向</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.GetStringResultAsync(System.Threading.CancellationToken,System.String,System.Object,System.String,System.Nullable{System.Boolean})">
            <summary>
            发起一个期望结果类型为 <see langword="string" /> 的请求
            </summary>
            <param name="cancellationToken">取消标记</param>
            <param name="uri">请求地址</param>
            <param name="refer">引用页</param>
            <param name="queryParam">请求参数</param>
            <param name="allowAutoRedirect">是否允许自动重定向</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.PostResultAsync``1(System.String,System.Object,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            发起一个期望结果类型为 <typeparamref name="T"/> 的请求
            </summary>
            <typeparam name="T">期望的结果类型</typeparam>
            <param name="uri">请求地址</param>
            <param name="refer">引用页</param>
            <param name="data">请求参数</param>
            <param name="usingJsonBody">是否将数据序列化成JSON内容发送</param>
            <param name="allowAutoRedirect">是否允许自动重定向</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.PostResultAsync``1(System.Threading.CancellationToken,System.String,System.Object,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            发起一个期望结果类型为 <typeparamref name="T"/> 的请求
            </summary>
            <typeparam name="T">期望的结果类型</typeparam>
            <param name="cancellationToken">取消标记</param>
            <param name="uri">请求地址</param>
            <param name="refer">引用页</param>
            <param name="data">请求参数</param>
            <param name="usingJsonBody">是否将数据序列化成JSON内容发送</param>
            <param name="allowAutoRedirect">是否允许自动重定向</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.PostDataResultAsync(System.String,System.Object,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            发起一个期望结果类型为 <see cref="T:System.Array"/> 的请求
            </summary>
            <param name="uri">请求地址</param>
            <param name="refer">引用页</param>
            <param name="data">请求参数</param>
            <param name="usingJsonBody">是否将数据序列化成JSON内容发送</param>
            <param name="allowAutoRedirect">是否允许自动重定向</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.PostDataResultAsync(System.Threading.CancellationToken,System.String,System.Object,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            发起一个期望结果类型为 <see cref="T:System.Array"/> 的请求
            </summary>
            <param name="cancellationToken">取消标记</param>
            <param name="uri">请求地址</param>
            <param name="refer">引用页</param>
            <param name="data">请求参数</param>
            <param name="usingJsonBody">是否将数据序列化成JSON内容发送</param>
            <param name="allowAutoRedirect">是否允许自动重定向</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.PostImageResultAsync(System.String,System.Object,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            发起一个期望结果类型为 <see cref="T:System.Drawing.Image"/> 的请求
            </summary>
            <param name="uri">请求地址</param>
            <param name="refer">引用页</param>
            <param name="data">请求参数</param>
            <param name="usingJsonBody">是否将数据序列化成JSON内容发送</param>
            <param name="allowAutoRedirect">是否允许自动重定向</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.PostImageResultAsync(System.Threading.CancellationToken,System.String,System.Object,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            发起一个期望结果类型为 <see cref="T:System.Drawing.Image"/> 的请求
            </summary>
            <param name="cancellationToken">取消标记</param>
            <param name="uri">请求地址</param>
            <param name="refer">引用页</param>
            <param name="data">请求参数</param>
            <param name="usingJsonBody">是否将数据序列化成JSON内容发送</param>
            <param name="allowAutoRedirect">是否允许自动重定向</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.PostStringResultAsync(System.String,System.Object,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            发起一个期望结果类型为 <see langword="string" /> 的请求
            </summary>
            <param name="uri">请求地址</param>
            <param name="refer">引用页</param>
            <param name="data">请求参数</param>
            <param name="usingJsonBody">是否将数据序列化成JSON内容发送</param>
            <param name="allowAutoRedirect">是否允许自动重定向</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.PostStringResultAsync(System.Threading.CancellationToken,System.String,System.Object,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            发起一个期望结果类型为 <see langword="string" /> 的请求
            </summary>
            <param name="cancellationToken">用来取消的 <see cref="T:System.Threading.CancellationToken"/></param>
            <param name="uri">请求地址</param>
            <param name="refer">引用页</param>
            <param name="data">请求参数</param>
            <param name="usingJsonBody">是否将数据序列化成JSON内容发送</param>
            <param name="allowAutoRedirect">是否允许自动重定向</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.SendContextWithRetryAsync``1(System.Func{FSLib.Network.Http.HttpContext{``0}},System.Func{FSLib.Network.Http.HttpContext{``0},System.Boolean},System.Action{System.Int32,FSLib.Network.Http.HttpContext{``0}},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            带重试的发送请求，直到判定成功或者超过次数。
            </summary>
            <typeparam name="T">内容类型</typeparam>
            <param name="contextGenerator">创建目标HttpContext的回调</param>
            <param name="maxRetryCount">最多重试次数。如果为null，则默认使用全局设置</param>
            <param name="contextChecker">判断是否正确的响应，默认为判断 IsValid 为true</param>
            <param name="retryIndicator">重试的时候将会通知</param>
            <param name="sleepTime">休息时间</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpClient.SendContextWithRetryAsync``1(System.Func{FSLib.Network.Http.HttpContext{``0}},System.Threading.CancellationToken,System.Func{FSLib.Network.Http.HttpContext{``0},System.Boolean},System.Action{System.Int32,FSLib.Network.Http.HttpContext{``0}},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            带重试的发送请求，直到判定成功或者超过次数。
            </summary>
            <typeparam name="T">内容类型</typeparam>
            <param name="contextGenerator">创建目标HttpContext的回调</param>
            <param name="token">取消标记</param>
            <param name="maxRetryCount">最多重试次数。如果为null，则默认使用全局设置</param>
            <param name="contextChecker">判断是否正确的响应，默认为判断 IsValid 为true</param>
            <param name="retryIndicator">重试的时候将会通知</param>
            <param name="sleepTime">休息时间</param>
            <returns></returns>
        </member>
        <member name="T:FSLib.Network.Http.HttpClientException">
            <summary>
            HttpClient中出现的异常类
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpClientException.#ctor(System.String,System.Object[])">
            <summary>
            创建新的 <see cref="T:FSLib.Network.Http.HttpClientException"/> 对象
            </summary>
            <param name="msgName">错误消息名</param>
            <param name="args">格式化内容</param>
        </member>
        <member name="T:FSLib.Network.Http.HttpConfigHelper">
            <summary>
            配置请求的辅助类
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpConfigHelper.SetUseUnsafeHeaderParsing(System.Boolean)">
            <summary>
            设置是否使用不安全的标头解析
            </summary>
            <param name="enabled"></param>
        </member>
        <member name="T:FSLib.Network.Http.HttpContext">
            <summary>
            封装了一个请求的上下文环境
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpContext.#ctor(FSLib.Network.Http.HttpClient,FSLib.Network.Http.HttpRequestMessage)">
            <summary>
            创建 <see cref="T:FSLib.Network.Http.HttpContext" />  的新实例(HttpContext)
            </summary>
        </member>
        <member name="E:FSLib.Network.Http.HttpContext.DetectResponseContentType">
            <summary>
            请求已收到，请求判断响应类型
            </summary>
        </member>
        <member name="E:FSLib.Network.Http.HttpContext.PerformanceObjectCreated">
            <summary>
            性能计数器对象已经新建
            </summary>
        </member>
        <member name="E:FSLib.Network.Http.HttpContext.RequestCancelled">
            <summary>
            请求被取消
            </summary>
        </member>
        <member name="E:FSLib.Network.Http.HttpContext.RequestCreated">
            <summary>
            当请求已经被创建时触发
            </summary>
        </member>
        <member name="E:FSLib.Network.Http.HttpContext.ServerCertificateValidation">
            <summary>
            校验服务器证书
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpContext.OnServerCertificateValidation(FSLib.Network.Http.CertificateValidationEventArgs)">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.HttpContext.ServerCertificateValidation"/> 事件
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:FSLib.Network.Http.HttpContext.ChangeReadyState(FSLib.Network.Http.HttpContextState,FSLib.Network.Http.HttpContextState)">
            <summary>
            以原子操作变更当前的状态。如果当前状态不符，则返回false
            </summary>
            <param name="originalState"></param>
            <param name="currentState"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpContext.CheckCancellation">
            <summary>
            检测是否取消。如果有异常，则执行结束操作。
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpContext.CheckException">
            <summary>
            检测是否已经抛出异常。如果有异常，则执行结束操作。
            </summary>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpContext.GetPreferedResponseContent">
            <summary>
            获得猜测的最理想的返回结果类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpContext.InternalOnRequestFinished">
            <summary>
            请求结束并且成功，开始收尾操作。
            </summary>
        </member>
        <member name="E:FSLib.Network.Http.HttpContext.RequestEnd">
            <summary>
            请求结束
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpContext.OnDetectResponseContentType">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.HttpContext.DetectResponseContentType"/> 事件
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpContext.OnPerformanceObjectCreated">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.HttpContext.PerformanceObjectCreated"/> 事件
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpContext.OnRequestCancelled">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.HttpContext.RequestCancelled" /> 事件
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpContext.OnRequestCreated">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.HttpContext.RequestCreated" /> 事件
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpContext.OnRequestDataSended">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.HttpContext.RequestDataSended" /> 事件
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpContext.OnRequestDataSending">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.HttpContext.RequestDataSending" /> 事件
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpContext.OnRequestDataSendProgressChanged(FSLib.Network.DataProgressEventArgs)">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.HttpContext.RequestDataSendProgressChanged" /> 事件
            </summary>
            <param name="ea">包含此事件的参数</param>
        </member>
        <member name="M:FSLib.Network.Http.HttpContext.OnRequestFailed">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.HttpContext.RequestFailed" /> 事件
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpContext.OnRequestFinished">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.HttpContext.RequestFinished" /> 事件
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpContext.OnRequestRedirect">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.HttpContext.RequestRedirect" /> 事件
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpContext.OnRequestResubmit">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.HttpContext.RequestResubmit"/> 事件
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpContext.OnRequestSended">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.HttpContext.RequestSended" /> 事件
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpContext.OnRequestSending">
            <summary>
            触发 <see cref="E:FSLib.Network.Http.HttpContext.RequestSending"/> 事件
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpContext.OnRequestStreamFetched">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.HttpContext.RequestStreamFetched" /> 事件
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpContext.OnRequestValidateResponse">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.HttpContext.RequestValidateResponse" /> 事件
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpContext.OnResponseDataReceiveCompleted">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.HttpContext.ResponseDataReceiveCompleted"/>
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpContext.OnResponseHeaderReceived">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.HttpContext.ResponseHeaderReceived" /> 事件
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpContext.OnResponseReadProgressChanged(FSLib.Network.DataProgressEventArgs)">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.HttpContext.ResponseReadProgressChanged" /> 事件
            </summary>
            <param name="ea">包含此事件的参数</param>
        </member>
        <member name="M:FSLib.Network.Http.HttpContext.OnResponseStreamFetched">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.HttpContext.ResponseStreamFetched" /> 事件
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpContext.SetException(System.Exception,System.Boolean)">
            <summary>
            手动何止错误，用于拦截响应.
            </summary>
            <param name="ex"></param>
            <param name="completeRequest">是否直接结束请求</param>
        </member>
        <member name="M:FSLib.Network.Http.HttpContext.SetReadyState(FSLib.Network.Http.HttpContextState)">
            <summary>
            设置当前HTTP请求状态，如果发生变更则引发 <see cref="E:FSLib.Network.Http.HttpContext.StateChanged"/> 并返回true
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:FSLib.Network.Http.HttpContext.AttachMonitor(FSLib.Network.Http.HttpMonitor)">
            <summary>
            附加监听器
            </summary>
            <param name="monitor"></param>
        </member>
        <member name="M:FSLib.Network.Http.HttpContext.Abort">
            <summary>
            中断请求
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpContext.Send">
            <summary>
            发送请求并做响应
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpContext.SendAsPromise(System.Boolean)">
            <summary>
            以任务模式发送请求
            </summary>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpContext.SetRequestContentType(System.String)">
            <summary>
            设置响应发送类型
            </summary>
            <param name="contentType"></param>
        </member>
        <member name="M:FSLib.Network.Http.HttpContext.SetRequestContentType(FSLib.Network.Http.ContentType)">
            <summary>
            设置响应发送类型
            </summary>
            <param name="contentType"></param>
        </member>
        <member name="P:FSLib.Network.Http.HttpContext.AutoStartSpeedMonitor">
            <summary>
            获得或设置是否默认启动速度计数器
            <para>仅在请求未发送的时候有效</para>
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpContext.Cancelled">
            <summary>
            获得操作是否已经被取消
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpContext.CaptureContext">
            <summary>
            获得或设置是否捕捉线程上下文（异步模式）
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpContext.Client">
            <summary>
            获得当前的客户端
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpContext.ConnectionInfo">
            <summary>
            当前的连接信息
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpContext.ContextData">
            <summary>
            获得或设置用于保存上下文环境的数据
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpContext.EndPointInfo">
            <summary>
            与请求相关的终端信息
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpContext.Exception">
            <summary>
            获得或设置关联的异常
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpContext.ExceptionStatus">
            <summary>
            获得请求的错误状态
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpContext.IsFinished">
            <summary>
            获得当前的请求是否已经完成
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpContext.IsRedirection">
            <summary>
            获得当前的请求是否重定向
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpContext.IsSended">
            <summary>
            获得当前的请求是否已经发送
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpContext.IsSuccess">
            <summary>
            获得是否成功
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpContext.JsonDeserializationSetting">
            <summary>
            获得或设置JSON反序列化设置
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpContext.JsonSerializationSetting">
            <summary>
            获得或设置JSON序列化设置
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpContext.Monitor">
            <summary>
            获得附加的监听器
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpContext.MonitorItem">
            <summary>
            获得附加的监听源
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpContext.Operation">
            <summary>
            获得异步操作的引用
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpContext.Performance">
            <summary>
            获得当前请求的性能对象
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpContext.ReadyState">
            <summary>
            获得就绪状态
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpContext.Redirection">
            <summary>
            获得当前的重定向
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpContext.Request">
            <summary>
            获得请求信息
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpContext.RequestContent">
            <summary>
            获得请求内容
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpContext.RequsetResubmit">
            <summary>
            获得或设置当前请求是否需要重新发送。仅在请求结束的时候有效。
            如果设置为true，则请求将会被重新发送。
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpContext.Response">
            <summary>
            获得响应信息
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpContext.ResponseContent">
            <summary>
            获得实际响应内容
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpContext.SendDelay">
            <summary>
            获得或设置发送之前等待的时间
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpContext.State">
            <summary>
            获得或设置状态对象
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpContext.Status">
            <summary>
            获得当前响应的状态码
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpContext.WebRequest">
            <summary>
            获得请求
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpContext.WebResponse">
            <summary>
            获得响应
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpContext.SendAsync">
            <summary>
            以任务模式发送请求
            </summary>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpContext.SendAsync(System.Threading.CancellationToken)">
            <summary>
            以任务模式发送请求
            </summary>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpContext.WriteRequestData">
            <summary>
            写入请求数据
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpContext.WriteRequestData(System.Func{System.IO.Stream})">
            <summary>
            写入请求数据回调
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpContext.CompleteRequest">
            <summary>
            完成请求处理
            </summary>
        </member>
        <member name="E:FSLib.Network.Http.HttpContext.RequestResubmit">
            <summary>
            当前请求被重新发送
            </summary>
        </member>
        <member name="E:FSLib.Network.Http.HttpContext.StateChanged">
            <summary>
            状态发生变化
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpContext.OnStateChanged">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.HttpContext.StateChanged" /> 事件
            </summary>
        </member>
        <member name="E:FSLib.Network.Http.HttpContext.RequestSending">
            <summary>
            正在准备发送
            </summary>
        </member>
        <member name="E:FSLib.Network.Http.HttpContext.RequestSended">
            <summary>
            请求已经发送，正在等待写入请求数据或等待响应流
            </summary>
        </member>
        <member name="E:FSLib.Network.Http.HttpContext.RequestStreamFetched">
            <summary>
            已经获得请求流
            </summary>
        </member>
        <member name="E:FSLib.Network.Http.HttpContext.RequestDataSending">
            <summary>
            正在发送请求数据
            </summary>
        </member>
        <member name="E:FSLib.Network.Http.HttpContext.RequestDataSendProgressChanged">
            <summary>
            请求数据发送进度变化
            </summary>
        </member>
        <member name="E:FSLib.Network.Http.HttpContext.RequestDataSended">
            <summary>
            请求数据已经发送
            </summary>
        </member>
        <member name="E:FSLib.Network.Http.HttpContext.ResponseHeaderReceived">
            <summary>
            已经收到响应
            </summary>
        </member>
        <member name="E:FSLib.Network.Http.HttpContext.ResponseStreamFetched">
            <summary>
            已经获得响应流
            </summary>
        </member>
        <member name="E:FSLib.Network.Http.HttpContext.ResponseDataReceiveCompleted">
            <summary>
            响应数据读取已经完成
            </summary>
        </member>
        <member name="E:FSLib.Network.Http.HttpContext.ResponseReadProgressChanged">
            <summary>
            响应读取进度变更
            </summary>
        </member>
        <member name="E:FSLib.Network.Http.HttpContext.RequestFinished">
            <summary>
            请求已经完成
            </summary>
        </member>
        <member name="E:FSLib.Network.Http.HttpContext.RequestFailed">
            <summary>
            请求失败
            </summary>
        </member>
        <member name="E:FSLib.Network.Http.HttpContext.RequestRedirect">
            <summary>
            检测到重定向
            </summary>
        </member>
        <member name="E:FSLib.Network.Http.HttpContext.RequestValidateResponse">
            <summary>
            请求验证内容
            </summary>
        </member>
        <member name="E:FSLib.Network.Http.HttpContext.PreviewResponseHeader">
            <summary>
            已经收到HTTP响应头，准备处理请求
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpContext.OnPreviewResponseHeader">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.HttpContext.PreviewResponseHeader"/> 事件
            </summary>
        </member>
        <member name="E:FSLib.Network.Http.HttpContext.ValidateResponseHeader">
            <summary>
            校验响应头是否正确，如果引发异常，则会导致请求失败。
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpContext.OnValidateResponseHeader">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.HttpContext.ValidateResponseHeader"/> 事件
            </summary>
        </member>
        <member name="E:FSLib.Network.Http.HttpContext.ResponseContentObjectIntialized">
            <summary>
            响应处理请求对象已经创建
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpContext.OnResponseContentObjectIntialized">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.HttpContext.ResponseContentObjectIntialized"/> 事件
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpContext.JsonSerialize(System.Object)">
            <summary>
            Json序列化
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpContext.JsonDeserialize``1(System.String,System.Object)">
            <summary>
            反序列化目标对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="result"></param>
            <param name="originalObj"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpContext.OnDisposed">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpContext.Dispose(System.Boolean)">
            <summary>
            销毁对象
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:FSLib.Network.Http.HttpContext.CheckDisposed">
            <summary>
            检查是否已经被销毁。如果被销毁，则抛出异常
            </summary>
            <exception cref="T:System.ObjectDisposedException">对象已被销毁</exception>
        </member>
        <member name="M:FSLib.Network.Http.HttpContext.OnRequestEnd">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.HttpContext.RequestEnd"/> 事件
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:FSLib.Network.Http.HttpContext`1">
            <summary>
            强类型的结果
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:FSLib.Network.Http.HttpContext`1.#ctor(FSLib.Network.Http.HttpClient,FSLib.Network.Http.HttpRequestMessage)">
            <summary>
            创建 <see cref="T:FSLib.Network.Http.HttpContext" />  的新实例(HttpContext)
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpContext`1.Send">
            <summary>
            发送请求
            </summary>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpContext`1.SendAsPromise(System.Boolean)">
            <summary>
            以任务模式发送请求
            </summary>
            <returns></returns>
        </member>
        <member name="P:FSLib.Network.Http.HttpContext`1.Result">
            <summary>
            获得响应的结果
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpContext`1.SendAsync">
            <summary>
            以任务模式发送请求
            </summary>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpContext`1.SendAsync(System.Threading.CancellationToken)">
            <summary>
            以任务模式发送请求
            </summary>
            <param name="cancellationToken">cancellationToken</param>
            <returns></returns>
        </member>
        <member name="T:FSLib.Network.Http.HttpContextState">
            <summary>
            请求状态
            </summary>
        </member>
        <member name="F:FSLib.Network.Http.HttpContextState.NotSended">
            <summary>
            未发送
            </summary>
        </member>
        <member name="F:FSLib.Network.Http.HttpContextState.Init">
            <summary>
            正在初始化
            </summary>
        </member>
        <member name="F:FSLib.Network.Http.HttpContextState.SendingRequestHeader">
            <summary>
            正在发送标头
            </summary>
        </member>
        <member name="F:FSLib.Network.Http.HttpContextState.WriteRequestData">
            <summary>
            正在写入请求数据
            </summary>
        </member>
        <member name="F:FSLib.Network.Http.HttpContextState.WaitingResponseHeader">
            <summary>
            等待请求标头
            </summary>
        </member>
        <member name="F:FSLib.Network.Http.HttpContextState.ReadingResponse">
            <summary>
            正在读取响应
            </summary>
        </member>
        <member name="F:FSLib.Network.Http.HttpContextState.EndProcessResponse">
            <summary>
            完成处理响应
            </summary>
        </member>
        <member name="F:FSLib.Network.Http.HttpContextState.ValidatingResponse">
            <summary>
            正在验证响应
            </summary>
        </member>
        <member name="F:FSLib.Network.Http.HttpContextState.Complete">
            <summary>
            完成请求
            </summary>
        </member>
        <member name="T:FSLib.Network.Http.HttpHandler">
            <summary>
            创建指定类型对象实例的工厂类
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpHandler.BaseUri">
            <summary>
            获得或设置BaseURI
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpHandler.OnHttpContextCreated(FSLib.Network.Http.HttpHandlerEventArgs)">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.HttpHandler.HttpContextCreated" /> 事件
            </summary>
            <param name="ea">包含此事件的参数</param>
        </member>
        <member name="M:FSLib.Network.Http.HttpHandler.GetRequest(System.Uri,System.String,FSLib.Network.Http.HttpContext)">
            <summary>
            获得用于发送请求的Request对象
            </summary>
            <param name="uri">当前请求的目标地址</param>
            <param name="method">当前请求的HTTP方法</param>
            <param name="context">当前的上下文 <see cref="T:FSLib.Network.Http.HttpContext" /></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpHandler.BindIPEndPoint(FSLib.Network.Http.HttpContext,System.Uri,System.String,System.Net.ServicePoint,System.Net.IPEndPoint,System.Int32)">
            <summary>
            确定要使用的本地IP端口
            </summary>
            <remarks>
            <para>绑定的IP端口的地址族需要正确。比如要连接的远程地址是IPV4的，则本地的端口也需要IPV4.</para>
            <para>如果远程端口是IPV6的，则本地端口也需要是IPV6. 否则绑定无法起效。</para>
            </remarks>
            <param name="method">当前请求的HTTP方法</param>
            <param name="servicePoint">
            当前的 <see cref="T:System.Net.ServicePoint" />
            </param>
            <param name="remoteEndPoint">
            当前要连接的远程 <see cref="T:System.Net.IPEndPoint" />
            </param>
            <param name="retryCount">重试次数</param>
            <param name="context">当前的上下文 <see cref="T:FSLib.Network.Http.HttpContext" /></param>
            <param name="uri">当前请求的目标地址</param>
            <returns>
            返回当前要使用的本地端口
            </returns>
            <exception cref="T:FSLib.Network.Http.IPAddressFamilyMismatchException">本地的IP地址组和远程地址的地址族不匹配.</exception>
        </member>
        <member name="M:FSLib.Network.Http.HttpHandler.PrepareContext(FSLib.Network.Http.HttpContext)">
            <summary>
            初始化上下文。此操作在上下文本身初始化完成之后、请求发出之前调用
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:FSLib.Network.Http.HttpHandler.OnRequestCreated(FSLib.Network.Http.HttpHandlerEventArgs)">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.HttpHandler.RequestCreated" /> 事件
            </summary>
            <param name="ea">包含此事件的参数</param>
        </member>
        <member name="M:FSLib.Network.Http.HttpHandler.GetContext(FSLib.Network.Http.HttpClient,FSLib.Network.Http.HttpRequestMessage)">
            <summary>
            创建上下文环境
            </summary>
            <param name="client"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpHandler.GetContext``1(FSLib.Network.Http.HttpClient,FSLib.Network.Http.HttpRequestMessage)">
            <summary>
            创建上下文环境
            </summary>
            <param name="client"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpHandler.ResolveUri(System.Nullable{System.Net.HttpRequestHeader},System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            解析URL字符串为URI
            </summary>
            <param name="header">解析后的地址使用的位置</param>
            <param name="url">字符串地址</param>
            <param name="data">获得或设置相关联的数据</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpHandler.WrapRequestContent(FSLib.Network.Http.HttpClient,FSLib.Network.Http.HttpRequestContent,System.Object,System.Nullable{FSLib.Network.Http.ContentType})">
            <summary>
            请求转换请求承载的内容为最终可以发送的数据，并确定其承载方式
            </summary>
            <param name="client">当前的客户端</param>
            <param name="requestContent">请求的内容</param>
            <param name="data">要发送的数据</param>
            <param name="contentTypeType">承载的方式</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpHandler.GetPreferedResponseType``1(FSLib.Network.Http.HttpClient,FSLib.Network.Http.HttpContext,FSLib.Network.Http.HttpResponseContent,System.EventHandler{FSLib.Network.Http.ResponseStreamContent.RequireProcessStreamEventArgs},``0,System.IO.Stream,System.String)">
            <summary>
            获得比较最适合的用于处理响应的类型
            </summary>
            <typeparam name="T">当前希望获得的结果</typeparam>
            <param name="client">当前的HTTP客户端</param>
            <param name="ctx">当前的上下文环境</param>
            <param name="responseContent">当前用来处理结果的对象</param>
            <param name="streamInvoker">如果希望能按流处理，那么用来处理响应的事件委托</param>
            <param name="result">当前希望获得的结果实例</param>
            <param name="targetStream">要将相应内容写入的流</param>
            <param name="saveToFilePath">要将当前请求写入的文件路径</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpHandler.ProcessCookies(FSLib.Network.Http.HttpContext,FSLib.Network.Http.HttpClient)">
            <summary>
            自定义处理Cookies
            </summary>
            <param name="context">当前的HTTP请求上下文</param>
            <param name="client">当前的客户端</param>
            <returns>如果返回 <see langword="false" />，那么客户端将会进行Cookies的默认处理。如果返回 <see langword="true" />，则表示Cookies已由第三方代码处理，类库本身不再处理</returns>
        </member>
        <member name="E:FSLib.Network.Http.HttpHandler.RequestCreated">
            <summary>
            已创建请求
            </summary>
        </member>
        <member name="E:FSLib.Network.Http.HttpHandler.HttpContextCreated">
            <summary>
            已创建上下文
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpHandler.DecorateRequestStream(FSLib.Network.Http.HttpContext,System.IO.Stream)">
            <summary>
            请求装饰写入的流
            </summary>
            <param name="orignalStream"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpHandler.DecorateRawResponseStream(FSLib.Network.Http.HttpContext,System.IO.Stream)">
            <summary>
            请求装饰响应流（原始流）
            </summary>
            <param name="orignalStream"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpHandler.OnServerCertificateValidation(System.Object,FSLib.Network.Http.CertificateValidationEventArgs)">
            <summary>
            验证服务器端证书
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FSLib.Network.Http.HttpHandler.DecorateResponseStream(FSLib.Network.Http.HttpContext,System.IO.Stream)">
            <summary>
            请求装饰响应流（已处理比如解压后的流）
            </summary>
            <param name="orignalStream"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpHandler.ValidateResponse(FSLib.Network.Http.HttpContext)">
            <summary>
            验证响应。在这里抛出的异常将会导致请求被设置为失败。
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:FSLib.Network.Http.HttpHandlerEventArgs">
            <summary>
            包含了HttpHandler的事件数据
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpHandlerEventArgs.HttpWebRequest">
            <summary>
            获得或设置创建相关的HttpWebRequest
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpHandlerEventArgs.HttpContext">
            <summary>
            获得或设置创建的HttpContext
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpHandlerEventArgs.#ctor(System.Net.HttpWebRequest,FSLib.Network.Http.HttpContext)">
            <summary>
            创建 <see cref="T:FSLib.Network.Http.HttpHandlerEventArgs" />  的新实例(HttpHandlerEventArgs)
            </summary>
        </member>
        <member name="T:FSLib.Network.Http.HttpMethod">
            <summary>
            HTTP请求方法
            </summary>
        </member>
        <member name="F:FSLib.Network.Http.HttpMethod.Get">
            <summary>
            GET
            </summary>
        </member>
        <member name="F:FSLib.Network.Http.HttpMethod.Post">
            <summary>
            POST
            </summary>
        </member>
        <member name="F:FSLib.Network.Http.HttpMethod.Head">
            <summary>
            HEAD
            </summary>
        </member>
        <member name="F:FSLib.Network.Http.HttpMethod.Option">
            <summary>
            OPTION
            </summary>
        </member>
        <member name="T:FSLib.Network.Http.HttpMonitor">
            <summary>
            HTTP请求监控类
            </summary>
        </member>
        <member name="E:FSLib.Network.Http.HttpMonitor.Cleared">
            <summary>
            记录被清空
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpMonitor.OnCleared">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.HttpMonitor.Cleared" /> 事件
            </summary>
        </member>
        <member name="E:FSLib.Network.Http.HttpMonitor.ItemWatched">
            <summary>
            有新纪录
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpMonitor.OnItemWatched(FSLib.Network.Http.HttpMonitorItemEventArgs)">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.HttpMonitor.ItemWatched" /> 事件
            </summary>
            <param name="ea">包含此事件的参数</param>
        </member>
        <member name="E:FSLib.Network.Http.HttpMonitor.ItemRemoved">
            <summary>
            记录被移除
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpMonitor.OnItemRemoved(FSLib.Network.Http.HttpMonitorItemEventArgs)">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.HttpMonitor.ItemRemoved" /> 事件
            </summary>
            <param name="ea">包含此事件的参数</param>
        </member>
        <member name="P:FSLib.Network.Http.HttpMonitor.MaxRecordItems">
            <summary>
            获得或设置最多记录的条数
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpMonitor.RecordRequestContent">
            <summary>
            获得或设置是否记录请求内容
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpMonitor.RecordResponseContent">
            <summary>
            获得或记录是否记录响应内容
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpMonitor.RecordRawResponseContent">
            <summary>
            获得或设置是否记录原始的响应内容
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpMonitor.MaxRecordContentSize">
            <summary>
            获得或设置记录的最大内容长度。此值设置过高将会导致内存占用过高。
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpMonitor.#ctor">
            <summary>
            创建 <see cref="T:FSLib.Network.Http.HttpMonitor" />  的新实例(Monitor)
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpMonitor.Register(FSLib.Network.Http.HttpContext)">
            <summary>
            向监控类中注册源
            </summary>
            <param name="contxt"></param>
        </member>
        <member name="P:FSLib.Network.Http.HttpMonitor.Count">
            <summary>
            获取集合中的元素数。
            </summary>
            <returns>
            集合中的元素数。
            </returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpMonitor.GetAllItems">
            <summary>
            获得所有记录
            </summary>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpMonitor.Clear">
            <summary>
            清除所有记录
            </summary>
        </member>
        <member name="T:FSLib.Network.Http.HttpMonitorItem">
            <summary>
            记录的内容
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpMonitorItem.HttpContext">
            <summary>
            对应的HttpContext实例
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpMonitorItem.HttpMonitor">
            <summary>
            对应的监听器
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpMonitorItem.#ctor(FSLib.Network.Http.HttpContext,FSLib.Network.Http.HttpMonitor)">
            <summary>
            创建 <see cref="T:FSLib.Network.Http.HttpMonitorItem" />  的新实例(HttpMonitorItem)
            </summary>
            <param name="httpContext"></param>
        </member>
        <member name="P:FSLib.Network.Http.HttpMonitorItem.ContextState">
            <summary>
            获得监控的请求状态
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpMonitorItem.RequestStream">
            <summary>
            获得请求的写入流
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpMonitorItem.SetRequestStream(FSLib.Network.Http.HttpStreamWrapper)">
            <summary>
            设置写入流
            </summary>
            <param name="stream"></param>
        </member>
        <member name="P:FSLib.Network.Http.HttpMonitorItem.ResponseRawStream">
            <summary>
            原始的响应流
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpMonitorItem.ResponseStream">
            <summary>
            响应流
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpMonitorItem.SetRawResponseStream(FSLib.Network.Http.HttpStreamWrapper)">
            <summary>
            设置原始响应流
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:FSLib.Network.Http.HttpMonitorItem.SetResponseStream(FSLib.Network.Http.HttpStreamWrapper)">
            <summary>
            设置响应流
            </summary>
            <param name="stream"></param>
        </member>
        <member name="T:FSLib.Network.Http.HttpMonitorItemEventArgs">
            <summary>
            记录事件数据
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpMonitorItemEventArgs.Item">
            <summary>
            获得事件相关联的类
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpMonitorItemEventArgs.#ctor(FSLib.Network.Http.HttpMonitorItem)">
            <summary>
            创建 <see cref="T:FSLib.Network.Http.HttpMonitorItemEventArgs" />  的新实例(HttpMonitorItemEventArgs)
            </summary>
            <param name="item"></param>
        </member>
        <member name="T:FSLib.Network.Http.HttpPerformance">
            <summary>
            当前HTTP请求性能相关的记录
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpPerformance.RequestLength">
            <summary>
            请求长度
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpPerformance.RequestLengthSended">
            <summary>
            请求已发送长度
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpPerformance.ResponseLength">
            <summary>
            响应长度
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpPerformance.ResponseLengthProcessed">
            <summary>
            响应已发送长度
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpPerformance.#ctor(FSLib.Network.Http.HttpContext)">
            <summary>
            创建 <see cref="T:FSLib.Network.Http.HttpPerformance"/> 的新实例
            </summary>
        </member>
        <member name="E:FSLib.Network.Http.HttpPerformance.PerformanceUpdated">
            <summary>
            性能计数已经更新
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpPerformance.OnPerformanceUpdated">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.HttpPerformance.PerformanceUpdated"/> 事件
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpPerformance.EnableSpeedMonitor">
            <summary>
            设置启用速度统计
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpPerformance.InstantDownloadSpeed">
            <summary>
            当前下载速度（实时速度）
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpPerformance.AverageDownloadSpeed">
            <summary>
            平均下载速度
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpPerformance.AverageUploadSpeed">
            <summary>
            平均上传速度
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpPerformance.InstantUploadSpeed">
            <summary>
            当前上传速度（实时速度）
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpPerformance.BeginTime">
            <summary>
            开始请求的时间
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpPerformance.InitialzieCompleteTime">
            <summary>
            请求初始化完成时间
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpPerformance.GetRequestStreamTime">
            <summary>
            获得请求流的时间
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpPerformance.CompleteRequestStreamTime">
            <summary>
            完成写入请求流的时间
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpPerformance.GotResponseTime">
            <summary>
            获得响应的时间
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpPerformance.GotResponseStreamTime">
            <summary>
            获得响应流的时间
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpPerformance.ReadResponseFinished">
            <summary>
            读取响应完成
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpPerformance.FinishResponseTime">
            <summary>
            完成响应处理的时间
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpPerformance.EndTime">
            <summary>
            结束时间
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpPerformance.ElapsedTime">
            <summary>
            获得请求消耗的时间
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpPerformance.UploadResetTime">
            <summary>
            预计上传剩余时间
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpPerformance.DownloadResetTime">
            <summary>
            预计下载剩余时间
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpPerformance.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpPerformance.CheckDisposed">
            <summary>
            检查是否已经被销毁。如果被销毁，则抛出异常
            </summary>
            <exception cref="T:System.ObjectDisposedException">对象已被销毁</exception>
        </member>
        <member name="E:FSLib.Network.Http.HttpPerformance.Disposed">
            <summary>
            对象销毁时触发
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpPerformance.OnDisposed">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.HttpPerformance.Disposed" /> 事件
            </summary>
        </member>
        <member name="T:FSLib.Network.Http.HttpPostFile">
            <summary>
            表示一个上传文件
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpPostFile.#ctor(System.String)">
            <summary>
            创建 <see cref="T:FSLib.Network.Http.HttpPostFile" />  的新实例(HttpPostFile)
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpPostFile.#ctor(System.String,System.String)">
            <summary>
            创建 <see cref="T:FSLib.Network.Http.HttpPostFile" />  的新实例(HttpPostFile)
            </summary>
        </member>
        <member name="E:FSLib.Network.Http.HttpPostFile.ProgressChanged">
            <summary>
            数据写入进度变化
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpPostFile.ComputeBodyLength">
            <summary>
            计算数据区长度
            </summary>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpPostFile.ComputeHeaderLength">
            <summary>
            计算开始信息长度
            </summary>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpPostFile.OnProgressChanged(FSLib.Network.DataProgressEventArgs)">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.HttpPostFile.ProgressChanged" /> 事件
            </summary>
            <param name="ea">包含此事件的参数</param>
        </member>
        <member name="M:FSLib.Network.Http.HttpPostFile.WriteBody(System.IO.Stream)">
            <summary>
            写入数据区
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:FSLib.Network.Http.HttpPostFile.WriteHeader(System.IO.Stream)">
            <summary>
            写入头信息
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:FSLib.Network.Http.HttpPostFile.WriterFooter(System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:FSLib.Network.Http.HttpPostFile.AttachContext(FSLib.Network.Http.HttpContext)">
            <summary>
            绑定上下文
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:FSLib.Network.Http.HttpPostFile.ComputeLength">
            <summary>
            计算长度(含开始信息)
            </summary>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpPostFile.WriteTo(System.IO.Stream)">
            <summary>
            写入指定的流
            </summary>
            <param name="stream"></param>
        </member>
        <member name="P:FSLib.Network.Http.HttpPostFile.ContentType">
            <summary>
            Content-Type
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpPostFile.Context">
            <summary>
            获得上下文环境
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpPostFile.FieldName">
            <summary>
            获得或设置表单名
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpPostFile.FileInfo">
            <summary>
            获得或设置文件信息
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpPostFile.FilePath">
            <summary>
            文件信息
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpPostFile.WriteHeaderAsync">
            <summary>
            写入头信息
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpPostFile.WriteFooterAsync">
            <summary>
            写入头信息
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpPostFile.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:FSLib.Network.Http.HttpProcessUtility">
            <summary>
            辅助工具类
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpProcessUtility.ImportCookies(System.Net.CookieContainer,System.String,System.Uri,System.Nullable{System.DateTime})">
            <summary>
            向指定的CookieContainer中导入Cookies
            </summary>
            <param name="container"></param>
            <param name="cookies"></param>
            <param name="uri"></param>
            <param name="expiresTime">过期时间</param>
        </member>
        <member name="M:FSLib.Network.Http.HttpProcessUtility.ParseCookies(System.String,System.Uri,System.Nullable{System.DateTime})">
            <summary>
            将指定的字符串分析为CookieCollection
            </summary>
            <param name="text"></param>
            <param name="url"></param>
            <param name="expiresTime">过期时间</param>
            <returns></returns>
        </member>
        <member name="T:FSLib.Network.Http.HttpRedirection">
            <summary>
            重定向
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpRedirection.Orginal">
            <summary>
            源地址
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpRedirection.Current">
            <summary>
            当前响应地址
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpRedirection.#ctor(System.Uri,System.Uri)">
            <summary>
            创建 <see cref="T:FSLib.Network.Http.HttpRedirection" />  的新实例(HttpRedirection)
            </summary>
        </member>
        <member name="T:FSLib.Network.Http.HttpRequestContent">
            <summary>
            HTTP请求内容
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpRequestContent.KnownContentTypes">
            <summary>
            获得客户端已知的支持发送的数据类型
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpRequestContent.#ctor(FSLib.Network.Http.ContentType,System.String)">
            <summary>
            创建 <see cref="T:FSLib.Network.Http.HttpRequestContent" />  的新实例(HttpRequestContent)
            </summary>
            <param name="contentType"></param>
            <param name="contentTypeString"></param>
        </member>
        <member name="M:FSLib.Network.Http.HttpRequestContent.op_Implicit(System.String)~FSLib.Network.Http.HttpRequestContent">
            <summary>
            将字符串隐式转换为内容
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpRequestContent.op_Implicit(System.Byte[])~FSLib.Network.Http.HttpRequestContent">
            <summary>
            将字符串隐式转换为内容
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpRequestContent.op_Implicit(System.IO.Stream)~FSLib.Network.Http.HttpRequestContent">
            <summary>
            将流转换为请求内容
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpRequestContent.CallCompleteCallback">
            <summary>
            通知异步的操作完成
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpRequestContent.AsyncData">
            <summary>
            获得在请求发送过程中的数据
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpRequestContent.Context">
            <summary>
            获得上下文环境
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpRequestContent.Message">
            <summary>
            获得请求消息
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpRequestContent.WebRequset">
            <summary>
            获得上下文请求
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpRequestContent.BlockContentLengthHeader">
            <summary>
            获得或设置是否阻止Content-Length标头
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpRequestContent.BindContext(FSLib.Network.Http.HttpClient,FSLib.Network.Http.HttpContext,FSLib.Network.Http.HttpRequestMessage)">
            <summary>
            绑定上下文环境
            </summary>
            <param name="context"></param>
            <param name="message"></param>
            <param name="client"></param>
        </member>
        <member name="M:FSLib.Network.Http.HttpRequestContent.ComputeLength">
            <summary>
            计算长度
            </summary>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpRequestContent.Prepare(System.Net.HttpWebRequest)">
            <summary>
            准备发出请求
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:FSLib.Network.Http.HttpRequestContent.PrepareData">
            <summary>
            准备数据
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpRequestContent.SerializeAsQueryString">
            <summary>
            将当前的内容序列化到查询中
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpRequestContent.SetContentType(System.String)">
            <summary>
            变更发出响应的ContentType类型
            </summary>
            <param name="contentType"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:FSLib.Network.Http.HttpRequestContent.WriteTo(System.IO.Stream)">
            <summary>
            写入内容到流中
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:FSLib.Network.Http.HttpRequestContent.WriteToAsync(FSLib.Network.Http.AsyncStreamProcessData)">
            <summary>
            异步将数据写入当前的请求流中
            </summary>
            <param name="asyncData"></param>
        </member>
        <member name="P:FSLib.Network.Http.HttpRequestContent.Client">
            <summary>
            获得客户端
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpRequestContent.ContentLength">
            <summary>
            获得计算后的内容长度
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpRequestContent.ContentType">
            <summary>
            获得或设置请求数据的发送方式
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpRequestContent.ContentTypeString">
            <summary>
            获得或设置自定义数据类型
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpRequestContent.CheckDisposed">
            <summary>
            检查是否已经被销毁。如果被销毁，则抛出异常
            </summary>
            <exception cref="T:System.ObjectDisposedException">对象已被销毁</exception>
        </member>
        <member name="P:FSLib.Network.Http.HttpRequestContent.Disposed">
            <summary>
            获得当前的对象是否已经被销毁
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpRequestContent.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpRequestContent.Dispose(System.Boolean)">
            <summary>
            销毁当前对象
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:FSLib.Network.Http.HttpRequestMessage">
            <summary>
            HTTP请求信息
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpRequestMessage.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpRequestMessage.#ctor(System.Uri,System.String)">
            <summary>
            创建 <see cref="T:FSLib.Network.Http.HttpRequestMessage" />  的新实例(HttpRequestMessage)
            </summary>
        </member>
        <member name="E:FSLib.Network.Http.HttpRequestMessage.PostInitRequest">
            <summary>
            请求初始化 <see cref="T:System.Net.HttpWebRequest"/> 的结束操作
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpRequestMessage.OnPostInitRequest(FSLib.Network.Http.PostInitRequestEventArgs)">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.HttpRequestMessage.PostInitRequest" /> 事件
            </summary>
            <param name="ea">包含此事件的参数</param>
        </member>
        <member name="P:FSLib.Network.Http.HttpRequestMessage.Context">
            <summary>
            获得上下文环境
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpRequestMessage.InitializeWebRequest(FSLib.Network.Http.HttpContext)">
            <summary>
            初始化请求
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:FSLib.Network.Http.HttpRequestMessage.Normalize(FSLib.Network.Http.HttpClient,FSLib.Network.Http.HttpContext)">
            <summary>
            格式化信息
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpRequestMessage.Accept">
            <summary>
            获得或设置接受类型
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpRequestMessage.AcceptEncoding">
            <summary>
            获得或设置当前HTTP协议的接受编码类型
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpRequestMessage.AgeOrFreshOrStale">
            <summary>
            设置ageOrFreshOrSteal....很麻烦的东西，参阅手册
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpRequestMessage.AllowAutoRedirect">
            <summary>
            获得或设置是否允许自动重定向请求(HTTP 302-Found)
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpRequestMessage.AllowRequestBody">
            <summary>
            获得当前请求是否可以附加主体数据
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpRequestMessage.AllowWriteStreamBuffering">
            <summary>
            是否缓冲写数据
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpRequestMessage.AppendAjaxHeader">
            <summary>
            获得或设置是否在请求中添加Ajax的标记
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpRequestMessage.Async">
            <summary>
            获得或设置是否是异步请求
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpRequestMessage.Authorization">
            <summary>
            获得或设置授权
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpRequestMessage.AutoDecompressGzip">
            <summary>
            获得或设置是否自动解压缩GZIP的响应数据-仅HTTP请求有效
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpRequestMessage.Client">
            <summary>
            获得客户端
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpRequestMessage.CookiesHandleMethod">
            <summary>
            获得或设置cookeis处理逻辑
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpRequestMessage.Dnt">
            <summary>
            获得或设置是否随请求发送DNT标头
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpRequestMessage.Encoding">
            <summary>
            获得或设置编码
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpRequestMessage.ExceptType">
            <summary>
            获得或设置期望的结果类型。如果没有设置，将会根据响应类型返回默认的类型
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpRequestMessage.ExtraRequestInfo">
            <summary>
            获得创建HttpContext的时候原始的额外信息
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpRequestMessage.ForceStreamBufferWithProxy">
            <summary>
            获得或设置是否强制对使用代理的情况进行流缓冲。如果禁止，在某些特定情况下可能会失败并引发异常。
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpRequestMessage.Headers">
            <summary>
            对应HTTP请求的请求标头
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpRequestMessage.HttpCacheAgeControl">
            <summary>
            获得或设置缓存策略
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpRequestMessage.HttpRequestCacheLevel">
            <summary>
            获得或设置缓存标记
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpRequestMessage.IfModifiedSince">
            <summary>
            获得或设置当前请求的日期判断
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpRequestMessage.KeepAlive">
            <summary>
            获得或设置是否保持活动连接
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpRequestMessage.LocalIpEndPoint">
            <summary>
            本地IP地址终端
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpRequestMessage.MaxAge">
            <summary>
            获得或设置最大生命周期
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpRequestMessage.Method">
            <summary>
            获得或设置操作的方法
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpRequestMessage.Origin">
            <summary>
            获得或设置请求的Origin标头
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpRequestMessage.PreAuthenticate">
            <summary>
            获得或设置是否默认预先授权
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpRequestMessage.ReadWriteTimeout">
            <summary>
            获得或设置超时时间
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpRequestMessage.Referer">
            <summary>
            获得或设置引用页地址
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpRequestMessage.ReferUri">
            <summary>
            获得或设置引用页地址
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpRequestMessage.RequestData">
            <summary>
            获得或设置请求数据
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpRequestMessage.SocketReceiveBufferSize">
            <summary>
            获得或设置默认的Socket接收缓存
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpRequestMessage.SyncTime">
            <summary>
            获得或设置失效时间
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpRequestMessage.Timeout">
            <summary>
            获得或设置超时时间
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpRequestMessage.TransferEncoding">
            <summary>
            TransferEncoding
            </summary>
            <value>The transfer encoding.</value>
        </member>
        <member name="P:FSLib.Network.Http.HttpRequestMessage.TransportContext">
            <summary>
            获得传输上下文
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpRequestMessage.Uri">
            <summary>
            获得或设置请求的地址
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpRequestMessage.UseNagleAlgorithm">
            <summary>
            是否使用NagleAlgorithm
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpRequestMessage.UserAgent">
            <summary>
            获得或设置UserAgent
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpRequestMessage.WebProxy">
            <summary>
            获得或设置代理
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpRequestMessage.X509Certificates">
            <summary>
            获得或设置客户端证书
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpRequestMessage.Host">
            <summary>
            获得或设置主机头
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpRequestMessage.Range">
            <summary>
            获得或设置当前请求的范围
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpRequestMessage.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpRequestMessage.CheckDisposed">
            <summary>
            检查是否已经被销毁。如果被销毁，则抛出异常
            </summary>
            <exception cref="T:System.ObjectDisposedException">对象已被销毁</exception>
        </member>
        <member name="T:FSLib.Network.Http.HttpResponseContent">
            <summary>
            响应内容
            </summary>
        </member>
        <member name="E:FSLib.Network.Http.HttpResponseContent.PreContentProcessed">
            <summary>
            
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpResponseContent.OnPreContentProcessed">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.HttpResponseContent.PreContentProcessed"/> 事件
            </summary>
        </member>
        <member name="E:FSLib.Network.Http.HttpResponseContent.PostContentProcessed">
            <summary>
            
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpResponseContent.OnPostContentProcessed">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.HttpResponseContent.PostContentProcessed"/> 事件
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpResponseContent.#ctor(FSLib.Network.Http.HttpContext,FSLib.Network.Http.HttpClient)">
            <summary>
            创建 <see cref="T:FSLib.Network.Http.HttpResponseContent" />  的新实例(HttpResponseContent)
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpResponseContent.CompleteCallback">
            <summary>
            异步处理完成，调用回调
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpResponseContent.OnRequestInitInternal">
            <summary>
            请求初始化的最后时刻调用
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpResponseContent.ProcessResponse(System.IO.Stream)">
            <summary>
            处理响应
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:FSLib.Network.Http.HttpResponseContent.ProcessResponseAsync">
            <summary>
            异步处理响应
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpResponseContent.AsyncData">
            <summary>
            获得处理过程中的异步参数
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpResponseContent.InternalProcessResponse(System.IO.Stream)">
            <summary>
            处理响应
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:FSLib.Network.Http.HttpResponseContent.InternalProcessResponseAsync(FSLib.Network.Http.AsyncStreamProcessData)">
            <summary>
            处理响应
            </summary>
            <param name="async">上下文数据</param>
        </member>
        <member name="M:FSLib.Network.Http.HttpResponseContent.OnRequestInit">
            <summary>
            初始化请求
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpResponseContent.Reset">
            <summary>
            重置状态
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpResponseContent.Client">
            <summary>
            获得当前的请求客户端
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpResponseContent.ContentLength">
            <summary>
            获得内容的实际长度（依据Header来）
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpResponseContent.Context">
            <summary>
            获得当前的上下文环境
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpResponseContent.Exception">
            <summary>
            获得处理中发生的异常
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpResponseContent.RawBinaryData">
            <summary>
            获得响应的二进制内容。不是所有响应结果类型都可用
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpResponseContent.RawStream">
            <summary>
            获得原始响应流。不是所有响应结果类型都可用
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpResponseContent.RawStringResult">
            <summary>
            获得响应的文本内容。不是所有响应结果类型都可用
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpResponseContent.Initialize">
            <summary>
            初始化以便于接收数据
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpResponseContent.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpResponseContent.CheckDisposed">
            <summary>
            检查是否已经被销毁。如果被销毁，则抛出异常
            </summary>
            <exception cref="T:System.ObjectDisposedException">对象已被销毁</exception>
        </member>
        <member name="T:FSLib.Network.Http.HttpResponseMessage">
            <summary>
            HTTP响应信息
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpResponseMessage.WebResponse">
            <summary>
            获得响应内容
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpResponseMessage.#ctor(System.Net.HttpWebResponse)">
            <summary>
            创建 <see cref="T:FSLib.Network.Http.HttpResponseMessage" />  的新实例(HttpResponseMessage)
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpResponseMessage.DecompressionMethod">
            <summary>
            获得当前响应解压缩模式
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpResponseMessage.CheckResponseState">
            <summary>
            检测响应状态
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpResponseMessage.Date">
            <summary>
            获得响应的时间
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpResponseMessage.IsCachedByCdn">
            <summary>
            获得响应是否是CDN的缓存
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpResponseMessage.LastModified">
            <summary>
            获得最后修改
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpResponseMessage.HttpVersion">
            <summary>
            获得HTTP版本
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpResponseMessage.Server">
            <summary>
            获得服务器标头
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpResponseMessage.Method">
            <summary>
            获得响应的方法
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpResponseMessage.ResponseUri">
            <summary>
            获得响应的最终地址
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpResponseMessage.CharacterSet">
            <summary>
            获得响应的字符集
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpResponseMessage.Headers">
            <summary>
            获得响应头
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpResponseMessage.Cookies">
            <summary>
            获得响应的Cookies
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpResponseMessage.Status">
            <summary>
            获得状态码
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpResponseMessage.StatusDescription">
            <summary>
            获得状态码
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpResponseMessage.ContentLength">
            <summary>
            获得响应的内容
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpResponseMessage.ContentType">
            <summary>
            获得响应类型
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpResponseMessage.Redirection">
            <summary>
            获得当前的重定向信息
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpResponseMessage.ContentEncoding">
            <summary>
            获得响应编码
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpResponseMessage.AcceptRange">
            <summary>
            获得接受的域
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpResponseMessage.ContentRange">
            <summary>
            获得当前包含的响应区域
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpResponseMessage.IsPartialContent">
            <summary>
            获得是否是部分响应
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpResponseMessage.Location">
            <summary>
            获得响应标头中的地址
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpResponseMessage.op_Implicit(FSLib.Network.Http.HttpResponseMessage)~System.Net.HttpWebResponse">
            <summary>
            
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="P:FSLib.Network.Http.HttpResponseMessage.Content">
            <summary>
            获得实际的内容
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpResponseMessage.WwwAuthenticate">
            <summary>
            获得请求中的身份验证标记
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpResponseMessage.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpResponseMessage.CheckDisposed">
            <summary>
            检查是否已经被销毁。如果被销毁，则抛出异常
            </summary>
            <exception cref="T:System.ObjectDisposedException">对象已被销毁</exception>
        </member>
        <member name="T:FSLib.Network.Http.HttpSetting">
            <summary>
            HTTP设置
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpSetting.#ctor">
            <summary>
            创建 <see cref="T:FSLib.Network.Http.HttpSetting" />  的新实例(HttpSetting)
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpSetting.CheckObjectTypeSupport(System.Type)">
            <summary>
            校验类型支持度
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpSetting.DisableProxy">
            <summary>
            显式禁用代理
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpSetting.InitializeHttpContext(FSLib.Network.Http.HttpContext)">
            <summary>
            初始化上下文
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:FSLib.Network.Http.HttpSetting.SetAcceptJson">
            <summary>
            设置接受JSON类型的响应
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpSetting.SetAcceptXml">
            <summary>
            设置接受XML类型的响应
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpSetting.SetCloseConnection">
            <summary>
            设置不保持连接
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpSetting.AutoAppendCharsetInContentType">
            <summary>
            获得或设置是否自动为提交数据的 ContentType 添加字符集说明
            </summary>
            <value>如果设置为 <see langword="true"/> ，那么如果提交的指定的 ContentType 没有字符集说明，会自动添加。</value>
        </member>
        <member name="P:FSLib.Network.Http.HttpSetting.ContentPayloadBuilder">
            <summary>
            内容数据包装工厂
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpSetting.CookiesHandleMethod">
            <summary>
            获得或设置cookies处理逻辑
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpSetting.DefaultRetryLimit">
            <summary>
            默认最多重试次数
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpSetting.DefaultRetrySleepTime">
            <summary>
            默认重试的时候等待时间（默认为100）
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpSetting.EnableUrlTokenIdentitier">
            <summary>
            获得或设置是否启用URL字段替换
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpSetting.ErrorResponseObject">
            <summary>
            获得或设置如果请求发生了HTTP协议级别的错误（返回码大于400小于等于599），那么返回什么样的内容 
            </summary>
            <value>The response object.</value>
        </member>
        <member name="P:FSLib.Network.Http.HttpSetting.JsonDeserializationSetting">
            <summary>
            获得或设置JSON反序列化设置
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpSetting.JsonSerializationSetting">
            <summary>
            获得或设置JSON序列化设置
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpSetting.KeepReferBetweenRequest">
            <summary>
            获得或设置是否在不同的请求中保持引用
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpSetting.Proxy">
            <summary>
            获得或设置当前 <see cref="T:FSLib.Network.Http.HttpClient"/> 的使用代理
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpSetting.ReadBufferSize">
            <summary>
            文件操作时获得或设置读取缓冲区大小
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpSetting.SocketReceiveBufferSize">
            <summary>
            获得或设置默认的Socket接收缓存
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpSetting.UseNonstandardCookieParser">
            <summary>
            获得或设置是否重新分析设置Cookies标头（仅供当原Cookies带有逗号值等自带的分析器无法分析的情况使用）
            当启用此属性时，AutoRedirect将会被强行禁用，以防止出错。
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpSetting.WriteBufferSize">
            <summary>
            文件操作时获得或设置写入缓冲区大小
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpSetting.X509Certificates">
            <summary>
            获得客户端证书集合
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpSetting.CertificateManager">
            <summary>
            获得或设置证书管理器
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpSetting.AppendLibAuthorVendor">
            <summary>
            获得或设置是否添加类库作者的UserAgent标记
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpSetting.DisableComptatibleCheck">
            <summary>
            获得或设置是否禁用内置的提示
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpSetting.PreAuthenticate">
            <summary>
            获得或设置是否默认预先授权
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpSetting.DefaultProxy">
            <summary>
            获得或设置默认使用的代理服务器。
            <para>此设置仅仅会影响HttpClient类型的全局代理服务器设置，不会影响到HttpWebRequest的代理服务器设置</para>
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpSetting.ForceStreamBufferWithProxy">
            <summary>
            获得或设置是否强制对使用代理的情况进行流缓冲。如果禁止，在某些特定情况下可能会失败并引发异常。
            </summary>
        </member>
        <member name="F:FSLib.Network.Http.HttpSetting.DefaultUserAgent">
            <summary>
            默认的UserAgent
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpSetting.TreatWebErrorAsTaskFail">
            <summary>
            获得或设置是否将网络请求失败标记为任务失败。
            <para>此设置将会影响到<see cref="!:HttpContext.SendTask()"/>的执行行为。</para>
            <para>如果为true，那么不正确的响应或失败的响应会引发Task的失败，并抛出异常。</para>
            <para>如果设置为false，则任务始终正常完成。</para>
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpSetting.ResolveReferUri">
            <summary>
            获得或设置是否分析引用页地址
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpSetting.CheckAuthorVendor(System.String)">
            <summary>
            检查类库作者标记
            </summary>
            <param name="agent"></param>
            <returns></returns>
        </member>
        <member name="P:FSLib.Network.Http.HttpSetting.AppendAjaxHeader">
            <summary>
            获得或设置是否在请求中添加Ajax的标记
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpSetting.AcceptEncoding">
            <summary>
            获得或设置当前HTTP协议的接受编码类型
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpSetting.LastUri">
            <summary>
            获得或设置最后响应的网址
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpSetting.StringEncoding">
            <summary>
            获得或设置字符编码
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpSetting.Authorization">
            <summary>
            获得或设置当前的授权
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpSetting.AuthorizationManager">
            <summary>
            获得或设置当前的授权管理
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpSetting.LocalIpAddressIpV4">
            <summary>
            获得或设置本地用于发送请求的IP地址
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpSetting.LocalIpAddressIpV6">
            <summary>
            获得或设置本地用于发送请求的IP地址
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpSetting.RemoveStringBom">
            <summary>
            自动移除响应头的BOM标记
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpSetting.Timeout">
            <summary>
            获得或设置默认超时时间
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpSetting.ReadWriteTimeout">
            <summary>
            获得或设置默认超时时间
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpSetting.Headers">
            <summary>
            对应HTTP请求的请求标头
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpSetting.Connection">
            <summary>
            获得或设置当前HTTP协议的保持连接设置
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpSetting.Accept">
            <summary>
            获得或设置当前HTTP协议的接受内容类型
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpSetting.AcceptLanguage">
            <summary>
            获得或设置当前HTTP协议的接受编码类型
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpSetting.UserAgent">
            <summary>
            获得或设置当前HTTP协议的用户协议
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpSetting.TransferEncoding">
            <summary>
            获得或设置当前正文的编码类型
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpSetting.DecodeForSearchCharsetRange">
            <summary>
            搜索Charset标记的默认最大区域（为了节约内存，默认1KB）
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpSetting.KeepAlive">
            <summary>
            获得或设置是否保持活动
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpSetting.UseNagleAlgorithm">
            <summary>
            是否使用NagleAlgorithm
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpSetting.AllowWriteStreamBuffering">
            <summary>
            是否缓冲写数据
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpSetting.AllowAutoDirect">
            <summary>
            是否设置默认允许自动重定向
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpSetting.SpeedMonitorInterval">
            <summary>
            用于计算下载速度时的定时器周期
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpSetting.DefaultRequestContentType">
            <summary>
            获得或设置默认的请求数据类型
            </summary>
            <value>The type of the content.</value>
        </member>
        <member name="T:FSLib.Network.Http.HttpStreamWrapper">
            <summary>
            HTTP数据流的封装
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpStreamWrapper.BaseStream">
            <summary>
            获得原始流
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpStreamWrapper.MirrorStream">
            <summary>
            获得克隆的数据流
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpStreamWrapper.EnableMirror">
            <summary>
            设置是否允许克隆
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpStreamWrapper.#ctor(System.IO.Stream,System.Int64)">
            <summary>
            创建 <see cref="T:FSLib.Network.Http.HttpStreamWrapper" />  的新实例(HttpReponseStreamWrapper)
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpStreamWrapper.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            开始异步写操作。 （考虑使用<see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)"/>进行替换；请参见“备注”部分。）
            </summary>
            <returns>
            表示异步写入的 IAsyncResult（可能仍处于挂起状态）。
            </returns>
            <param name="buffer">从中写入数据的缓冲区。</param><param name="offset"><paramref name="buffer"/> 中的字节偏移量，从此处开始写入。</param><param name="count">最多写入的字节数。</param><param name="callback">可选的异步回调，在完成写入时调用。</param><param name="state">一个用户提供的对象，它将该特定的异步写入请求与其他请求区别开来。</param><exception cref="T:System.IO.IOException">尝试进行的异步写入超过了流的结尾，或者发生了磁盘错误。</exception><exception cref="T:System.ArgumentException">一个或多个参数无效。</exception><exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception><exception cref="T:System.NotSupportedException">当前 Stream 实现不支持写入操作。</exception>
        </member>
        <member name="M:FSLib.Network.Http.HttpStreamWrapper.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            开始异步读操作。 （考虑使用<see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)"/>进行替换；请参见“备注”部分。）
            </summary>
            <returns>
            表示异步读取的 <see cref="T:System.IAsyncResult"/>（可能仍处于挂起状态）。
            </returns>
            <param name="buffer">数据读入的缓冲区。</param><param name="offset"><paramref name="buffer"/> 中的字节偏移量，从该偏移量开始写入从流中读取的数据。</param><param name="count">最多读取的字节数。</param><param name="callback">可选的异步回调，在完成读取时调用。</param><param name="state">一个用户提供的对象，它将该特定的异步读取请求与其他请求区别开来。</param><exception cref="T:System.IO.IOException">尝试的异步读取超过了流的结尾，或者发生了磁盘错误。</exception><exception cref="T:System.ArgumentException">一个或多个参数无效。</exception><exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception><exception cref="T:System.NotSupportedException">当前 Stream 实现不支持读取操作。</exception>
        </member>
        <member name="M:FSLib.Network.Http.HttpStreamWrapper.EndRead(System.IAsyncResult)">
            <summary>
            等待挂起的异步读取完成。
            </summary>
            <returns>
            从流中读取的字节数，介于零 (0) 和所请求的字节数之间。流仅在流的末尾返回零 (0)，否则应一直阻止到至少有 1 个字节可用为止。
            </returns>
            <param name="asyncResult">对要完成的挂起异步请求的引用。</param><exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> 为 null。</exception><exception cref="T:System.ArgumentException"><paramref name="asyncResult"/> 并非源自当前流上的 <see cref="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"/> 方法。</exception><exception cref="T:System.IO.IOException">此流关闭或发生内部错误。</exception>
        </member>
        <member name="M:FSLib.Network.Http.HttpStreamWrapper.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            当在派生类中重写时，从当前流读取字节序列，并将此流中的位置提升读取的字节数。
            </summary>
            <returns>
            读入缓冲区中的总字节数。如果当前可用的字节数没有请求的字节数那么多，则总字节数可能小于请求的字节数；如果已到达流的末尾，则为零 (0)。
            </returns>
            <param name="buffer">字节数组。此方法返回时，该缓冲区包含指定的字符数组，该数组的 <paramref name="offset"/> 和 (<paramref name="offset"/> + <paramref name="count"/> -1) 之间的值由从当前源中读取的字节替换。</param><param name="offset"><paramref name="buffer"/> 中的从零开始的字节偏移量，从此处开始存储从当前流中读取的数据。</param><param name="count">要从当前流中最多读取的字节数。</param><exception cref="T:System.ArgumentException"><paramref name="offset"/> 与 <paramref name="count"/> 的和大于缓冲区长度。</exception><exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> 为 null。</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> 或 <paramref name="count"/> 为负。</exception><exception cref="T:System.IO.IOException">发生 I/O 错误。</exception><exception cref="T:System.NotSupportedException">流不支持读取。</exception><exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:FSLib.Network.Http.HttpStreamWrapper.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            当在派生类中重写时，向当前流中写入字节序列，并将此流中的当前位置提升写入的字节数。
            </summary>
            <param name="buffer">字节数组。此方法将 <paramref name="count"/> 个字节从 <paramref name="buffer"/> 复制到当前流。</param><param name="offset"><paramref name="buffer"/> 中的从零开始的字节偏移量，从此处开始将字节复制到当前流。</param><param name="count">要写入当前流的字节数。</param><exception cref="T:System.ArgumentException"><paramref name="offset"/> 与 <paramref name="count"/> 的和大于缓冲区长度。</exception><exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> 为 null。</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> 或 <paramref name="count"/> 为负。</exception><exception cref="T:System.IO.IOException">发生 I/O 错误。</exception><exception cref="T:System.NotSupportedException">流不支持写入。</exception><exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception><filterpriority>1</filterpriority>
        </member>
        <member name="P:FSLib.Network.Http.HttpStreamWrapper.CanRead">
            <summary>
            当在派生类中重写时，获取指示当前流是否支持读取的值。
            </summary>
            <returns>
            如果流支持读取，为 true；否则为 false。
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:FSLib.Network.Http.HttpStreamWrapper.CanSeek">
            <summary>
            当在派生类中重写时，获取指示当前流是否支持查找功能的值。
            </summary>
            <returns>
            如果流支持查找，为 true；否则为 false。
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:FSLib.Network.Http.HttpStreamWrapper.CanWrite">
            <summary>
            当在派生类中重写时，获取指示当前流是否支持写入功能的值。
            </summary>
            <returns>
            如果流支持写入，为 true；否则为 false。
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="E:FSLib.Network.Http.HttpStreamWrapper.ProgressChanged">
            <summary>
            读取进度发生变化
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpStreamWrapper.OnProgressChanged(FSLib.Network.DataProgressEventArgs)">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.HttpStreamWrapper.ProgressChanged" /> 事件
            </summary>
            <param name="ea">包含此事件的参数</param>
        </member>
        <member name="M:FSLib.Network.Http.HttpStreamWrapper.Close">
            <summary>
            关闭当前流并释放与之关联的所有资源（如套接字和文件句柄）。
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpUtility.ChangeHost(System.Uri,System.String)">
            <summary>
            变更Uri中的主机URI
            </summary>
            <param name="uri"></param>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="T:FSLib.Network.Http.HttpVirtualBytePostFile">
            <summary>
            表示一个内存数据的虚拟上传文件
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpVirtualBytePostFile.Data">
            <summary>
            获得或设置文件内容
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpVirtualBytePostFile.#ctor(System.String,System.Byte[])">
            <summary>
            创建 <see cref="T:FSLib.Network.Http.HttpPostFile" />  的新实例(HttpPostFile)
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpVirtualBytePostFile.#ctor(System.String,System.String,System.Byte[])">
            <summary>
            创建 <see cref="T:FSLib.Network.Http.HttpPostFile" />  的新实例(HttpPostFile)
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpVirtualBytePostFile.ComputeBodyLength">
            <summary>
            计算数据区长度
            </summary>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpVirtualBytePostFile.WriteBody(System.IO.Stream)">
            <summary>
            写入数据区
            </summary>
            <param name="stream"></param>
        </member>
        <member name="T:FSLib.Network.Http.HttpVirtualStreamPostFile">
            <summary>
            模拟的上传文件
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.HttpVirtualStreamPostFile.Stream">
            <summary>
            获得或设置文件内容
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpVirtualStreamPostFile.#ctor(System.IO.Stream)">
            <summary>
            创建 <see cref="T:FSLib.Network.Http.HttpPostFile" />  的新实例(HttpPostFile)
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpVirtualStreamPostFile.#ctor(System.String,System.IO.Stream)">
            <summary>
            创建 <see cref="T:FSLib.Network.Http.HttpPostFile" />  的新实例(HttpPostFile)
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpVirtualStreamPostFile.#ctor(System.String,System.String,System.IO.Stream)">
            <summary>
            创建 <see cref="T:FSLib.Network.Http.HttpPostFile" />  的新实例(HttpPostFile)
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.HttpVirtualStreamPostFile.ComputeBodyLength">
            <summary>
            计算数据区长度
            </summary>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.HttpVirtualStreamPostFile.WriteBody(System.IO.Stream)">
            <summary>
            写入数据区
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:FSLib.Network.Http.ICertificateManager.SetRequest(FSLib.Network.Http.HttpRequestMessage)">
            <summary>
            设置请求的证书 
            </summary>
            <param name="message">请求</param>
        </member>
        <member name="M:FSLib.Network.Http.ICertificateManager.AddCertificates(System.String,System.Security.Cryptography.X509Certificates.X509Certificate[])">
            <summary>
            添加证书到管理器中 
            </summary>
            <param name="host">对应的主机</param>
            <param name="certificates">要添加的证书</param>
        </member>
        <member name="T:FSLib.Network.Http.IContentPayloadBuilder">
            <summary>
            对Response和Request中数据的默认承载
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.IContentPayloadBuilder.GetResponseContent``1(``0,FSLib.Network.Http.GetPreferedResponseTypeEventArgs{``0})">
            <summary>
            获得响应内容的默认承载
            </summary>
            <param name="data">期望的数据类型的默认实例（如果给出已有数据，则为null）</param>
            <returns>负责接收并解析数据的 <see cref="T:FSLib.Network.Http.HttpResponseContent"/></returns>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.IContentPayloadBuilder.WrapRequestContent(System.Object,FSLib.Network.Http.RequestWrapRequestContentEventArgs)">
            <summary>
            对请求数据进行封装
            </summary>
            <param name="data">请求数据</param>
            <returns>包装了数据的 <see cref="T:FSLib.Network.Http.HttpRequestContent"/></returns>
        </member>
        <member name="T:FSLib.Network.Http.IEndPointInfo">
             <summary>
            与请求相关的终端信息
             </summary>
        </member>
        <member name="P:FSLib.Network.Http.IEndPointInfo.RemoteEndPoint">
            <summary>
            获得服务器的终端信息
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.IEndPointInfo.LocalEndPoint">
            <summary>
            获得本地终端信息
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.IEndPointInfo.ServicePoint">
            <summary>
            相关联的IP地址信息
            </summary>
        </member>
        <member name="T:FSLib.Network.Http.IFormData">
            <summary>
            表示对象是表单对象
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.IFormData.GetAllFields">
            <summary>
            获得所有的域
            </summary>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.IFormData.GetAllFiles">
            <summary>
            获得所有要上传的文件
            </summary>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.IFormData.BindData(FSLib.Network.Http.HttpClient,FSLib.Network.Http.HttpContext,FSLib.Network.Http.HttpRequestMessage,FSLib.Network.Http.HttpRequestContent,System.String,System.Int32)">
            <summary>
            绑定内容到请求中
            </summary>
            <param name="client">当前的HTTP客户端</param>
            <param name="context">当前的上下文</param>
            <param name="requestMessage">当前的请求信息</param>
            <param name="content">当前的请求内容对象</param>
            <param name="prefix">前缀：当前绑定之前的父对象路径</param>
            <param name="level">当前绑定的级别</param>
        </member>
        <member name="T:FSLib.Network.Http.IFormDataKeyGenerator">
            <summary>
            表单数据表单名生成工具
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.IFormDataKeyGenerator.MaximumDeepth">
            <summary>
            最大默认深度
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.IFormDataKeyGenerator.Generate(System.String,System.String)">
            <summary>
            生成键名
            </summary>
            <param name="parentKey">上级KEY</param>
            <param name="currentKey">当前名</param>
            <returns>生成的键名</returns>
        </member>
        <member name="M:FSLib.Network.Http.IFormDataKeyGenerator.Generate(System.String,System.Int32)">
            <summary>
            生成键名
            </summary>
            <param name="parentKey">上级KEY</param>
            <param name="index">针对数组元素，当前的索引</param>
            <returns>生成的键名</returns>
        </member>
        <member name="T:FSLib.Network.Http.DefaultFormDataKeyGenerator">
            <summary>
            表单数据表单名生成工具 <see cref="T:FSLib.Network.Http.IFormDataKeyGenerator"/> 的默认实现
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.DefaultFormDataKeyGenerator.MaximumDeepth">
            <summary>
            最大递归深度，默认为2
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.DefaultFormDataKeyGenerator.Generate(System.String,System.String)">
            <summary>
            生成键名
            </summary>
            <param name="parentKey">上级KEY</param>
            <param name="currentKey">当前名</param>
            <returns>生成的键名</returns>
        </member>
        <member name="M:FSLib.Network.Http.DefaultFormDataKeyGenerator.Generate(System.String,System.Int32)">
            <summary>
            生成键名
            </summary>
            <param name="parentKey">上级KEY</param>
            <param name="index">针对数组元素，当前的索引</param>
            <returns>生成的键名</returns>
        </member>
        <member name="T:FSLib.Network.Http.IgnoreFieldAttribute">
            <summary>
            忽略提交
            </summary>
        </member>
        <member name="T:FSLib.Network.Http.IHttpHandler">
            <summary>
            HTTP处理时使用的相关类
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.IHttpHandler.ValidateResponse(FSLib.Network.Http.HttpContext)">
            <summary>
            验证响应。在这里抛出的异常将会导致请求被设置为失败。
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:FSLib.Network.Http.IHttpHandler.OnServerCertificateValidation(System.Object,FSLib.Network.Http.CertificateValidationEventArgs)">
            <summary>
            验证服务器端证书
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:FSLib.Network.Http.IHttpHandler.DecorateResponseStream(FSLib.Network.Http.HttpContext,System.IO.Stream)">
            <summary>
            请求装饰响应流（已处理比如解压后的流）
            </summary>
            <param name="context">关联的上下文</param>
            <param name="orignalStream"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.IHttpHandler.DecorateRawResponseStream(FSLib.Network.Http.HttpContext,System.IO.Stream)">
            <summary>
            请求装饰响应流（原始流）
            </summary>
            <param name="context">关联的上下文</param>
            <param name="orignalStream"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.IHttpHandler.AfterRequestDataPrepared(FSLib.Network.Http.HttpContext)">
            <summary>
            要写入的数据准备完毕
            </summary>
            <param name="context">关联的上下文</param>
        </member>
        <member name="M:FSLib.Network.Http.IHttpHandler.DecorateRequestStream(FSLib.Network.Http.HttpContext,System.IO.Stream)">
            <summary>
            请求装饰写入的流
            </summary>
            <param name="context">关联的上下文</param>
            <param name="orignalStream"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.IHttpHandler.ProcessCookies(FSLib.Network.Http.HttpContext,FSLib.Network.Http.HttpClient)">
            <summary>
            自定义处理Cookies
            </summary>
            <param name="context"></param>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="P:FSLib.Network.Http.IHttpHandler.BaseUri">
            <summary>
            获得或设置BaseURI
            </summary>
        </member>
        <member name="E:FSLib.Network.Http.IHttpHandler.HttpContextCreated">
            <summary>
            已创建上下文
            </summary>
        </member>
        <member name="E:FSLib.Network.Http.IHttpHandler.RequestCreated">
            <summary>
            已创建请求
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.IHttpHandler.GetRequest(System.Uri,System.String,FSLib.Network.Http.HttpContext)">
            <summary>
            获得用于发送请求的Request对象
            </summary>
            <param name="uri"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.IHttpHandler.PrepareContext(FSLib.Network.Http.HttpContext)">
            <summary>
            初始化上下文。此操作在上下文本身初始化完成之后、请求发出之前调用
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:FSLib.Network.Http.IHttpHandler.GetContext(FSLib.Network.Http.HttpClient,FSLib.Network.Http.HttpRequestMessage)">
            <summary>
            创建上下文环境
            </summary>
            <param name="client"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.IHttpHandler.GetContext``1(FSLib.Network.Http.HttpClient,FSLib.Network.Http.HttpRequestMessage)">
            <summary>
            创建上下文环境
            </summary>
            <param name="client"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.IHttpHandler.ResolveUri(System.Nullable{System.Net.HttpRequestHeader},System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            解析URL字符串为URI
            </summary>
            <param name="header">解析后的地址使用的位置</param>
            <param name="url">字符串地址</param>
            <param name="data">获得或设置相关联的数据</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.IHttpHandler.WrapRequestContent(FSLib.Network.Http.HttpClient,FSLib.Network.Http.HttpRequestContent,System.Object,System.Nullable{FSLib.Network.Http.ContentType})">
            <summary>
            请求转换请求承载的内容为最终可以发送的数据，并确定其承载方式
            </summary>
            <param name="client">当前的客户端</param>
            <param name="requestContent">当前的请求数据</param>
            <param name="data">要发送的数据</param>
            <param name="contentTypeType">承载的方式</param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.IHttpHandler.GetPreferedResponseType``1(FSLib.Network.Http.HttpClient,FSLib.Network.Http.HttpContext,FSLib.Network.Http.HttpResponseContent,System.EventHandler{FSLib.Network.Http.ResponseStreamContent.RequireProcessStreamEventArgs},``0,System.IO.Stream,System.String)">
            <summary>
            获得比较最适合的用于处理响应的类型
            </summary>
            <typeparam name="T">当前希望获得的结果</typeparam>
            <param name="client">当前的HTTP客户端</param>
            <param name="ctx">当前的上下文环境</param>
            <param name="responseContent">当前用来处理结果的对象</param>
            <param name="streamInvoker">如果希望能按流处理，那么用来处理响应的事件委托</param>
            <param name="result">当前希望获得的结果实例</param>
            <param name="targetStream">要将相应内容写入的流</param>
            <param name="saveToFilePath">要将当前请求写入的文件路径</param>
            <returns></returns>
        </member>
        <member name="T:FSLib.Network.Http.IPAddressFamilyMismatchException">
            <summary>
            地址族不匹配错误
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.IPAddressFamilyMismatchException.RemoteEndPoint">
            <summary>
            远程地址
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.IPAddressFamilyMismatchException.LocalEndpoint">
            <summary>
            本地地址
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.IPAddressFamilyMismatchException.#ctor(System.Net.IPEndPoint,System.Net.IPEndPoint)">
            <summary>
            新建对象
            </summary>
            <param name="remoteEndPoint"></param>
            <param name="localEndpoint"></param>
        </member>
        <member name="T:FSLib.Network.Http.IRequestContentBuilder`1">
            <summary>
            数据发送包装接口，表示当前对象支持将数据进行包装以便于在请求中发送
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:FSLib.Network.Http.IRequestContentBuilder`1.BuildRequestContent(`0,FSLib.Network.Http.RequestWrapRequestContentEventArgs)">
            <summary>
            创建数据类
            </summary>
            <param name="data">要发送的数据</param>
            <returns>用于发送指定数据的 <see cref="T:FSLib.Network.Http.HttpRequestContent"/> 类</returns>
        </member>
        <member name="T:FSLib.Network.Http.IResponseContentBuilder`1">
            <summary>
            数据接收处理接口
            </summary>
            <typeparam name="T">要接收的数据类型</typeparam>
        </member>
        <member name="M:FSLib.Network.Http.IResponseContentBuilder`1.BuildResponseContentWrap(`0,FSLib.Network.Http.GetPreferedResponseTypeEventArgs{`0})">
            <summary>
            创建数据类
            </summary>
            <param name="data">要发送的数据</param>
            <returns>用于发送指定数据的 <see cref="T:FSLib.Network.Http.HttpRequestContent"/> 类</returns>
        </member>
        <member name="T:FSLib.Network.Http.JsonSetting">
            <summary>
            JSON设置基类
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.JsonSetting.#ctor">
            <summary>
            新建一个 <see cref="T:FSLib.Network.Http.JsonSetting"/> 的实例
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.JsonSetting.Setting">
            <summary>
            获得或设置用于序列化的设置
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.JsonSetting.JsonConverts">
            <summary>
            获得或设置用于反序列化的Json反序列化类
            </summary>
        </member>
        <member name="T:FSLib.Network.Http.JsonSerializationSetting">
            <summary>
            序列化类时的设置
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.JsonSerializationSetting.Formatting">
            <summary>
            获得或设置用于序列化的格式设置
            </summary>
        </member>
        <member name="T:FSLib.Network.Http.JsonDeserializationSetting">
            <summary>
            反序列化类时的设置
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.JsonDeserializationSetting.KeepOriginalObject">
            <summary>
            获得或设置在创建结果的过程中，如果已经提供了原始对象，是否保持原有对象不变。
            <para>如果设置为false，则会创建新对象。如果设置为true，则会使用源对象并填充数据</para>
            <para>默认为ture，此设置与JSON.NET库自身的反序列化设置并没有关系。</para>
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.JsonDeserializationSetting.#ctor">
            <summary>
            创建 <see cref="T:FSLib.Network.Http.JsonDeserializationSetting" />  的新实例(JsonDeserializationSetting)
            </summary>
        </member>
        <member name="T:FSLib.Network.Http.ObjectSerializationNotSupportException">
            <summary>
            对象不支持序列化异常
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.ObjectSerializationNotSupportException.#ctor(System.Type,System.Exception)">
            <summary>
            新建 <see cref="T:FSLib.Network.Http.ObjectSerializationNotSupportException"/> 对象
            </summary>
            <param name="type"></param>
            <param name="ex"></param>
        </member>
        <member name="T:FSLib.Network.Http.ObjectSerializationType">
            <summary>
            对象序列化类型
            </summary>
        </member>
        <member name="F:FSLib.Network.Http.ObjectSerializationType.Xml">
            <summary>
            XML序列化
            </summary>
        </member>
        <member name="F:FSLib.Network.Http.ObjectSerializationType.Json">
            <summary>
            JSON序列化
            </summary>
        </member>
        <member name="T:FSLib.Network.Http.ObjectSerializeAttribute">
            <summary>
            表示对象序列化属性
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.ObjectSerializeAttribute.SerializeType">
            <summary>
            获得序列化类型
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.ObjectSerializeAttribute.#ctor(FSLib.Network.Http.ObjectSerializationType)">
            <summary>
            创建 <see cref="T:FSLib.Network.Http.ObjectSerializeAttribute" />  的新实例(ObjectSerializeAttribute)
            </summary>
        </member>
        <member name="T:FSLib.Network.Http.PostInitRequestEventArgs">
            <summary>
            包含事件 <see cref="!:HttpSetting.PostInitRequest"/> 的数据
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.PostInitRequestEventArgs.Request">
            <summary>
            获得相关联的 <see cref="T:System.Net.HttpWebRequest"/>
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.PostInitRequestEventArgs.HttpContext">
            <summary>
            获得相关联的 <see cref="P:FSLib.Network.Http.PostInitRequestEventArgs.HttpContext"/>
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.PostInitRequestEventArgs.HttpClient">
            <summary>
            获得相关联的 <see cref="P:FSLib.Network.Http.PostInitRequestEventArgs.HttpClient"/>
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.PostInitRequestEventArgs.#ctor(System.Net.HttpWebRequest,FSLib.Network.Http.HttpContext,FSLib.Network.Http.HttpClient)">
            <summary>
            创建 <see cref="T:FSLib.Network.Http.PostInitRequestEventArgs" />  的新实例(PostInitRequestEventArgs)
            </summary>
            <param name="request"></param>
            <param name="httpContext"></param>
            <param name="httpClient"></param>
        </member>
        <member name="T:FSLib.Network.Http.Range">
            <summary>
            表示接收到的区域标记
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.Range.From">
            <summary>
            表示开始位置
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.Range.To">
            <summary>
            获得结束位置
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.Range.Total">
            <summary>
            获得总长度
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.Range.AcceptRange">
            <summary>
            获得接受单位
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.Range.#ctor(System.String,System.Int64,System.Int64,System.Int64)">
            <summary>
            创建 <see cref="T:FSLib.Network.Http.Range" />  的新实例(Range)
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.Range.#ctor(System.String)">
            <summary>
            创建 <see cref="T:FSLib.Network.Http.Range" />  的新实例(Range)
            </summary>
        </member>
        <member name="T:FSLib.Network.Http.RequestByteBufferContent">
            <summary>
            字节数组上传数据
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.RequestByteBufferContent.WriteTo(System.IO.Stream)">
            <summary>
            写入内容到流中
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:FSLib.Network.Http.RequestByteBufferContent.WriteToAsync(FSLib.Network.Http.AsyncStreamProcessData)">
            <summary>
            
            </summary>
            <param name="asyncData"></param>
        </member>
        <member name="M:FSLib.Network.Http.RequestByteBufferContent.ComputeLength">
            <summary>
            计算长度
            </summary>
            <returns></returns>
        </member>
        <member name="P:FSLib.Network.Http.RequestByteBufferContent.Buffer">
            <summary>
            获得或设置缓冲内容
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.RequestByteBufferContent.Offset">
            <summary>
            获得或设置索引
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.RequestByteBufferContent.Length">
            <summary>
            获得或设置长度
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.RequestByteBufferContent.#ctor(System.Byte[],System.Nullable{System.Int32},System.Nullable{System.Int32},FSLib.Network.Http.ContentType)">
            <summary>
            创建 <see cref="T:FSLib.Network.Http.RequestByteBufferContent" />  的新实例(ByteBufferContent)
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.RequestByteBufferContent.op_Implicit(FSLib.Network.Http.RequestByteBufferContent)~System.Byte[]">
            <summary>
            
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.RequestByteBufferContent.op_Implicit(System.Byte[])~FSLib.Network.Http.RequestByteBufferContent">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="T:FSLib.Network.Http.RequestContentBuilderAttribute">
            <summary>
            标记当前类型使用的数据处理类
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.RequestContentBuilderAttribute.Type">
            <summary>
            数据处理类类型
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.RequestContentBuilderAttribute.#ctor(System.Type)">
            <summary>
            创建 <see cref="T:FSLib.Network.Http.ResponseContentBuilderAttribute" />  的新实例(ResponseContentBuilderAttribute)
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:FSLib.Network.Http.RequestCopyStreamContent">
            <summary>
            表示向当前HTTP请求的一个写入流内容
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.RequestCopyStreamContent.Stream">
            <summary>
            获得或设置文件内容
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.RequestCopyStreamContent.#ctor(System.IO.Stream,FSLib.Network.Http.ContentType)">
            <summary>
            创建 <see cref="T:FSLib.Network.Http.HttpPostFile" />  的新实例(HttpPostFile)
            </summary>
            <exception cref="T:System.ArgumentNullException">stream</exception>
            <exception cref="T:System.InvalidOperationException">流不可读或不可搜索. </exception>
        </member>
        <member name="M:FSLib.Network.Http.RequestCopyStreamContent.WriteTo(System.IO.Stream)">
            <summary>
            写入内容到流中
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:FSLib.Network.Http.RequestCopyStreamContent.ComputeLength">
            <summary>
            计算长度
            </summary>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.RequestCopyStreamContent.op_Implicit(FSLib.Network.Http.RequestCopyStreamContent)~System.IO.Stream">
            <summary>
            允许隐式转换为流
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.RequestCopyStreamContent.op_Implicit(System.IO.Stream)~FSLib.Network.Http.RequestCopyStreamContent">
            <summary>
            允许隐式转换为流
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.RequestCopyStreamContent.WriteToAsync(FSLib.Network.Http.AsyncStreamProcessData)">
            <summary>
            异步将数据写入当前的请求流中
            </summary>
            <param name="asyncData"></param>
        </member>
        <member name="M:FSLib.Network.Http.RequestCopyStreamContent.PrepareData">
            <summary>
            准备数据
            </summary>
        </member>
        <member name="T:FSLib.Network.Http.RequestFormDataContent">
            <summary>
            表单数据
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.RequestFormDataContent.#ctor(FSLib.Network.Http.ContentType)">
            <summary>
            创建 <see cref="T:FSLib.Network.Http.RequestFormDataContent" />  的新实例(RequestFormDataContent)
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.RequestFormDataContent.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},FSLib.Network.Http.ContentType)">
            <summary>
            创建 <see cref="T:FSLib.Network.Http.RequestFormDataContent" />  的新实例(RequestFormDataContent)
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.RequestFormDataContent.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:FSLib.Network.Http.RequestFormDataContent.ProcessData">
            <summary>
            预处理数据
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.RequestFormDataContent.PostedFile">
            <summary>
            获得附加的文件列表
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.RequestFormDataContent.ProcessedData">
            <summary>
            已处理(转义)后的数据
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.RequestFormDataContent.SerializedDataString">
            <summary>
            获得序列化之后的数据
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.RequestFormDataContent.RequestBoundary">
            <summary>
            获得或设置请求的分界
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.RequestFormDataContent.StringField">
            <summary>
            获得文本域
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.RequestFormDataContent.SerializeAsQueryString">
            <summary>
            将当前的内容序列化到查询中
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.RequestFormDataContent.WriteTo(System.IO.Stream)">
            <summary>
            写入内容到流中
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:FSLib.Network.Http.RequestFormDataContent.WriteToAsync(FSLib.Network.Http.AsyncStreamProcessData)">
            <summary>
            异步将数据写入当前的请求流中
            </summary>
            <param name="asyncData"></param>
        </member>
        <member name="M:FSLib.Network.Http.RequestFormDataContent.ComputeLength">
            <summary>
            计算长度
            </summary>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.RequestFormDataContent.PrepareData">
            <summary>
            准备数据
            </summary>
        </member>
        <member name="T:FSLib.Network.Http.RequestImageField">
            <summary>
            表示一个表单中的图像域
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.RequestImageField.Image">
            <summary>
            图像对象
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.RequestImageField.ImageFormat">
            <summary>
            图像格式
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.RequestImageField.Quality">
            <summary>
            保存的质量（仅JPEG）
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.RequestImageField.#ctor(System.Drawing.Image,System.Drawing.Imaging.ImageFormat,System.Int32,System.String,System.String)">
            <summary>
            表示一个上传的域
            </summary>
            <param name="image"></param>
            <param name="format"></param>
            <param name="quality"></param>
            <param name="fieldName"></param>
            <param name="filePath"></param>
        </member>
        <member name="M:FSLib.Network.Http.RequestImageField.ComputeLength">
            <summary>
            计算长度(含开始信息)
            </summary>
            <returns></returns>
        </member>
        <member name="T:FSLib.Network.Http.RequestJsonContent">
            <summary>
            以JSON模式发送的对象
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.RequestJsonContent.#ctor(System.String)">
            <summary>
            新建一个JSON请求内容对象
            </summary>
            <param name="jsonContent"></param>
        </member>
        <member name="M:FSLib.Network.Http.RequestJsonContent.#ctor(System.Object)">
            <summary>
            新建一个JSON请求内容对象
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:FSLib.Network.Http.RequestJsonContent.Prepare(System.Net.HttpWebRequest)">
            <summary>
            准备发出请求
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:FSLib.Network.Http.RequestJsonContent.WriteTo(System.IO.Stream)">
            <summary>
            写入内容到流中
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:FSLib.Network.Http.RequestJsonContent.WriteToAsync(FSLib.Network.Http.AsyncStreamProcessData)">
            <summary>
            异步将数据写入当前的请求流中
            </summary>
            <param name="asyncData"></param>
        </member>
        <member name="M:FSLib.Network.Http.RequestJsonContent.ComputeLength">
            <summary>
            计算长度
            </summary>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.RequestJsonContent.Dispose(System.Boolean)">
            <summary>
            销毁当前对象
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:FSLib.Network.Http.RequestObjectContent`1">
            <summary>
            表示一个对象
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.RequestObjectContent`1.#ctor(`0,FSLib.Network.Http.ContentType)">
            <summary>
            创建 <see>
                <cref>RequestObjectContent</cref>
            </see>
                的新实例(RequestObjectContent)
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.RequestObjectContent`1.BindObject(System.Object,System.String,System.Int32)">
            <summary>
            绑定对象数据
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.RequestObjectContent`1.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:FSLib.Network.Http.RequestObjectContent`1.PrepareData">
            <summary>
            准备数据
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.RequestObjectContent`1.KeyGenerator">
            <summary>
            获得或创建当前默认使用的命名生成类
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.RequestObjectContent`1.Object">
            <summary>
            获得要上传的对象
            </summary>
        </member>
        <member name="T:FSLib.Network.Http.RequestStringContent">
            <summary>
            表示提交一个字符串的请求内容
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.RequestStringContent.SerializeAsQueryString">
            <summary>
            将当前的内容序列化到查询中
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.RequestStringContent.WriteTo(System.IO.Stream)">
            <summary>
            写入内容到流中
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:FSLib.Network.Http.RequestStringContent.ComputeLength">
            <summary>
            计算长度
            </summary>
            <returns></returns>
        </member>
        <member name="P:FSLib.Network.Http.RequestStringContent.Content">
            <summary>
            获得或设置要写入的内容
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.RequestStringContent.#ctor(System.String,FSLib.Network.Http.ContentType)">
            <summary>
            创建 <see cref="T:FSLib.Network.Http.RequestStringContent" />  的新实例(StringContent)
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.RequestStringContent.op_Implicit(FSLib.Network.Http.RequestStringContent)~System.String">
            <summary>
            
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.RequestStringContent.op_Implicit(System.String)~FSLib.Network.Http.RequestStringContent">
            <summary>
            
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.RequestStringContent.WriteToAsync(FSLib.Network.Http.AsyncStreamProcessData)">
            <summary>
            异步将数据写入当前的请求流中
            </summary>
            <param name="asyncData"></param>
        </member>
        <member name="T:FSLib.Network.Http.RequestWrapRequestContentEventArgs">
            <summary>
            包含了请求将发送数据包装为请求承载数据的事件参数
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.RequestWrapRequestContentEventArgs.HttpClient">
            <summary>
            获得当前的客户端
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.RequestWrapRequestContentEventArgs.Data">
            <summary>
            获得要发送的数据
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.RequestWrapRequestContentEventArgs.ExtraRequestInfo">
            <summary>
            额外的请求信息
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.RequestWrapRequestContentEventArgs.RequestContent">
            <summary>
            获得或设置对应的数据承载对象
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.RequestWrapRequestContentEventArgs.Handled">
            <summary>
            获得或设置已处理的标记
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.RequestWrapRequestContentEventArgs.#ctor(FSLib.Network.Http.HttpClient,System.Object,FSLib.Network.Http.ExtraRequestInfo)">
            <summary>
            创建 <see cref="T:FSLib.Network.Http.RequestWrapRequestContentEventArgs" />  的新实例(RequestWrapRequestContentEventArgs)
            </summary>
            <param name="httpClient"></param>
            <param name="data"></param>
            <param name="extraRequestInfo">额外的请求信息</param>
        </member>
        <member name="T:FSLib.Network.Http.RequestXmlContent">
            <summary>
            XML格式的请求内容
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.RequestXmlContent.Xml">
            <summary>
            获得或设置要发送的XML文本
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.RequestXmlContent.#ctor(System.String,FSLib.Network.Http.ContentType)">
            <summary>
            创建 <see cref="T:FSLib.Network.Http.RequestXmlContent"/> 的新对象类型
            </summary>
            <param name="xml"></param>
            <param name="contentType"></param>
        </member>
        <member name="M:FSLib.Network.Http.RequestXmlContent.#ctor(System.Xml.XmlDocument,FSLib.Network.Http.ContentType)">
            <summary>
            创建 <see cref="T:FSLib.Network.Http.RequestXmlContent"/> 的新对象类型
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.RequestXmlContent.#ctor(System.Object,FSLib.Network.Http.ContentType)">
            <summary>
            创建 <see cref="T:FSLib.Network.Http.RequestXmlContent"/> 的新对象类型
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.RequestXmlContent.ConvertToXmlString(System.Object)">
            <summary>
            获得请求内容
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.RequestXmlContent.Prepare(System.Net.HttpWebRequest)">
            <summary>
            准备发出请求
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:FSLib.Network.Http.RequestXmlContent.Dispose(System.Boolean)">
            <summary>
            销毁当前对象
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:FSLib.Network.Http.ResponseBinaryContent">
             <summary>
            
             </summary>
        </member>
        <member name="M:FSLib.Network.Http.ResponseBinaryContent.#ctor(FSLib.Network.Http.HttpContext,FSLib.Network.Http.HttpClient)">
            <summary>
            创建 <see cref="T:FSLib.Network.Http.ResponseBinaryContent"/>  的新实例(HttpBinaryResponse)
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.ResponseBinaryContent.CheckUtf8Bom">
            <summary>
            判断是否有UTF8标头
            </summary>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.ResponseBinaryContent.GetDataString">
            <summary>
            获得结果的字符串表现形式
            </summary>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.ResponseBinaryContent.GetDataString(System.Boolean)">
            <summary>
            使用指定的 <see cref="P:FSLib.Network.Http.ResponseBinaryContent.ResponseTextEncoding"/> 来获得最终的结果字符串
            </summary>
            <param name="removeBom">是否已经检测到BOM头。如果为 <see langword="true" />，则表明已经检测到了BOM头，最好能移除BOM头</param>
            <returns>代表结果的 <see langword="string"/></returns>
        </member>
        <member name="M:FSLib.Network.Http.ResponseBinaryContent.ProcessFinalResponse">
            <summary>
            请求处理最后的内容
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.ResponseBinaryContent.Reset">
            <summary>
            重置状态
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.ResponseBinaryContent.RawBinaryData">
            <summary>
            获得响应的二进制内容。不是所有响应结果类型都可用
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.ResponseBinaryContent.RawStream">
            <summary>
            获得原始响应流。不是所有响应结果类型都可用
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.ResponseBinaryContent.RawStringResult">
            <summary>
            获得响应的文本内容。不是所有响应结果类型都可用
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.ResponseBinaryContent.ResponseTextEncoding">
            <summary>
            获得响应文本编码
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.ResponseBinaryContent.Result">
            <summary>
            获得结果
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.ResponseBinaryContent.ResultStream">
            <summary>
            获得响应的内存流
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.ResponseBinaryContent.StringResult">
            <summary>
            获得字符串结果
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.ResponseBinaryContent.ProcessResponse(System.IO.Stream)">
            <summary>
            处理响应
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:FSLib.Network.Http.ResponseBinaryContent.ProcessResponseAsync">
            <summary>
            异步处理响应
            </summary>
        </member>
        <member name="T:FSLib.Network.Http.ResponseContentBuilderAttribute">
            <summary>
            标记当前类型使用的数据处理类
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.ResponseContentBuilderAttribute.Type">
            <summary>
            数据处理类类型
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.ResponseContentBuilderAttribute.#ctor(System.Type)">
            <summary>
            创建 <see cref="T:FSLib.Network.Http.ResponseContentBuilderAttribute" />  的新实例(ResponseContentBuilderAttribute)
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:FSLib.Network.Http.ResponseContentType">
            <summary>
            返回的结果类型
            </summary>
        </member>
        <member name="F:FSLib.Network.Http.ResponseContentType.Unknown">
            <summary>
            未知类型
            </summary>
        </member>
        <member name="F:FSLib.Network.Http.ResponseContentType.Json">
            <summary>
            JSON格式
            </summary>
        </member>
        <member name="F:FSLib.Network.Http.ResponseContentType.JsonP">
            <summary>
            JSONP格式
            </summary>
        </member>
        <member name="F:FSLib.Network.Http.ResponseContentType.Xml">
            <summary>
            XML格式
            </summary>
        </member>
        <member name="F:FSLib.Network.Http.ResponseContentType.Binary">
            <summary>
            二进制格式
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.ResponseCopyStreamContent.Stream">
            <summary>
            获得关联的流
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.ResponseCopyStreamContent.#ctor(FSLib.Network.Http.HttpContext,FSLib.Network.Http.HttpClient,System.IO.Stream)">
            <summary>
            创建 <see cref="T:FSLib.Network.Http.HttpResponseContent" />  的新实例(HttpResponseContent)
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.ResponseCopyStreamContent.ProcessResponse(System.IO.Stream)">
            <summary>
            处理响应
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:FSLib.Network.Http.ResponseCopyStreamContent.ProcessResponseAsync">
            <summary>
            异步处理响应
            </summary>
        </member>
        <member name="T:FSLib.Network.Http.ResponseFileContent">
            <summary>
            保存为文件的响应
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.ResponseFileContent.PreDownloadDataLength">
            <summary>
            本次下载之前就已经下载的长度
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.ResponseFileContent.FilePath">
            <summary>
            获得或设置要保存到的文件
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.ResponseFileContent.Success">
            <summary>
            获得是否保存成功
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.ResponseFileContent.EnableRestartProcess">
            <summary>
            获得或设置使用启用断点续传
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.ResponseFileContent.#ctor(FSLib.Network.Http.HttpContext,FSLib.Network.Http.HttpClient,System.String)">
            <summary>
            创建 <see cref="T:FSLib.Network.Http.HttpResponseContent" />  的新实例(HttpResponseContent)
            </summary>
        </member>
        <member name="E:FSLib.Network.Http.ResponseFileContent.OpenWriteStream">
            <summary>
            请求目标写入流
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.ResponseFileContent.OnRequestInitInternal">
            <summary>
            请求初始化的最后时刻调用
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.ResponseFileContent.ProcessResponse(System.IO.Stream)">
            <summary>
            处理响应
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:FSLib.Network.Http.ResponseFileContent.ProcessResponseAsync">
            <summary>
            异步处理响应
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.ResponseFileContent.Dispose(System.Boolean)">
             <summary>
            
             </summary>
             <param name="disposing"></param>
        </member>
        <member name="M:FSLib.Network.Http.ResponseFileContent.GetWriteStream">
            <summary>
            打开写入的目标流
            </summary>
            <returns></returns>
        </member>
        <member name="T:FSLib.Network.Http.ResponseImageContent">
            <summary>
            
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.ResponseImageContent.#ctor(FSLib.Network.Http.HttpContext,FSLib.Network.Http.HttpClient)">
            <summary>
            创建 <see cref="T:FSLib.Network.Http.ResponseImageContent"/>  的新实例(HttpImageResponse)
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.ResponseImageContent.Image">
            <summary>
            获得创建的图像
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.ResponseImageContent.ProcessFinalResponse">
            <summary>
            请求处理最后的内容
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.ResponseImageContent.Reset">
            <summary>
            重置状态
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.ResponseImageContent.ToString">
            <summary>
            返回表示当前 <see cref="T:System.Object"/> 的 <see cref="T:System.String"/>。
            </summary>
            <returns>
            <see cref="T:System.String"/>，表示当前的 <see cref="T:System.Object"/>。
            </returns>
        </member>
        <member name="M:FSLib.Network.Http.ResponseObjectContentBase`1.#ctor(FSLib.Network.Http.HttpContext,FSLib.Network.Http.HttpClient)">
            <summary>
            创建 <see cref="T:FSLib.Network.Http.ResponseObjectContentBase`1"/>  的新实例(HttpObjectResponseContent)
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.ResponseObjectContentBase`1.Object">
            <summary>
            获得反序列化的结果
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.ResponseObjectContentBase`1.ContentType">
            <summary>
            返回的数据类型
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.ResponseObjectContentBase`1.Reset">
            <summary>
            重置状态
            </summary>
        </member>
        <member name="T:FSLib.Network.Http.ResponseObjectContent`1">
            <summary>
            反序列化结果
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:FSLib.Network.Http.ResponseObjectContent`1.#ctor(FSLib.Network.Http.HttpContext,FSLib.Network.Http.HttpClient)">
            <summary>
            创建 <see cref="T:FSLib.Network.Http.ResponseObjectContentBase`1"/>  的新实例(HttpObjectResponseContent)
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.ResponseObjectContent`1.ProcessFinalResponse">
            <summary>
            请求处理最后的内容
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.ResponseObjectContent`1.JsonpCallbackName">
            <summary>
            当返回是JsonP的时候，对应的回调函数名
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.ResponseObjectContent`1.IsBinaryContent">
            <summary>
            判断当前的响应是否是二进制响应。如果不是，则会尝试进行文本的反序列化
            </summary>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.ResponseObjectContent`1.GetJsonPContent(System.String)">
            <summary>
            从一段文本中获得JSON内容
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.ResponseObjectContent`1.Reset">
            <summary>
            重置状态
            </summary>
        </member>
        <member name="T:FSLib.Network.Http.ResponseObjectWrapper">
            <summary>
            类型 ResponseObjectWrapper
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.ResponseObjectWrapper.Wrap``1(``0)">
            <summary>
            将指定的对象 <typeparamref name="T"/> 封装为封装对象 <see cref="T:FSLib.Network.Http.ResponseObjectWrapper`1"/>
            </summary>
            <param name="obj">要封装的对象</param>
            <typeparam name="T">要封装的对象类型</typeparam>
            <returns>封装的结果</returns>
        </member>
        <member name="T:FSLib.Network.Http.ResponseObjectWrapper`1">
            <summary>
            类 ResponseObjectWrapper.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:FSLib.Network.Http.ResponseObjectWrapper`1.ObjectInternal">
            <summary>
            获得或设置内部对象
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.ResponseObjectWrapper`1.op_Implicit(FSLib.Network.Http.ResponseObjectWrapper{`0})~`0">
            <summary>
            Performs an implicit conversion from <see cref="T:FSLib.Network.Http.ResponseObjectWrapper`1"/> to <see cref="!:T"/>.
            </summary>
            <param name="wrapper">The wrapper.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:FSLib.Network.Http.ResponseObjectWrapper`1.op_Implicit(`0)~FSLib.Network.Http.ResponseObjectWrapper{`0}">
            <summary>
            Performs an implicit conversion from <see cref="!:T"/> to <see cref="T:FSLib.Network.Http.ResponseObjectWrapper`1"/>.
            </summary>
            <param name="obj">The object.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:FSLib.Network.Http.ResponseStreamContent">
            <summary>
            一个响应流
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.ResponseStreamContent.#ctor(FSLib.Network.Http.HttpContext,FSLib.Network.Http.HttpClient)">
            <summary>
            创建 <see cref="T:FSLib.Network.Http.HttpResponseContent" />  的新实例(HttpResponseContent)
            </summary>
        </member>
        <member name="T:FSLib.Network.Http.ResponseStreamContent.RequireProcessStreamEventArgs">
            <summary>
            包含流处理请求的事件参数
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.ResponseStreamContent.RequireProcessStreamEventArgs.Stream">
            <summary>
            请求处理的流
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.ResponseStreamContent.RequireProcessStreamEventArgs.Buffer">
            <summary>
            获得读取到的数据缓存（仅异步模式下有效）
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.ResponseStreamContent.RequireProcessStreamEventArgs.Count">
            <summary>
            获得读取到的数据长度（仅异步模式下有效）
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.ResponseStreamContent.RequireProcessStreamEventArgs.#ctor(System.IO.Stream)">
            <summary>
            创建 <see cref="T:FSLib.Network.Http.ResponseStreamContent.RequireProcessStreamEventArgs" />  的新实例(RequireProcessStreamEventArgs)
            </summary>
        </member>
        <member name="E:FSLib.Network.Http.ResponseStreamContent.RequireProcessStream">
            <summary>
            请求处理流
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.ResponseStreamContent.OnRequireProcessStream(FSLib.Network.Http.ResponseStreamContent.RequireProcessStreamEventArgs)">
            <summary>
            引发 <see cref="E:FSLib.Network.Http.ResponseStreamContent.RequireProcessStream" /> 事件
            </summary>
            <param name="ea">包含此事件的参数</param>
        </member>
        <member name="M:FSLib.Network.Http.ResponseStreamContent.ProcessResponse(System.IO.Stream)">
            <summary>
            处理响应
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:FSLib.Network.Http.ResponseStreamContent.ProcessResponseAsync">
            <summary>
            异步处理响应
            </summary>
        </member>
        <member name="T:FSLib.Network.Http.ResponseStringContent">
            <summary>
            表示字符串响应
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.ResponseStringContent.#ctor(FSLib.Network.Http.HttpContext,FSLib.Network.Http.HttpClient)">
            <summary>
            创建 <see cref="T:FSLib.Network.Http.ResponseStringContent"/>  的新实例(ResponseStringContent)
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.ResponseStringContent.Result">
            <summary>
            获得响应内容
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.ResponseStringContent.ToString">
            <summary>
            返回表示当前对象的字符串。
            </summary>
            <returns>
            表示当前对象的字符串。
            </returns>
        </member>
        <member name="T:FSLib.Network.Http.ResponseXmlContent">
            <summary>
            
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.ResponseXmlContent.#ctor(FSLib.Network.Http.HttpContext,FSLib.Network.Http.HttpClient,System.Xml.XmlDocument)">
            <summary>
            创建 <see cref="T:FSLib.Network.Http.ResponseXmlContent"/>  的新实例(HttpXmlResponse)
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.ResponseXmlContent.XmlDocument">
            <summary>
            获得XML文档
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.ResponseXmlContent.ProcessFinalResponse">
            <summary>
            请求处理最后的内容
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.ResponseXmlContent.Reset">
            <summary>
            重置状态
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.ResponseXmlContent.ToString">
            <summary>
            返回表示当前对象的字符串。
            </summary>
            <returns>
            表示当前对象的字符串。
            </returns>
        </member>
        <member name="T:FSLib.Network.Http.Scripts.BaiduRequestCookiesFixer">
            <summary>
            自动修复百度主页的cookies
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.Scripts.BaiduRequestCookiesFixer.Enable">
            <summary>
            启用自动修复
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.Scripts.BaiduRequestCookiesFixer.Disable">
            <summary>
            禁用自动修复
            </summary>
        </member>
        <member name="T:FSLib.Network.Http.Scripts.DigitalWzbAutoBypass">
            <summary>
            数字的网站宝防CC攻击脚本
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.Scripts.DigitalWzbAutoBypass.Disable">
            <summary>
            禁用
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.Scripts.DigitalWzbAutoBypass.Enable">
            <summary>
            启用
            </summary>
        </member>
        <member name="T:FSLib.Network.Http.Scripts.PackerDecode">
            <summary>
            包含了一些常见Packer的反Packer算法
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.Scripts.PackerDecode.Unpack(System.String)">
            <summary>
            解密格式如 eval(.....) 格式的JS代码
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.Scripts.PackerDecode.Unpack(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            使用指定的数据对代码进行解密。四个参数分别为packer后的开始四个参数
            </summary>
            <param name="p"></param>
            <param name="a"></param>
            <param name="c"></param>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.SocketInfoProvider.GetRawSocketFromStream(System.IO.Stream)">
            <summary>
            从连接流里获得原始Socket
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:FSLib.Network.Http.SocketInfoProvider.GetRawSocketFromStream(System.Net.ServicePoint)">
            <summary>
            从ServicePoint里获得服务器地址列表
            </summary>
            <param name="servicePoint"></param>
            <returns></returns>
        </member>
        <member name="T:FSLib.Network.Http.SR">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.SR.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.SR.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.SR.HttpContext_CheckResponseType_ResponseTypeMismatch">
            <summary>
              查找类似 响应类型无法转换为期望的类型，结果不匹配。是否请求发生了错误导致自动转换，或中途修改了响应类型？ 的本地化字符串。
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.SR.httpcontext_ex_multiplecall">
            <summary>
              查找类似 不可重复调用 {0} 方法 的本地化字符串。
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.SR.httpcontext_ex_redirectiondetected">
            <summary>
              查找类似 已设置禁止301/302跳转，但依然发生了跳转。这可能意味着请求不是预期的响应，请检查。 的本地化字符串。
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.SR.HttpContext_Result_RequestNotComplete">
            <summary>
              查找类似 请求尚未完成，无响应结果 的本地化字符串。
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.SR.httpexception_notsucceed">
            <summary>
              查找类似 WEB请求未能按预期成功完成。 的本地化字符串。
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.SR.httpexection_objectserializationnotsupport">
            <summary>
              查找类似 类型 {0} 不支持序列化。请确认返回数据类型支持JSON序列化或二进制序列化，并且服务器返回了正确的数据。 的本地化字符串。
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.SR.HttpRequestContent_ContentTypeString_NullOrEmpty">
            <summary>
              查找类似 ContentType 不可为空。 的本地化字符串。
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.SR.HttpRequestContent_ContentTypeString_ShouldUseProperty">
            <summary>
              查找类似 已知的 ContentType 类型必须用属性来设置。 的本地化字符串。
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.SR.Tip_HtmlDocumentNotInited">
            <summary>
              查找类似 看起来您正在尝试使用内置的对象类来创建 HtmlAgility.HtmlDocument 对象。遗憾的是这个操作并不能正常完成。请使用nuget安装”HtmlAgality Adapter for iFish&apos;s Network Library (HTTP)“包以便于正确支持此类型的返回。 的本地化字符串。
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.SR.Tip_HtmlDocumentNotSupport">
            <summary>
              查找类似 Windows.Forms 下的HtmlDocument不支持反序列化，无法创建。建议使用HtmlAgility中的HtmlDocument代替。请使用nuget安装”HtmlAgality Adapter for iFish&apos;s Network Library (HTTP)“包以便于正确支持此类型的返回。 的本地化字符串。
            </summary>
        </member>
        <member name="T:FSLib.Network.Http.TaskFailedException">
            <summary>
            请求操作完成，但是没有能成功的异常
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.TaskFailedException.Context">
            <summary>
            请求上下文
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.TaskFailedException.RequestMessage">
            <summary>
            请求信息
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.TaskFailedException.ResponseContent">
            <summary>
            响应内容
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.TaskFailedException.ResponseMessage">
            <summary>
            响应内容
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.TaskFailedException.RequestContent">
            <summary>
            请求内容
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.TaskFailedException.StatusCode">
            <summary>
            状态码
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.TaskFailedException.#ctor">
            <summary>
            请求操作完成，但是没有能成功的异常
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.TaskFailedException.Create(FSLib.Network.Http.HttpContext)">
            <summary>
            创建新的错误对象
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:FSLib.Network.Http.TraceHelper">
            <summary>
            跟踪辅助开关
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.TraceHelper.EnableNetworkTrace(System.Diagnostics.TraceListener[])">
            <summary>
            动态启用网络调试
            </summary>
        </member>
        <member name="T:FSLib.Network.Http.UriResolveEventArgs">
            <summary>
            表示将要进行解析的URL参数
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.UriResolveEventArgs.Url">
            <summary>
            获得将要解析的源地址
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.UriResolveEventArgs.Uri">
            <summary>
            获得或设置解析后的Uri
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.UriResolveEventArgs.RequestHeader">
            <summary>
            获得与此相关的请求头
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.UriResolveEventArgs.ContextData">
            <summary>
            获得关联的上下文数据
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.UriResolveEventArgs.#ctor(System.String,System.Nullable{System.Net.HttpRequestHeader},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            创建 <see cref="T:FSLib.Network.Http.UriResolveEventArgs" />  的新实例(UriResolveEventArgs)
            </summary>
            <param name="url"></param>
            <param name="requestHeader"></param>
            <param name="contextData"></param>
        </member>
        <member name="T:FSLib.Network.Http.WebEventArgs">
            <summary>
            包含了HTTP请求事件中存在的数据
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.WebEventArgs.Client">
            <summary>
            事件关联的客户端
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.WebEventArgs.Context">
            <summary>
            获得上下文
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.WebEventArgs.Request">
            <summary>
            获得当前的请求
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.WebEventArgs.Response">
            <summary>
            获得当前的响应
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.WebEventArgs.Cancelled">
            <summary>
            获得或设置是否取消操作
            </summary>
        </member>
        <member name="M:FSLib.Network.Http.WebEventArgs.#ctor(FSLib.Network.Http.HttpContext)">
            <summary>
            创建 <see cref="T:FSLib.Network.Http.WebEventArgs" />  的新实例(WebEventArgs)
            </summary>
        </member>
        <member name="T:FSLib.Network.Http.WwwAuthenticate">
            <summary>
            表示身份认证响应
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.WwwAuthenticate.Type">
            <summary>
            获得或设置标记
            </summary>
        </member>
        <member name="P:FSLib.Network.Http.WwwAuthenticate.Realm">
            <summary>
            获得或设置提示
            </summary>
        </member>
    </members>
</doc>
